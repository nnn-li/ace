{
    "project": {
        "name": "deuce",
        "description": "Browser Code Editor targeting ES6 written in TypeScript.",
        "version": "0.1.15",
        "url": "https://github.com/geometryzen/deuce",
        "logo": "../assets/logo.png"
    },
    "files": {
        "src/autocomplete/popup.ts": {
            "name": "src/autocomplete/popup.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/autocomplete/text_completer.ts": {
            "name": "src/autocomplete/text_completer.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/commands/CommandManager.ts": {
            "name": "src/commands/CommandManager.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/edit_session/BracketMatch.ts": {
            "name": "src/edit_session/BracketMatch.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ext/language_tools.ts": {
            "name": "src/ext/language_tools.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/hammer/recognizers/attribute.ts": {
            "name": "src/hammer/recognizers/attribute.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/hammer/recognizers/pan.ts": {
            "name": "src/hammer/recognizers/pan.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/hammer/recognizers/pinch.ts": {
            "name": "src/hammer/recognizers/pinch.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/hammer/recognizers/press.ts": {
            "name": "src/hammer/recognizers/press.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/hammer/recognizers/rotate.ts": {
            "name": "src/hammer/recognizers/rotate.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/hammer/recognizers/swipe.ts": {
            "name": "src/hammer/recognizers/swipe.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/hammer/hammer.ts": {
            "name": "src/hammer/hammer.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/hammer/utils.ts": {
            "name": "src/hammer/utils.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/layer/Gutter.ts": {
            "name": "src/layer/Gutter.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/lib/Sender.ts": {
            "name": "src/lib/Sender.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/lib/dom.ts": {
            "name": "src/lib/dom.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/lib/event.ts": {
            "name": "src/lib/event.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/lib/event_emitter.ts": {
            "name": "src/lib/event_emitter.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/lib/lang.ts": {
            "name": "src/lib/lang.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/lib/mix.ts": {
            "name": "src/lib/mix.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/lib/net.ts": {
            "name": "src/lib/net.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/lib/oop.ts": {
            "name": "src/lib/oop.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/lib/useragent.ts": {
            "name": "src/lib/useragent.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/html/Characters.ts": {
            "name": "src/mode/html/Characters.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/html/Comment.ts": {
            "name": "src/mode/html/Comment.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/html/DTD.ts": {
            "name": "src/mode/html/DTD.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/html/Document.ts": {
            "name": "src/mode/html/Document.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/html/Element.ts": {
            "name": "src/mode/html/Element.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/html/ElementStack.ts": {
            "name": "src/mode/html/ElementStack.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/html/Node.ts": {
            "name": "src/mode/html/Node.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/html/NodeType.ts": {
            "name": "src/mode/html/NodeType.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/html/ParentNode.ts": {
            "name": "src/mode/html/ParentNode.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/html/Tokenizer.ts": {
            "name": "src/mode/html/Tokenizer.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/html/TreeBuilder.ts": {
            "name": "src/mode/html/TreeBuilder.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/javascript/jshint.ts": {
            "name": "src/mode/javascript/jshint.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/javascript/name-stack.ts": {
            "name": "src/mode/javascript/name-stack.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/javascript/options.ts": {
            "name": "src/mode/javascript/options.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/javascript/scope-manager.ts": {
            "name": "src/mode/javascript/scope-manager.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/javascript/state.ts": {
            "name": "src/mode/javascript/state.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/python/Parser.ts": {
            "name": "src/mode/python/Parser.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/python/Tokenizer.ts": {
            "name": "src/mode/python/Tokenizer.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/python/base.ts": {
            "name": "src/mode/python/base.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/python/builder.ts": {
            "name": "src/mode/python/builder.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/python/compiler.ts": {
            "name": "src/mode/python/compiler.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/python/numericLiteral.ts": {
            "name": "src/mode/python/numericLiteral.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/python/symtable.ts": {
            "name": "src/mode/python/symtable.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/typescript/CompletionService.ts": {
            "name": "src/mode/typescript/CompletionService.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/typescript/EditorPosition.ts": {
            "name": "src/mode/typescript/EditorPosition.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/typescript/autoComplete.ts": {
            "name": "src/mode/typescript/autoComplete.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/HtmlMode.ts": {
            "name": "src/mode/HtmlMode.ts",
            "modules": {},
            "classes": {
                "HtmlMode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mode/Mode.ts": {
            "name": "src/mode/Mode.ts",
            "modules": {},
            "classes": {
                "Mode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/mode/python_worker.ts": {
            "name": "src/mode/python_worker.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mode/typescript_worker.ts": {
            "name": "src/mode/typescript_worker.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/modules/deuce.d.ts": {
            "name": "src/modules/deuce.d.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/mouse/dragdrop_handler.ts": {
            "name": "src/mouse/dragdrop_handler.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/theme/mathdoodle.ts": {
            "name": "src/theme/mathdoodle.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/worker/Mirror.ts": {
            "name": "src/worker/Mirror.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/worker/WorkerClient.ts": {
            "name": "src/worker/WorkerClient.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/worker/worker-amd.ts": {
            "name": "src/worker/worker-amd.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/worker/worker-systemjs.ts": {
            "name": "src/worker/worker-systemjs.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/workspace/deuce_workspace_worker.ts": {
            "name": "src/workspace/deuce_workspace_worker.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/workspace/workspace.ts": {
            "name": "src/workspace/workspace.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/Anchor.ts": {
            "name": "src/Anchor.ts",
            "modules": {},
            "classes": {
                "Anchor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/BackgroundTokenizer.ts": {
            "name": "src/BackgroundTokenizer.ts",
            "modules": {},
            "classes": {
                "BackgroundTokenizer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/EditSession.ts": {
            "name": "src/EditSession.ts",
            "modules": {},
            "classes": {
                "EditSession": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Editor.ts": {
            "name": "src/Editor.ts",
            "modules": {},
            "classes": {
                "Editor": 1,
                "GutterTooltip": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/EditorDocument.ts": {
            "name": "src/EditorDocument.ts",
            "modules": {},
            "classes": {
                "EditorDocument": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Fold.ts": {
            "name": "src/Fold.ts",
            "modules": {},
            "classes": {
                "Fold": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/FoldLine.ts": {
            "name": "src/FoldLine.ts",
            "modules": {},
            "classes": {
                "FoldLine": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/HScrollBar.ts": {
            "name": "src/HScrollBar.ts",
            "modules": {},
            "classes": {
                "HScrollBar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Position.ts": {
            "name": "src/Position.ts",
            "modules": {},
            "classes": {
                "Position": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Range.ts": {
            "name": "src/Range.ts",
            "modules": {},
            "classes": {
                "Range": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/RenderLoop.ts": {
            "name": "src/RenderLoop.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/ScrollBar.ts": {
            "name": "src/ScrollBar.ts",
            "modules": {},
            "classes": {
                "": 1,
                "ScrollBar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Search.ts": {
            "name": "src/Search.ts",
            "modules": {},
            "classes": {
                "Search": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Selection.ts": {
            "name": "src/Selection.ts",
            "modules": {},
            "classes": {
                "Selection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/TokenIterator.ts": {
            "name": "src/TokenIterator.ts",
            "modules": {},
            "classes": {
                "TokenIterator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Tokenizer.ts": {
            "name": "src/Tokenizer.ts",
            "modules": {},
            "classes": {
                "Tokenizer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Tooltip.ts": {
            "name": "src/Tooltip.ts",
            "modules": {},
            "classes": {
                "Tooltip": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/UndoManager.ts": {
            "name": "src/UndoManager.ts",
            "modules": {},
            "classes": {
                "UndoManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/VScrollBar.ts": {
            "name": "src/VScrollBar.ts",
            "modules": {},
            "classes": {
                "VScrollBar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/VirtualRenderer.ts": {
            "name": "src/VirtualRenderer.ts",
            "modules": {},
            "classes": {
                "VirtualRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/autocomplete.ts": {
            "name": "src/autocomplete.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/config.ts": {
            "name": "src/config.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/range_list.ts": {
            "name": "src/range_list.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/typeInfoTip.ts": {
            "name": "src/typeInfoTip.ts",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "HtmlMode": {
            "name": "HtmlMode",
            "shortname": "HtmlMode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mode/HtmlMode.ts",
            "line": 62,
            "is_constructor": 1
        },
        "Mode": {
            "name": "Mode",
            "shortname": "Mode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/mode/Mode.ts",
            "line": 43
        },
        "Anchor": {
            "name": "Anchor",
            "shortname": "Anchor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Anchor.ts",
            "line": 35,
            "description": "Defines the floating pointer in the document. Whenever text is inserted or deleted before the cursor, the position of the cursor is updated.",
            "extends": "EventEmitterClass"
        },
        "BackgroundTokenizer": {
            "name": "BackgroundTokenizer",
            "shortname": "BackgroundTokenizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/BackgroundTokenizer.ts",
            "line": 35,
            "description": "Tokenizes the current [[EditorDocument `EditorDocument`]] in the background, and caches the tokenized rows for future use. \n\nIf a certain row is changed, everything below that row is re-tokenized."
        },
        "EditSession": {
            "name": "EditSession",
            "shortname": "EditSession",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/EditSession.ts",
            "line": 199,
            "extends": "EventEmitterClass",
            "is_constructor": 1,
            "params": [
                {
                    "name": "doc",
                    "description": "",
                    "type": "EditorDocument"
                },
                {
                    "name": "mode",
                    "description": "",
                    "optional": true
                },
                {
                    "name": "cb",
                    "description": "",
                    "optional": true
                }
            ]
        },
        "Editor": {
            "name": "Editor",
            "shortname": "Editor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Editor.ts",
            "line": 60,
            "description": "The `Editor` acts as a controller, mediating between the editSession and renderer.",
            "extends": "EventEmitterClass"
        },
        "": {
            "file": "src/ScrollBar.ts",
            "line": 44,
            "description": "Creates a new `ScrollBar`.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "renderer",
                    "description": "The view.",
                    "type": "VirtualRenderer"
                },
                {
                    "name": "session",
                    "description": "The model.",
                    "type": "EditSession"
                }
            ]
        },
        "GutterTooltip": {
            "name": "GutterTooltip",
            "shortname": "GutterTooltip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Editor.ts",
            "line": 3588,
            "extends": "Tooltip"
        },
        "EditorDocument": {
            "name": "EditorDocument",
            "shortname": "EditorDocument",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/EditorDocument.ts",
            "line": 69,
            "is_constructor": 1,
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String | Array<string>"
                }
            ]
        },
        "Fold": {
            "name": "Fold",
            "shortname": "Fold",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Fold.ts",
            "line": 52,
            "description": "Simple fold-data struct.",
            "extends": "RangeList",
            "is_constructor": 1,
            "params": [
                {
                    "name": "range",
                    "description": "",
                    "type": "Range"
                },
                {
                    "name": "placeholder",
                    "description": "",
                    "type": "String"
                }
            ]
        },
        "FoldLine": {
            "name": "FoldLine",
            "shortname": "FoldLine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/FoldLine.ts",
            "line": 47,
            "description": "If an array is passed in, the folds are expected to be sorted already.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "foldData",
                    "description": ""
                },
                {
                    "name": "folds",
                    "description": "",
                    "type": "Fold[]"
                }
            ]
        },
        "HScrollBar": {
            "name": "HScrollBar",
            "shortname": "HScrollBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/HScrollBar.ts",
            "line": 5,
            "description": "Represents a horizontal scroll bar."
        },
        "Position": {
            "name": "Position",
            "shortname": "Position",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Position.ts",
            "line": 1
        },
        "Range": {
            "name": "Range",
            "shortname": "Range",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Range.ts",
            "line": 31,
            "description": "This object is used in various places to indicate a region within the editor.\nTo better visualize how this works, imagine a rectangle.\nEach quadrant of the rectangle is analogus to a range, as ranges contain a starting row and starting column, and an ending row, and ending column."
        },
        "ScrollBar": {
            "name": "ScrollBar",
            "shortname": "ScrollBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/ScrollBar.ts",
            "line": 34,
            "description": "An abstract class representing a native scrollbar control."
        },
        "Search": {
            "name": "Search",
            "shortname": "Search",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Search.ts",
            "line": 42,
            "description": "Creates a new `Search` object. The following search options are avaliable:\n\n- `needle`: The string or regular expression you're looking for\n- `backwards`: Whether to search backwards from where cursor currently is. Defaults to `false`.\n- `wrap`: Whether to wrap the search back to the beginning when it hits the end. Defaults to `false`.\n- `caseSensitive`: Whether the search ought to be case-sensitive. Defaults to `false`.\n- `wholeWord`: Whether the search matches only on whole words. Defaults to `false`.\n- `range`: The [[Range]] to search within. Set this to `null` for the whole document\n- `regExp`: Whether the search is a regular expression or not. Defaults to `false`.\n- `start`: The starting [[Range]] or cursor position to begin the search\n- `skipCurrent`: Whether or not to include the current line in the search. Default to `false`.",
            "is_constructor": 1
        },
        "Selection": {
            "name": "Selection",
            "shortname": "Selection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Selection.ts",
            "line": 40,
            "description": "Contains the cursor position and the text selection of an edit session.\n\nThe row/columns used in the selection are in document coordinates representing ths coordinates as thez appear in the document before applying soft wrap and folding."
        },
        "TokenIterator": {
            "name": "TokenIterator",
            "shortname": "TokenIterator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/TokenIterator.ts",
            "line": 32,
            "description": "This class provides an essay way to treat the document as a stream of tokens, and provides methods to iterate over these tokens."
        },
        "Tokenizer": {
            "name": "Tokenizer",
            "shortname": "Tokenizer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Tokenizer.ts",
            "line": 33,
            "description": "This class takes a set of highlighting rules, and creates a tokenizer out of them. For more information, see [the wiki on extending highlighters](https://github.com/ajaxorg/ace/wiki/Creating-or-Extending-an-Edit-Mode#wiki-extendingTheHighlighter)."
        },
        "Tooltip": {
            "name": "Tooltip",
            "shortname": "Tooltip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/Tooltip.ts",
            "line": 44,
            "is_constructor": 1,
            "params": [
                {
                    "name": "parentElement",
                    "description": "",
                    "type": "HTMLElement"
                }
            ]
        },
        "UndoManager": {
            "name": "UndoManager",
            "shortname": "UndoManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/UndoManager.ts",
            "line": 58,
            "description": "Resets the current undo state.",
            "is_constructor": 1
        },
        "VScrollBar": {
            "name": "VScrollBar",
            "shortname": "VScrollBar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/VScrollBar.ts",
            "line": 6,
            "description": "Represents a vertical scroll bar."
        },
        "VirtualRenderer": {
            "name": "VirtualRenderer",
            "shortname": "VirtualRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/VirtualRenderer.ts",
            "line": 158,
            "description": "Constructs a new `VirtualRenderer` within the `container` specified.",
            "related": "editor.renderer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "container",
                    "description": "The root element of the editor.",
                    "type": "HTMLElement"
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/autocomplete/popup.ts",
            "line": 233,
            "params": [
                {
                    "name": "}",
                    "description": "pos",
                    "type": "Top;left"
                },
                {
                    "name": "lineHeight",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "topdownOnly",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/autocomplete/text_completer.ts",
            "line": 34,
            "description": "Does a distance analysis of the word `prefix` at position `pos` in `doc`.",
            "return": {
                "description": "Map of string to number."
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/autocomplete/text_completer.ts",
            "line": 66,
            "description": "This textual completer is rather dumb.",
            "class": "HtmlMode"
        },
        {
            "file": "src/commands/CommandManager.ts",
            "line": 16,
            "params": [
                {
                    "name": "platform",
                    "description": "Identifier for the platform; must be either `'mac'` or `'win'`",
                    "type": "String"
                },
                {
                    "name": "commands",
                    "description": "A list of commands",
                    "type": "Array"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/edit_session/BracketMatch.ts",
            "line": 35,
            "description": "Utility service fo",
            "class": "HtmlMode"
        },
        {
            "file": "src/edit_session/BracketMatch.ts",
            "line": 39,
            "description": "Maps an opening(closing) bracket string to the corresponding closing(opening) bracket.",
            "class": "HtmlMode"
        },
        {
            "file": "src/ext/language_tools.ts",
            "line": 185,
            "description": "Enable live autocomplete. If the value is an array, it is assumed to be an array of completers\nand will use them instead of the default completers.",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/recognizers/attribute.ts",
            "line": 18,
            "description": "This recognizer is just used as a base for the simple attribute recognizers.",
            "is_constructor": 1,
            "extends": "Recognizer",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/recognizers/attribute.ts",
            "line": 28,
            "description": "Used to check if the recognizer receives valid input, like input.distance > 10.",
            "memberof": "ContinuousRecognizer",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "IComputedEvent"
                }
            ],
            "return": {
                "description": "recognized",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/recognizers/attribute.ts",
            "line": 58,
            "description": "Process the input and return the state for the recognizer",
            "memberof": "ContinuousRecognizer",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "State",
                "type": "*"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/recognizers/pan.ts",
            "line": 18,
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/recognizers/pinch.ts",
            "line": 4,
            "description": "Pinch\nRecognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).",
            "is_constructor": 1,
            "extends": "ContinuousRecognizer",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/recognizers/press.ts",
            "line": 19,
            "description": "Press\nRecognized when the pointer is down for x ms without any movement.",
            "is_constructor": 1,
            "extends": "Recognizer",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/recognizers/rotate.ts",
            "line": 4,
            "description": "Rotate\nRecognized when two or more pointer are moving in a circular motion.",
            "is_constructor": 1,
            "extends": "ContinuousRecognizer",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/recognizers/swipe.ts",
            "line": 10,
            "description": "Swipe\nRecognized when the pointer is moving fast enough in the allowed direction.",
            "is_constructor": 1,
            "extends": "ContinuousRecognizer",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 93,
            "description": "Maintains the history of events for a gesture recognition.",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 143,
            "description": "The contract for what the Manager requires from a Recognizer.",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 177,
            "description": "Manager",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "is_constructor": 1,
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 190,
            "description": "stop recognizing for this session.\nThis session will be discarded, when a new [input]start event is fired.\nWhen forced, the recognizer cycle is stopped immediately.",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 200,
            "description": "run the recognizers!\ncalled by the inputHandler function on every movement of the pointers (touches)\nit walks through all the recognizers and tries to detect the gesture that is being made",
            "params": [
                {
                    "name": "inputData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 258,
            "description": "get a recognizer by its event name.",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 271,
            "description": "add a recognizer to the manager\nexisting recognizers with the same event name will be removed",
            "params": [
                {
                    "name": "recognizer",
                    "description": "",
                    "type": "Recognizer"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 289,
            "description": "remove a recognizer by name or instance",
            "params": [
                {
                    "name": "recognizer",
                    "description": "",
                    "type": "Recognizer|String"
                }
            ],
            "return": {
                "description": "",
                "type": "Manager"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 303,
            "description": "bind event",
            "params": [
                {
                    "name": "events",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "this",
                "type": "EventEmitter"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 318,
            "description": "unbind event, leave emit blank to remove all handlers",
            "params": [
                {
                    "name": "events",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "this",
                "type": "EventEmitter"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 337,
            "description": "emit event to the listeners",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "IComputedEvent"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 373,
            "description": "destroy the manager and unbinds all events\nit doesn't unbind dom events, that is the user own responsibility",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 400,
            "description": "trigger dom event",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 425,
            "description": "Touch Action\nsets the touchAction property or uses the js alternative",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Manager"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "is_constructor": 1,
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 436,
            "description": "set the touchAction value on the element or enable the polyfill",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 452,
            "description": "just re-set the touchAction value",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 459,
            "description": "compute the value for the touchAction property based on the recognizer's settings",
            "return": {
                "description": "value",
                "type": "String"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 474,
            "description": "this method is called on each input cycle and provides the preventing of the browser behavior",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 504,
            "description": "call preventDefault to prevent the browser's default behavior (scrolling in most cases)",
            "params": [
                {
                    "name": "srcEvent",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 514,
            "description": "when the touchActions are collected they are not a valid value, so we need to clean things up. *",
            "params": [
                {
                    "name": "actions",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 599,
            "description": "create new input type manager",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Manager"
                }
            ],
            "return": {
                "description": "",
                "type": "Input"
            },
            "is_constructor": 1,
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 628,
            "description": "should handle the inputEvent data and trigger the callback",
            "virtual": "",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 634,
            "description": "bind the events",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 643,
            "description": "unbind the events",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 653,
            "description": "handle input events",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Manager"
                },
                {
                    "name": "eventType",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "input",
                    "description": "",
                    "type": "IComputedEvent"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 668,
            "description": "extend the data with some usable properties like scale, rotate, velocity etc",
            "params": [
                {
                    "name": "manager",
                    "description": "",
                    "type": "Manager"
                },
                {
                    "name": "input",
                    "description": "",
                    "type": "IComputedEvent"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 752,
            "description": "get the center of all the pointers",
            "params": [
                {
                    "name": "pointers",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "center contains `clientX` and `clientY` properties",
                "type": "ClientLocation"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 776,
            "description": "calculate the velocity between two points. unit is in px per ms.",
            "params": [
                {
                    "name": "deltaTime",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "velocity `x` and `y`",
                "type": "Object"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 787,
            "description": "get the direction between two points",
            "params": [
                {
                    "name": "movement",
                    "description": "",
                    "type": "VectorE2"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "direction",
                "type": "Number"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 823,
            "description": "calculate the absolute distance between two points",
            "params": [
                {
                    "name": "p1",
                    "description": "{x, y}",
                    "type": "Object"
                },
                {
                    "name": "p2",
                    "description": "{x, y}",
                    "type": "Object"
                },
                {
                    "name": "props",
                    "description": "containing x and y keys",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 840,
            "description": "calculate the angle between two coordinates",
            "params": [
                {
                    "name": "p1",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "p2",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "props",
                    "description": "containing x and y keys",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "angle",
                "type": "Number"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 856,
            "description": "calculate the rotation degrees between two pointersets",
            "params": [
                {
                    "name": "start",
                    "description": "array of pointers",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "array of pointers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "rotation",
                "type": "Number"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 866,
            "description": "calculate the scale factor between two pointersets\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "params": [
                {
                    "name": "start",
                    "description": "array of pointers",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "array of pointers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "scale",
                "type": "Number"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 889,
            "description": "Multi-user touch events input",
            "is_constructor": 1,
            "extends": "Input",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 906,
            "this": "{TouchInput}",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "flag",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "[all, changed]",
                "type": "Undefined|Array"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 967,
            "description": "Recognizer flow explained; *\nAll recognizers have the initial state of POSSIBLE when a input session starts.\nThe definition of a input session is from the first input until the last input, with all it's movement in it. *\nExample session for mouse-input: mousedown -> mousemove -> mouseup\n\nOn each recognizing cycle (see Manager.recognize) the .recognize() method is executed\nwhich determines with state it should be.\n\nIf the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\nPOSSIBLE to give it another change on the next cycle.\n\n              Possible\n                 |\n           +-----+---------------+\n           |                     |\n     +-----+-----+               |\n     |           |               |\n  Failed      Cancelled          |\n                         +-------+------+\n                         |              |\n                     Recognized       Began\n                                        |\n                                     Changed\n                                        |\n                                    Recognized",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1010,
            "description": "Recognizer\nEvery recognizer needs to extend from this class.",
            "is_constructor": 1,
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1036,
            "description": "recognize simultaneous with an other recognizer.",
            "params": [
                {
                    "name": "otherRecognizer",
                    "description": "",
                    "type": "Recognizer"
                }
            ],
            "return": {
                "description": "this",
                "type": "Recognizer"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1051,
            "description": "drop the simultaneous link. it doesnt remove the link on the other recognizer.",
            "params": [
                {
                    "name": "otherRecognizer",
                    "description": "",
                    "type": "Recognizer"
                }
            ],
            "return": {
                "description": "this",
                "type": "Recognizer"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1062,
            "description": "recognizer can only run when an other is failing",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1075,
            "description": "drop the requireFailure link. it does not remove the link on the other recognizer.",
            "params": [
                {
                    "name": "otherRecognizer",
                    "description": "",
                    "type": "Recognizer"
                }
            ],
            "return": {
                "description": "this",
                "type": "Recognizer"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1089,
            "description": "has require failures boolean",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1097,
            "description": "if the recognizer can recognize simultaneous with an other recognizer",
            "params": [
                {
                    "name": "otherRecognizer",
                    "description": "",
                    "type": "Recognizer"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1106,
            "description": "You should use `tryEmit` instead of `emit` directly to check\nthat all the needed recognizers has failed before emitting.",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1134,
            "description": "Check that all the require failure recognizers has failed,\nif true, it emits a gesture event,\notherwise, setup the state to FAILED.",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1150,
            "description": "can we emit?",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1165,
            "description": "update the recognizer",
            "params": [
                {
                    "name": "inputData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1190,
            "description": "return the state of the recognizer\nthe actual recognizing happens in this method",
            "virtual": "",
            "params": [
                {
                    "name": "inputData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "STATE",
                "type": "Const"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1201,
            "description": "return the preferred touch-action",
            "virtual": "",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1208,
            "description": "called when the gesture isn't allowed to recognize\nlike when another is being recognized or it is disabled",
            "virtual": "",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1216,
            "description": "TODO: Are the string values part of the API, or just for debugging?\nget a usable string, used as event postfix",
            "params": [
                {
                    "name": "state",
                    "description": "",
                    "type": "Const"
                }
            ],
            "return": {
                "description": "state",
                "type": "String"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1238,
            "description": "Provide a decode of the state.\nThe result is not normative and should not be considered API.\nSine the state is a bit field, show all bits even though they may/should be exclusive.",
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1272,
            "description": "TODO: This really belongs in the input service.\ndirection cons to string",
            "params": [
                {
                    "name": "direction",
                    "description": "",
                    "type": "Const"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/hammer.ts",
            "line": 1295,
            "description": "get a recognizer by name if it is bound to a manager",
            "params": [
                {
                    "name": "otherRecognizer",
                    "description": "",
                    "type": "Recognizer|String"
                },
                {
                    "name": "recognizer",
                    "description": "",
                    "type": "Recognizer"
                }
            ],
            "return": {
                "description": "",
                "type": "Recognizer"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 10,
            "description": "set a timeout with a given `this` scope.",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "timeout",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 21,
            "description": "if the argument is an array, we want to execute the fn on each entry\nif it aint an array we don't want to do a thing.\nthis is used by all the methods that accept a single and array argument.",
            "params": [
                {
                    "name": "arg",
                    "description": "",
                    "type": "*|Array"
                },
                {
                    "name": "fn",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 38,
            "description": "walk objects and arrays",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "iterator",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 66,
            "description": "extend object.\nmeans that properties in dest will be overwritten by the ones in src.",
            "params": [
                {
                    "name": "dest",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "merge",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest",
                "type": "Object"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 86,
            "description": "merge the values from src in the dest.\nmeans that properties that exist in dest will not be overwritten by src",
            "params": [
                {
                    "name": "dest",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "dest",
                "type": "Object"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 97,
            "description": "simple class inheritance",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "base",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "properties",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 116,
            "description": "simple function bind",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 128,
            "description": "use the val2 when val1 is undefined",
            "params": [
                {
                    "name": "val1",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "val2",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 138,
            "description": "addEventListener with multiple events at once",
            "params": [
                {
                    "name": "eventTarget",
                    "description": "",
                    "type": "EventTarget"
                },
                {
                    "name": "types",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 150,
            "description": "removeEventListener with multiple events at once",
            "params": [
                {
                    "name": "eventTarget",
                    "description": "",
                    "type": "EventTarget"
                },
                {
                    "name": "types",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 162,
            "description": "find if a node is in the given parent",
            "itemtype": "method",
            "name": "hasParent",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "found",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 179,
            "description": "small indexOf wrapper",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "find",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "found",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 189,
            "description": "split string on whitespace",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "words",
                "type": "Array"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 198,
            "description": "find if a array contains the object using indexOf or a simple polyFill",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "find",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "findByKey",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "false when not found, or the index",
                "type": "Boolean|Number"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 220,
            "description": "convert array-like objects to real arrays",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 229,
            "description": "unique array with objects based on a key (like 'id') or just by the array's value",
            "params": [
                {
                    "name": "src",
                    "description": "[{id:1},{id:2},{id:1}]",
                    "type": "Array"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "sort",
                    "description": "",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "False"
                }
            ],
            "return": {
                "description": "[{id:1},{id:2}]",
                "type": "Array"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 263,
            "description": "get the prefixed property",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "prefixed",
                "type": "String|Undefined"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 286,
            "description": "get a unique id",
            "return": {
                "description": "uniqueId",
                "type": "Number"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/hammer/utils.ts",
            "line": 295,
            "description": "get the window object of an element",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Window"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/layer/Gutter.ts",
            "line": 264,
            "description": "Returns either \"markers\", \"foldWidgets\", or undefined.",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/Sender.ts",
            "line": 3,
            "description": "Used in Web Workers.\nUses postMessage to communicate with a taget window.",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/dom.ts",
            "line": 52,
            "description": "Add a CSS class to the list of classes on the given node",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/dom.ts",
            "line": 61,
            "description": "Remove a CSS class from the list of classes on the given node",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/event.ts",
            "line": 97,
            "description": "Returns a function which may be used to manually release the mouse.",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/event.ts",
            "line": 123,
            "description": "Adds a portable 'mousewheel' ['wheel','DOM MouseScroll'] listener to an element.",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/event.ts",
            "line": 401,
            "description": "A backwards-compatible, browser-neutral, requestAnimationFrame.",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/event_emitter.ts",
            "line": 4,
            "description": "Intended to be used as a Mixin.\nN.B. The original implementation was an object, the TypeScript way is\ndesigned to satisfy the compiler.",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/event_emitter.ts",
            "line": 10,
            "description": "Each event name has multiple callbacks.",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/event_emitter.ts",
            "line": 14,
            "description": "There may be one default handler for an event too.",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/event_emitter.ts",
            "line": 54,
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/event_emitter.ts",
            "line": 61,
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/lang.ts",
            "line": 31,
            "description": "Returns the last element in an array.",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "T[]"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/lang.ts",
            "line": 121,
            "description": "splice out of 'array' anything that === 'value'",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/lang.ts",
            "line": 140,
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/mix.ts",
            "line": 1,
            "description": "See TypeScript Mixins documentation.",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/net.ts",
            "line": 1,
            "description": "based on code from:",
            "license": "RequireJS text 0.25.0 Copyright (c) 2010-2011, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/requirejs for details",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/net.ts",
            "line": 11,
            "description": "Executes a 'GET' HTTP request with a responseText callback.",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/net.ts",
            "line": 27,
            "description": "Creates a <script> tag, sets the 'src' property, and calls back when loaded.",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/net.ts",
            "line": 48,
            "description": "Convert a url into a fully qualified absolute URL.\nThis function does not work in IE6",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/oop.ts",
            "line": 31,
            "description": "Classic ACE",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/oop.ts",
            "line": 46,
            "description": "Classic ACE",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/oop.ts",
            "line": 56,
            "description": "Classic ACE",
            "class": "HtmlMode"
        },
        {
            "file": "src/lib/useragent.ts",
            "line": 46,
            "description": "Return an exports.OS constant",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Characters.ts",
            "line": 7,
            "description": "The constructor.",
            "params": [
                {
                    "name": "locator",
                    "description": "the locator"
                },
                {
                    "name": "data",
                    "description": "the buffer",
                    "type": "String"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Characters.ts",
            "line": 17,
            "see": [
                "nu.validator.saxtree.Node#visit(nu.validator.saxtree.TreeParser)"
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Comment.ts",
            "line": 4,
            "description": "A comment.",
            "version": "$Id$",
            "author": "hsivonen",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Comment.ts",
            "line": 13,
            "description": "The constructor.",
            "params": [
                {
                    "name": "locator",
                    "description": "the locator"
                },
                {
                    "name": "buf",
                    "description": "the buffer"
                },
                {
                    "name": "start",
                    "description": "the offset"
                },
                {
                    "name": "length",
                    "description": "the length"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Comment.ts",
            "line": 25,
            "see": [
                "nu.validator.saxtree.Node#visit(nu.validator.saxtree.TreeParser)"
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/DTD.ts",
            "line": 9,
            "description": "The constructor.",
            "params": [
                {
                    "name": "locator",
                    "description": "the locator"
                },
                {
                    "name": "name",
                    "description": "the name"
                },
                {
                    "name": "publicIdentifier",
                    "description": "the public id"
                },
                {
                    "name": "systemIdentifier",
                    "description": "the system id"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/DTD.ts",
            "line": 24,
            "see": [
                "nu.validator.saxtree.Node#visit(nu.validator.saxtree.TreeParser)"
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/DTD.ts",
            "line": 32,
            "see": [
                "nu.validator.saxtree.Node#revisit(nu.validator.saxtree.TreeParser)"
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Document.ts",
            "line": 6,
            "description": "A document.",
            "version": "$Id$",
            "author": "hsivonen",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Document.ts",
            "line": 16,
            "see": [
                "nu.validator.saxtree.Node#visit(nu.validator.saxtree.TreeParser)"
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Document.ts",
            "line": 24,
            "see": [
                "nu.validator.saxtree.Node#revisit(nu.validator.saxtree.TreeParser)"
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Element.ts",
            "line": 11,
            "description": "An element.",
            "version": "$Id$",
            "author": "hsivonen",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Element.ts",
            "line": 26,
            "see": [
                "nu.validator.saxtree.Node#visit(nu.validator.saxtree.TreeParser)"
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Element.ts",
            "line": 41,
            "see": [
                "nu.validator.saxtree.Node#revisit(nu.validator.saxtree.TreeParser)"
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 58,
            "description": "Represents a stack of open elements",
            "is_constructor": 1,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 69,
            "params": [
                {
                    "name": "localName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "isMarker",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 86,
            "description": "Pushes the item on the stack top",
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "StackItem"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 94,
            "description": "Pushes the item on the stack top",
            "params": [
                {
                    "name": "item",
                    "description": "HTML element stack item",
                    "type": "StackItem"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 103,
            "description": "Pushes the item on the stack top",
            "params": [
                {
                    "name": "item",
                    "description": "HEAD element stack item",
                    "type": "StackItem"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 112,
            "description": "Pushes the item on the stack top",
            "params": [
                {
                    "name": "item",
                    "description": "BODY element stack item",
                    "type": "StackItem"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 121,
            "description": "Pops the topmost item",
            "return": {
                "description": "",
                "type": "StackItem"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 129,
            "description": "Removes the item from the element stack",
            "params": [
                {
                    "name": "item",
                    "description": "The item to remove",
                    "type": "StackItem"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 137,
            "description": "Pops until an element with a given localName is popped",
            "params": [
                {
                    "name": "localName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 163,
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "StackItem"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 172,
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "StackItem"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 181,
            "params": [
                {
                    "name": "localName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 190,
            "params": [
                {
                    "name": "localName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 199,
            "params": [
                {
                    "name": "localName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 208,
            "params": [
                {
                    "name": "localName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 217,
            "params": [
                {
                    "name": "localName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 226,
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 240,
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "StackItem"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ElementStack.ts",
            "line": 257,
            "params": [
                {
                    "name": "localName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Node.ts",
            "line": 7,
            "description": "The common node superclass.",
            "version": "$Id$",
            "author": "hsivonen",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Node.ts",
            "line": 25,
            "description": "Visit the node.",
            "params": [
                {
                    "name": "treeParser",
                    "description": "the visitor"
                }
            ],
            "throws": {
                "description": "SAXException if stuff goes wrong"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Node.ts",
            "line": 35,
            "description": "Revisit the node.",
            "params": [
                {
                    "name": "treeParser",
                    "description": "the visitor"
                }
            ],
            "throws": {
                "description": "SAXException if stuff goes wrong"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Node.ts",
            "line": 49,
            "description": "Detach this node from its parent.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/NodeType.ts",
            "line": 2,
            "description": "A CDATA section.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/NodeType.ts",
            "line": 6,
            "description": "A run of characters.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/NodeType.ts",
            "line": 10,
            "description": "A comment.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/NodeType.ts",
            "line": 14,
            "description": "A document.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/NodeType.ts",
            "line": 18,
            "description": "A document fragment.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/NodeType.ts",
            "line": 22,
            "description": "A DTD.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/NodeType.ts",
            "line": 26,
            "description": "An element.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/NodeType.ts",
            "line": 30,
            "description": "An entity.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/NodeType.ts",
            "line": 34,
            "description": "A run of ignorable whitespace.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/NodeType.ts",
            "line": 38,
            "description": "A processing instruction.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/NodeType.ts",
            "line": 42,
            "description": "A skipped entity.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ParentNode.ts",
            "line": 11,
            "description": "Insert a new child before a pre-existing child and return the newly inserted child.",
            "params": [
                {
                    "name": "child",
                    "description": "the new child"
                },
                {
                    "name": "sibling",
                    "description": "the existing child before which to insert (must be a child of this node) or <code>null</code> to append"
                }
            ],
            "return": {
                "description": "<code>child</code>"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ParentNode.ts",
            "line": 60,
            "description": "Append a child to this node and return the child.",
            "params": [
                {
                    "name": "child",
                    "description": "the child to append."
                }
            ],
            "return": {
                "description": "<code>child</code>"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ParentNode.ts",
            "line": 78,
            "description": "Append the children of another node to this node removing them from the other node .",
            "params": [
                {
                    "name": "parent",
                    "description": "the other node whose children to append to this one"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/ParentNode.ts",
            "line": 101,
            "description": "Remove a child from this node.",
            "params": [
                {
                    "name": "node",
                    "description": "the child to remove"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/Tokenizer.ts",
            "line": 7,
            "params": [
                {
                    "name": "tokenHandler",
                    "description": "",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 16,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 41,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 2438,
            "description": "Adoption agency algorithm (http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoption-agency-algorithm)",
            "params": [
                {
                    "name": "name",
                    "description": "A tag name subject for which the algorithm is being run",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns false if the algorithm was aborted",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 2634,
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 2642,
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 2740,
            "description": "Returns topmost open element",
            "return": {
                "description": "",
                "type": "StackItem"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 2748,
            "description": "Populates current open element",
            "return": {
                "description": "",
                "type": "StackItem"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 2756,
            "description": "Returns true if redirect is required and current open element causes foster parenting",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 2764,
            "description": "Implements http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#closing-elements-that-have-implied-end-tags",
            "params": [
                {
                    "name": "exclude",
                    "description": "Ignore specific tag name",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 2777,
            "description": "Performs http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#reconstruct-the-active-formatting-elements",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 2814,
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "StackItem"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 2860,
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "StackItem"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 2869,
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "StackItem"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 2896,
            "params": [
                {
                    "name": "context",
                    "description": "A context element name for fragment parsing",
                    "type": "String"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 2909,
            "params": [
                {
                    "name": "code",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/html/TreeBuilder.ts",
            "line": 2922,
            "description": "Resets the insertion mode (http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#reset-the-insertion-mode-appropriately)",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/jshint.ts",
            "line": 190,
            "description": "TODO: Remove in JSHint 3",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/jshint.ts",
            "line": 211,
            "description": "Use `in` to check for the presence of any explicitly-specified value for\n`globalstrict` because both `true` and `false` should trigger an error.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/jshint.ts",
            "line": 223,
            "description": "TODO: Extend this restriction to *all* ES6-specific options.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/jshint.ts",
            "line": 545,
            "description": "TODO: Remove in JSHint 3",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/jshint.ts",
            "line": 668,
            "description": "TODO: Extend this restriction to *all* \"environmental\" options.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/jshint.ts",
            "line": 676,
            "description": "TODO: Remove in JSHint 3",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/jshint.ts",
            "line": 1357,
            "description": "Checks the left hand side of an assignment for issues, returns if ok",
            "params": [
                {
                    "name": "left",
                    "description": "- the left hand side of the assignment",
                    "type": "Token"
                },
                {
                    "name": "assignToken",
                    "description": "- the token for the assignment, used for reporting",
                    "type": "Token="
                },
                {
                    "name": "options",
                    "description": "- optional object",
                    "type": "Object=",
                    "props": [
                        {
                            "name": "allowDestructuring",
                            "description": "- whether to allow destructuting binding",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Whether the left hand side is OK",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/jshint.ts",
            "line": 2832,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "loneArg",
                            "description": "The argument to the function in cases\n                                 where it was defined using the\n                                 single-argument shorthand.",
                            "type": "Token",
                            "optional": true
                        },
                        {
                            "name": "parsedOpening",
                            "description": "Whether the opening parenthesis has\n                                      already been parsed.",
                            "type": "Bool",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "}",
                "type": "{ arity: number, params: Array.<string>"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/jshint.ts",
            "line": 2975,
            "description": "Determine if the parser has begun parsing executable code.",
            "params": [
                {
                    "name": "funct",
                    "description": "- The current \"functor\" token",
                    "type": "Token"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/jshint.ts",
            "line": 3020,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "name",
                            "description": "The identifier belonging to the function (if\n                              any)",
                            "type": "Token",
                            "optional": true
                        },
                        {
                            "name": "statement",
                            "description": "The statement that triggered creation\n                                     of the current function.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "description": "If specified, either \"generator\" or \"arrow\"",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "loneArg",
                            "description": "The argument to the function in cases\n                                 where it was defined using the\n                                 single-argument shorthand",
                            "type": "Token",
                            "optional": true
                        },
                        {
                            "name": "parsedOpening",
                            "description": "Whether the opening parenthesis has\n                                      already been parsed",
                            "type": "Bool",
                            "optional": true
                        },
                        {
                            "name": "classExprBinding",
                            "description": "Define a function with this\n                                          identifier in the new function's\n                                          scope, mimicking the bahavior of\n                                          class expression names within\n                                          the body of member functions.",
                            "type": "Token",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/jshint.ts",
            "line": 3210,
            "params": [
                {
                    "name": "props",
                    "description": "Collection of property descriptors for a given\n                      object.",
                    "type": "Object"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/jshint.ts",
            "line": 4839,
            "params": [
                {
                    "name": "accessorType",
                    "description": "- Either \"get\" or \"set\"",
                    "type": "String"
                },
                {
                    "name": "props",
                    "description": "- a collection of all properties of the object to\n                        which the current accessor is being assigned",
                    "type": "Object"
                },
                {
                    "name": "tkn",
                    "description": "- the identifier token representing the accessor name",
                    "type": "Object"
                },
                {
                    "name": "isClass",
                    "description": "- whether the accessor is part of an ES6 Class\n                           definition",
                    "type": "Boolean"
                },
                {
                    "name": "isStatic",
                    "description": "- whether the accessor is a static method",
                    "type": "Boolean"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/jshint.ts",
            "line": 4885,
            "description": "Test whether a given token is a punctuator matching one of the specified values",
            "params": [
                {
                    "name": "token",
                    "description": "",
                    "type": "Token"
                },
                {
                    "name": "values",
                    "description": "",
                    "type": "Array.<string>"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/jshint.ts",
            "line": 4898,
            "description": "Test whether a given token is a punctuator matching the specified value",
            "params": [
                {
                    "name": "token",
                    "description": "",
                    "type": "Token"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/name-stack.ts",
            "line": 13,
            "description": "Create a new entry in the stack. Useful for tracking names across\nexpressions.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/name-stack.ts",
            "line": 21,
            "description": "Discard the most recently-created name on the stack.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/name-stack.ts",
            "line": 28,
            "description": "Update the most recent name on the top of the stack.",
            "params": [
                {
                    "name": "token",
                    "description": "The token to consider as the source for the most\n                      recent name.",
                    "type": "Object"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/name-stack.ts",
            "line": 38,
            "description": "Generate a string representation of the most recent name.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 7,
            "description": "This option prohibits the use of bitwise operators such as `^` (XOR),\n`|` (OR) and others. Bitwise operators are very rare in JavaScript\nprograms and quite often `&` is simply a mistyped `&&`.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 14,
            "description": "This options prohibits overwriting prototypes of native objects such as\n `Array`, `Date` and so on.\n    // jshint freeze:true\n     Array.prototype.count = function (value) { return 4; };\n     // -> Warning: Extending prototype of native object: 'Array'.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 25,
            "description": "This option allows you to force all variable names to use either\ncamelCase style or UPPER_CASE with underscores.",
            "deprecated": true,
            "deprecationMessage": "JSHint is limiting its scope to issues of code correctness.\n            If you would like to enforce rules relating to code style,\n            check out [the JSCS\n            project](https://github.com/jscs-dev/node-jscs).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 36,
            "description": "This option requires you to always put curly braces around blocks in\nloops and conditionals. JavaScript allows you to omit curly braces when\nthe block consists of only one statement, for example:\n\n    while (day)\n      shuffle();\n\nHowever, in some circumstances, it can lead to bugs (you'd think that\n`sleep()` is a part of the loop while in reality it is not):\n\n    while (day)\n      shuffle();\n      sleep();",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 53,
            "description": "This options prohibits the use of `==` and `!=` in favor of `===` and\n`!==`. The former try to coerce values before comparing them which can\nlead to some unexpected results. The latter don't do any coercion so\nthey are generally safer. If you would like to learn more about type\ncoercion in JavaScript, we recommend [Truth, Equality and\nJavaScript](http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/)\nby Angus Croll.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 64,
            "description": "This option enables warnings about the use of identifiers which are\ndefined in future versions of JavaScript. Although overwriting them has\nno effect in contexts where they are not implemented, this practice can\ncause issues when migrating codebases to newer versions of the language.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 72,
            "description": "This option suppresses warnings about invalid `typeof` operator values.\nThis operator has only [a limited set of possible return\nvalues](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof).\nBy default, JSHint warns when you compare its result with an invalid\nvalue which often can be a typo.\n\n    // 'fuction' instead of 'function'\n    if (typeof a == \"fuction\") { // Invalid typeof value 'fuction'\n      // ...\n    }\n\nDo not use this option unless you're absolutely sure you don't want\nthese checks.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 89,
            "description": "This option tells JSHint that your code needs to adhere to ECMAScript 3\nspecification. Use this option if you need your program to be executable\nin older browsers—such as Internet Explorer 6/7/8/9—and other legacy\nJavaScript environments.",
            "deprecated": true,
            "deprecationMessage": "Use `esversion: 3` instead.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 99,
            "description": "This option enables syntax first defined in [the ECMAScript 5.1\nspecification](http://es5.github.io/). This includes allowing reserved\nkeywords as object properties.",
            "deprecated": true,
            "deprecationMessage": "Use `esversion: 5` instead.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 108,
            "description": "This option requires all `for in` loops to filter object's items. The\nfor in statement allows for looping through the names of all of the\nproperties of an object including those inherited through the prototype\nchain. This behavior can lead to unexpected items in your object so it\nis generally safer to always filter inherited properties out as shown in\nthe example:\n\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        // We are sure that obj[key] belongs to the object and was not inherited.\n      }\n    }\n\nFor more in-depth understanding of `for in` loops in JavaScript, read\n[Exploring JavaScript for-in\nloops](http://javascriptweblog.wordpress.com/2011/01/04/exploring-javascript-for-in-loops/)\nby Angus Croll.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 129,
            "description": "This option suppresses warnings about declaring variables inside of\ncontrol\nstructures while accessing them later from the outside. Even though\nJavaScript has only two real scopes—global and function—such practice\nleads to confusion among people new to the language and hard-to-debug\nbugs. This is why, by default, JSHint warns about variables that are\nused outside of their intended scope.\n\n    function test() {\n      if (true) {\n        var x = 0;\n      }\n\n      x += 1; // Default: 'x' used out of scope.\n                // No warning when funcscope:true\n    }",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 149,
            "description": "This option prohibits the use of immediate function invocations without\nwrapping them in parentheses. Wrapping parentheses assists readers of\nyour code in understanding that the expression is the result of a\nfunction, and not the function itself.",
            "deprecated": true,
            "deprecationMessage": "JSHint is limiting its scope to issues of code correctness.\n            If you would like to enforce rules relating to code style,\n            check out [the JSCS\n            project](https://github.com/jscs-dev/node-jscs).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 162,
            "description": "This option suppresses warnings about the `__iterator__` property. This\nproperty is not supported by all browsers so use it carefully.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 168,
            "description": "This option requires you to capitalize names of constructor functions.\nCapitalizing functions that are intended to be used with `new` operator\nis just a convention that helps programmers to visually distinguish\nconstructor functions from other types of functions to help spot\nmistakes when using `this`.\n\nNot doing so won't break your code in any browsers or environments but\nit will be a bit harder to figure out—by reading the code—if the\nfunction was supposed to be used with or without new. And this is\nimportant because when the function that was intended to be used with\n`new` is used without it, `this` will point to the global object instead\nof a new object.",
            "deprecated": true,
            "deprecationMessage": "JSHint is limiting its scope to issues of code correctness.\n            If you would like to enforce rules relating to code style,\n            check out [the JSCS\n            project](https://github.com/jscs-dev/node-jscs).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 189,
            "description": "This option prohibits the use of `arguments.caller` and\n`arguments.callee`.  Both `.caller` and `.callee` make quite a few\noptimizations impossible so they were deprecated in future versions of\nJavaScript. In fact, ECMAScript 5 forbids the use of `arguments.callee`\nin strict mode.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 198,
            "description": "This option prohibits the use of the comma operator. When misused, the\ncomma operator can obscure the value of a statement and promote\nincorrect code.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 205,
            "description": "This option warns when you have an empty block in your code. JSLint was\noriginally warning for all empty blocks and we simply made it optional.\nThere were no studies reporting that empty blocks in JavaScript break\nyour code in any way.",
            "deprecated": true,
            "deprecationMessage": "JSHint is limiting its scope to issues of code correctness.\n            If you would like to enforce rules relating to code style,\n            check out [the JSCS\n            project](https://github.com/jscs-dev/node-jscs).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 218,
            "description": "This option warns about \"non-breaking whitespace\" characters. These\ncharacters can be entered with option-space on Mac computers and have a\npotential of breaking non-UTF8 web pages.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 225,
            "description": "This option prohibits the use of constructor functions for side-effects.\nSome people like to call constructor functions without assigning its\nresult to any variable:\n\n    new MyConstructor();\n\nThere is no advantage in this approach over simply calling\n`MyConstructor` since the object that the operator `new` creates isn't\nused anywhere so you should generally avoid constructors like this one.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 238,
            "description": "This option prohibits the use of explicitly undeclared variables. This\noption is very useful for spotting leaking and mistyped variables.\n\n    // jshint undef:true\n\n    function test() {\n      var myVar = 'Hello, World';\n      console.log(myvar); // Oops, typoed here. JSHint with undef will complain\n    }\n\nIf your variable is defined in another file, you can use the `global`\ndirective to tell JSHint about it.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 254,
            "description": "This option prohibits the use of the grouping operator when it is not\nstrictly required. Such usage commonly reflects a misunderstanding of\nunary operators, for example:\n\n    // jshint singleGroups: true\n\n    delete(obj.attr); // Warning: Unnecessary grouping operator.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 265,
            "description": "When set to true, the use of VariableStatements are forbidden.\nFor example:\n\n    // jshint varstmt: true\n\n    var a; // Warning: `var` declarations are forbidden. Use `let` or `const` instead.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 275,
            "description": "This option is a short hand for the most strict JSHint configuration as\navailable in JSHint version 2.6.3. It enables all enforcing options and\ndisables all relaxing options that were defined in that release.",
            "deprecated": true,
            "deprecationMessage": "The option cannot be maintained without automatically opting\n            users in to new features. This can lead to unexpected\n            warnings/errors in when upgrading between minor versions of\n            JSHint.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 289,
            "description": "This option suppresses warnings about missing semicolons. There is a lot\nof FUD about semicolon spread by quite a few people in the community.\nThe common myths are that semicolons are required all the time (they are\nnot) and that they are unreliable. JavaScript has rules about semicolons\nwhich are followed by *all* browsers so it is up to you to decide\nwhether you should or should not use semicolons in your code.\n\nFor more information about semicolons in JavaScript read [An Open Letter\nto JavaScript Leaders Regarding\nSemicolons](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding)\nby Isaac Schlueter and [JavaScript Semicolon\nInsertion](http://inimino.org/~inimino/blog/javascript_semicolons).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 305,
            "description": "This option suppresses warnings about multi-line strings. Multi-line\nstrings can be dangerous in JavaScript because all hell breaks loose if\nyou accidentally put a whitespace in between the escape character (`\\`)\nand a new line.\n\nNote that even though this option allows correct multi-line strings, it\nstill warns about multi-line strings without escape characters or with\nanything in between the escape character and a whitespace.\n\n    // jshint multistr:true\n\n    var text = \"Hello\\\n    World\"; // All good.\n\n    text = \"Hello\n    World\"; // Warning, no escape character.\n\n    text = \"Hello\\\n    World\"; // Warning, there is a space after \\",
            "deprecated": true,
            "deprecationMessage": "JSHint is limiting its scope to issues of code correctness.\n            If you would like to enforce rules relating to code style,\n            check out [the JSCS\n            project](https://github.com/jscs-dev/node-jscs).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 333,
            "description": "This option suppresses warnings about the `debugger` statements in your\ncode.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 339,
            "description": "This option suppresses warnings about the use of assignments in cases\nwhere comparisons are expected. More often than not, code like `if (a =\n10) {}` is a typo. However, it can be useful in cases like this one:\n\n    for (var i = 0, person; person = people[i]; i++) {}\n\nYou can silence this error on a per-use basis by surrounding the assignment\nwith parenthesis, such as:\n\n    for (var i = 0, person; (person = people[i]); i++) {}",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 353,
            "description": "This option suppresses warnings about the use of `eval`. The use of\n`eval` is discouraged because it can make your code vulnerable to\nvarious injection attacks and it makes it hard for JavaScript\ninterpreter to do certain optimizations.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 361,
            "description": "This option suppresses warnings about the use of global strict mode.\nGlobal strict mode can break third-party widgets so it is not\nrecommended.\n\nFor more info about strict mode see the `strict` option.",
            "deprecated": true,
            "deprecationMessage": "Use `strict: \"global\"`.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 372,
            "description": "This option prohibits the use of unary increment and decrement\noperators.  Some people think that `++` and `--` reduces the quality of\ntheir coding styles and there are programming languages—such as\nPython—that go completely without these operators.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 380,
            "description": "This option suppresses warnings about the `__proto__` property.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 385,
            "description": "This option suppresses warnings about the use of script-targeted\nURLs—such as `javascript:...`.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 391,
            "description": "This option suppresses warnings about using `[]` notation when it can be\nexpressed in dot notation: `person['name']` vs. `person.name`.",
            "deprecated": true,
            "deprecationMessage": "JSHint is limiting its scope to issues of code correctness.\n            If you would like to enforce rules relating to code style,\n            check out [the JSCS\n            project](https://github.com/jscs-dev/node-jscs).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 402,
            "description": "This option suppresses warnings about \"weird\" constructions like\n`new function () { ... }` and `new Object;`. Such constructions are\nsometimes used to produce singletons in JavaScript:\n\n    var singleton = new function() {\n      var privateVar;\n\n      this.publicMethod  = function () {}\n      this.publicMethod2 = function () {}\n    };",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 416,
            "description": "This option suppresses most of the warnings about possibly unsafe line\nbreakings in your code. It doesn't suppress warnings about comma-first\ncoding style. To suppress those you have to use `laxcomma` (see below).",
            "deprecated": true,
            "deprecationMessage": "JSHint is limiting its scope to issues of code correctness.\n            If you would like to enforce rules relating to code style,\n            check out [the JSCS\n            project](https://github.com/jscs-dev/node-jscs).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 428,
            "description": "This option suppresses warnings about comma-first coding style:\n\n    var obj = {\n        name: 'Anton'\n      , handle: 'valueof'\n      , role: 'SW Engineer'\n    };",
            "deprecated": true,
            "deprecationMessage": "JSHint is limiting its scope to issues of code correctness.\n            If you would like to enforce rules relating to code style,\n            check out [the JSCS\n            project](https://github.com/jscs-dev/node-jscs).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 444,
            "description": "This option suppresses warnings about possible strict violations when\nthe code is running in strict mode and you use `this` in a\nnon-constructor function. You should use this option—in a function scope\nonly—when you are positive that your use of `this` is valid in the\nstrict mode (for example, if you call your function using\n`Function.call`).\n\n**Note:** This option can be used only inside of a function scope.\nJSHint will fail with an error if you will try to set this option\nglobally.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 458,
            "description": "This option suppresses warnings about the use of the `with` statement.\nThe semantics of the `with` statement can cause confusion among\ndevelopers and accidental definition of global variables.\n\nMore info:\n\n* [with Statement Considered\n  Harmful](http://yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/)",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 470,
            "description": "This options tells JSHint that your code uses Mozilla JavaScript\nextensions. Unless you develop specifically for the Firefox web browser\nyou don't need this option.\n\nMore info:\n\n* [New in JavaScript\n  1.7](https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7)",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 482,
            "description": "This option suppresses warnings about generator functions with no\n`yield` statement in them.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 488,
            "description": "This option suppresses warnings about `== null` comparisons. Such\ncomparisons are often useful when you want to check if a variable is\n`null` or `undefined`.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 495,
            "description": "This option suppresses warnings about missing semicolons, but only when\nthe semicolon is omitted for the last statement in a one-line block:\n\n    var name = (function() { return 'Anton' }());\n\nThis is a very niche use case that is useful only when you use automatic\nJavaScript code generators.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 506,
            "description": "This option suppresses warnings about functions inside of loops.\nDefining functions inside of loops can lead to bugs such as this one:\n\n    var nums = [];\n\n    for (var i = 0; i < 10; i++) {\n      nums[i] = function (j) {\n        return i + j;\n      };\n    }\n\n    nums[0](2); // Prints 12 instead of 2\n\nTo fix the code above you need to copy the value of `i`:\n\n    var nums = [];\n\n    for (var i = 0; i < 10; i++) {\n      (function (i) {\n        nums[i] = function (j) {\n            return i + j;\n        };\n      }(i));\n    }",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 534,
            "description": "This option suppresses warnings about the use of expressions where\nnormally you would expect to see assignments or function calls. Most of\nthe time, such code is a typo. However, it is not forbidden by the spec\nand that's why this warning is optional.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 542,
            "description": "This option tells JSHint that your code uses ECMAScript 6 specific\nsyntax. Note that not all browsers implement these features.\n\nMore info:\n\n* [Specification for ECMAScript\n  6](http://www.ecma-international.org/ecma-262/6.0/index.html)",
            "deprecated": true,
            "deprecationMessage": "Use `esversion: 6` instead.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 555,
            "description": "This option tells JSHint that your code uses ES3 array elision elements,\nor empty elements (for example, `[1, , , 4, , , 7]`).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 565,
            "description": "This option defines globals exposed by the\n[MooTools](http://mootools.net/) JavaScript framework.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 571,
            "description": "This option defines globals exposed by\n[CouchDB](http://couchdb.apache.org/). CouchDB is a document-oriented\ndatabase that can be queried and indexed in a MapReduce fashion using\nJavaScript.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 579,
            "description": "This option defines globals exposed by [the Jasmine unit testing\nframework](https://jasmine.github.io/).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 585,
            "description": "This option defines globals exposed by the [jQuery](http://jquery.com/)\nJavaScript library.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 591,
            "description": "This option defines globals available when your code is running inside\nof the Node runtime environment. [Node.js](http://nodejs.org/) is a\nserver-side JavaScript environment that uses an asynchronous\nevent-driven model. This option also skips some warnings that make sense\nin the browser environments but don't make sense in Node such as\nfile-level `use strict` pragmas and `console.log` statements.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 601,
            "description": "This option defines globals exposed by [the QUnit unit testing\nframework](http://qunitjs.com/).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 607,
            "description": "This option defines globals available when your code is running inside\nof the Rhino runtime environment. [Rhino](http://www.mozilla.org/rhino/)\nis an open-source implementation of JavaScript written entirely in Java.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 614,
            "description": "This option defines globals exposed by [the ShellJS\nlibrary](http://documentup.com/arturadib/shelljs).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 620,
            "description": "This option defines globals exposed by the\n[Prototype](http://www.prototypejs.org/) JavaScript framework.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 626,
            "description": "This option defines globals exposed by the [YUI](http://yuilibrary.com/)\nJavaScript framework.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 632,
            "description": "This option defines globals exposed by the \"BDD\" and \"TDD\" UIs of the\n[Mocha unit testing framework](http://mochajs.org/).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 638,
            "description": "This option informs JSHint that the input code describes an ECMAScript 6\nmodule. All module code is interpreted as strict mode code.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 644,
            "description": "This option defines globals available when your code is running as a\nscript for the [Windows Script\nHost](http://en.wikipedia.org/wiki/Windows_Script_Host).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 651,
            "description": "This option defines globals available when your code is running inside\nof a Web Worker. [Web\nWorkers](https://developer.mozilla.org/en/Using_web_workers) provide a\nsimple means for web content to run scripts in background threads.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 659,
            "description": "This option defines non-standard but widely adopted globals such as\n`escape` and `unescape`.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 665,
            "description": "This option defines globals exposed by modern browsers: all the way from\ngood old `document` and `navigator` to the HTML5 `FileReader` and other\nnew developments in the browser world.\n\n**Note:** This option doesn't expose variables like `alert` or\n`console`. See option `devel` for more information.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 675,
            "description": "This option defines globals available when using [the Browserify\ntool](http://browserify.org/) to build a project.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 681,
            "description": "This option defines globals that are usually used for logging poor-man's\ndebugging: `console`, `alert`, etc. It is usually a good idea to not\nship them in production because, for example, `console.log` breaks in\nlegacy versions of Internet Explorer.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 689,
            "description": "This option defines globals exposed by the [Dojo\nToolkit](http://dojotoolkit.org/).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 695,
            "description": "This option defines globals for typed array constructors.\n\nMore info:\n\n* [JavaScript typed\n  arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays)",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 705,
            "description": "This option defines globals available when your core is running inside\nof the PhantomJS runtime environment. [PhantomJS](http://phantomjs.org/)\nis a headless WebKit scriptable with a JavaScript API. It has fast and\nnative support for various web standards: DOM handling, CSS selector,\nJSON, Canvas, and SVG.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 728,
            "description": "This option lets you set the maximum length of a line.",
            "deprecated": true,
            "deprecationMessage": "JSHint is limiting its scope to issues of code correctness. If\n            you would like to enforce rules relating to code style, check\n            out [the JSCS project](https://github.com/jscs-dev/node-jscs).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 737,
            "description": "This option sets a specific tab width for your code.",
            "deprecated": true,
            "deprecationMessage": "JSHint is limiting its scope to issues of code correctness. If\n            you would like to enforce rules relating to code style, check\n            out [the JSCS project](https://github.com/jscs-dev/node-jscs).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 746,
            "description": "This options allows you to set the maximum amount of warnings JSHint will\nproduce before giving up. Default is 50.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 752,
            "description": "This option allows you to control which variables JSHint considers to be\nimplicitly defined in the environment. Configure it with an array of\nstring values. Prefixing a variable name with a hyphen (-) character will\nremove that name from the collection of predefined variables.\n\nJSHint will consider variables declared in this way to be read-only.\n\nThis option cannot be specified in-line; it may only be used via the\nJavaScript API or from an external configuration file.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 765,
            "description": "This option can be used to specify a white list of global variables that\nare not formally defined in the source code. This is most useful when\ncombined with the `undef` option in order to suppress warnings for\nproject-specific global variables.\n\nSetting an entry to `true` enables reading and writing to that variable.\nSetting it to `false` will trigger JSHint to consider that variable\nread-only.\n\nSee also the \"environment\" options: a set of options to be used as short\nhand for enabling global variables defined in common JavaScript\nenvironments.\n\nTo configure `globals` within an individual file, see [Inline\nConfiguration](http://jshint.com/docs/#inline-configuration).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 784,
            "description": "This option enforces the consistency of quotation marks used throughout\nyour code. It accepts three values: `true` if you don't want to enforce\none particular style but want some consistency, `\"single\"` if you want to\nallow only single quotes and `\"double\"` if you want to allow only double\nquotes.",
            "deprecated": true,
            "deprecationMessage": "JSHint is limiting its scope to issues of code correctness. If\n            you would like to enforce rules relating to code style, check\n            out [the JSCS project](https://github.com/jscs-dev/node-jscs).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 799,
            "description": "This option lets you set the max number of statements allowed per function:\n\n    // jshint maxstatements:4\n\n    function main() {\n      var i = 0;\n      var j = 0;\n\n      // Function declarations count as one statement. Their bodies\n      // don't get taken into account for the outer function.\n      function inner() {\n        var i2 = 1;\n        var j2 = 1;\n\n        return i2 + j2;\n      }\n\n      j = i + j;\n      return j; // JSHint: Too many statements per function. (5)\n    }",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 823,
            "description": "This option lets you control how nested do you want your blocks to be:\n\n    // jshint maxdepth:2\n\n    function main(meaning) {\n      var day = true;\n\n      if (meaning === 42) {\n        while (day) {\n          shuffle();\n\n          if (tired) { // JSHint: Blocks are nested too deeply (3).\n              sleep();\n          }\n        }\n      }\n    }",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 844,
            "description": "This option lets you set the max number of formal parameters allowed per\nfunction:\n\n    // jshint maxparams:3\n\n    function login(request, onSuccess) {\n      // ...\n    }\n\n    // JSHint: Too many parameters per function (4).\n    function logout(request, isManual, whereAmI, onSuccess) {\n      // ...\n    }",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 861,
            "description": "This option lets you control cyclomatic complexity throughout your code.\nCyclomatic complexity measures the number of linearly independent paths\nthrough a program's source code. Read more about [cyclomatic complexity on\nWikipedia](http://en.wikipedia.org/wiki/Cyclomatic_complexity).",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 869,
            "description": "This option suppresses warnings about variable shadowing i.e. declaring a\nvariable that had been already declared somewhere in the outer scope.\n\n- \"inner\"  - check for variables defined in the same scope only\n- \"outer\"  - check for variables defined in outer scopes as well\n- false    - same as inner\n- true     - allow variable shadowing",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 880,
            "description": "This option requires the code to run in ECMAScript 5's strict mode.\n[Strict mode](https://developer.mozilla.org/en/JavaScript/Strict_mode)\nis a way to opt in to a restricted variant of JavaScript. Strict mode\neliminates some JavaScript pitfalls that didn't cause errors by changing\nthem to produce errors.  It also fixes mistakes that made it difficult\nfor the JavaScript engines to perform certain optimizations.\n\n- \"func\"    - there must be a `\"use strict\";` directive at function level\n- \"global\"  - there must be a `\"use strict\";` directive at global level\n- \"implied\" - lint the code as if there is the `\"use strict\";` directive\n- false     - disable warnings about strict mode\n- true      - same as `\"func\"`, but environment options have precedence over\n              this (e.g. `node`, `module`, `browserify` and `phantomjs` can\n              set `strict: global`)",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 898,
            "description": "This option warns when you define and never use your variables. It is very\nuseful for general code cleanup, especially when used in addition to\n`undef`.\n\n    // jshint unused:true\n\n    function test(a, b) {\n      var c, d = 2;\n\n      return a + d;\n    }\n\n    test(1, 2);\n\n    // Line 3: 'b' was defined but never used.\n    // Line 4: 'c' was defined but never used.\n\nIn addition to that, this option will warn you about unused global\nvariables declared via the `global` directive.\n\nThis can be set to `vars` to only check for variables, not function\nparameters, or `strict` to check all variables and parameters.  The\ndefault (true) behavior is to allow unused parameters that are followed by\na used parameter.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 926,
            "description": "This option prohibits the use of a variable before it was defined.\nJavaScript has function scope only and, in addition to that, all variables\nare always moved—or hoisted— to the top of the function. This behavior can\nlead to some very nasty bugs and that's why it is safer to always use\nvariable only after they have been explicitly defined.\n\nSetting this option to \"nofunc\" will allow function declarations to be\nignored.\n\nFor more in-depth understanding of scoping and hoisting in JavaScript,\nread [JavaScript Scoping and\nHoisting](http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting)\nby Ben Cherry.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/options.ts",
            "line": 952,
            "description": "This option is used to specify the ECMAScript version to which the code\nmust adhere. It can assume one of the following values:\n - `3` - If you need your program to be executable\n   in older browsers—such as Internet Explorer 6/7/8/9—and other legacy\n   JavaScript environments\n - `5` - To enable syntax first defined in [the ECMAScript 5.1\n   specification](http://www.ecma-international.org/ecma-262/5.1/index.html).\n   This includes allowing reserved keywords as object properties.\n - `6` - To tell JSHint that your code uses [ECMAScript\n   6](http://www.ecma-international.org/ecma-262/6.0/index.html) specific\n   syntax. Note that not all browsers implement them.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 28,
            "description": "Creates a scope manager that handles variables and labels, storing usages\nand resolving when variables are used and undefined",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 126,
            "description": "Checks the current scope for unused identifiers",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 147,
            "description": "Checks the current scope for unused parameters\nMust be called in a function parameter scope",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 181,
            "description": "Finds the relevant label's scope, searching from nearest outwards",
            "return": {
                "description": "the scope the label was found in",
                "type": "Object"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 257,
            "description": "Tell the manager we are entering a new block of code",
            "params": [
                {
                    "name": "type",
                    "description": "- The type of the block. Valid values are\n                         \"functionparams\", \"catchparams\" and\n                         \"functionouter\"",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 461,
            "description": "Add a param to the current scope",
            "params": [
                {
                    "name": "labelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "token",
                    "description": "",
                    "type": "Token"
                },
                {
                    "name": "type",
                    "description": "param type",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"param\""
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 552,
            "description": "Gets an array of implied globals",
            "return": {
                "description": ">}",
                "type": "Array.<{ name: string, line: Array.<number>"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 577,
            "description": "Returns a list of unused variables",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 598,
            "description": "for the exported options, indicating a variable is used outside the file",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 626,
            "description": "Mark an indentifier as es6 module exported",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 633,
            "description": "adds an indentifier to the relevant current scope and creates warnings/errors as necessary",
            "params": [
                {
                    "name": "labelName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "type",
                            "description": "- the type of the label e.g. \"param\", \"var\", \"let, \"const\", \"function\"",
                            "type": "String"
                        },
                        {
                            "name": "token",
                            "description": "- the token pointing at the declaration",
                            "type": "Token"
                        }
                    ]
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 722,
            "description": "Returns the label type given certain options",
            "params": [
                {
                    "name": "labelName",
                    "description": ""
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object=",
                    "props": [
                        {
                            "name": "onlyBlockscoped",
                            "description": "- only include block scoped labels",
                            "type": "Boolean="
                        },
                        {
                            "name": "excludeParams",
                            "description": "- exclude the param scope",
                            "type": "Boolean="
                        },
                        {
                            "name": "excludeCurrent",
                            "description": "- exclude the current scope",
                            "type": "Boolean="
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 748,
            "description": "Returns if a break label exists in the function scope",
            "params": [
                {
                    "name": "labelName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 766,
            "description": "Returns if the label is in the current function scope\nSee scopeManager.funct.labelType for options",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 774,
            "description": "Adds a new function scoped variable\nsee block.add for block scoped",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 791,
            "description": "is the current block global?",
            "return": {
                "description": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/scope-manager.ts",
            "line": 844,
            "description": "Adds a new variable",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/state.ts",
            "line": 36,
            "description": "Determine if the code currently being linted is strict mode code.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/state.ts",
            "line": 50,
            "params": [
                {
                    "name": "strict",
                    "description": "- When `true`, only consider ES6 when in\n                          \"esversion: 6\" code.",
                    "type": "Boolean"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/javascript/state.ts",
            "line": 61,
            "params": [
                {
                    "name": "strict",
                    "description": "- When `true`, return `true` only when\n                          esversion is exactly 5",
                    "type": "Boolean"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Parser.ts",
            "line": 9,
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fileName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "begin",
                    "description": "",
                    "type": "Array.<number>="
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array.<number>="
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Parser.ts",
            "line": 26,
            "description": "Finds the specified",
            "params": [
                {
                    "name": "a",
                    "description": "An array of arrays where each element is an array of two integers."
                },
                {
                    "name": "obj",
                    "description": "An array containing two integers."
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Parser.ts",
            "line": 87,
            "description": "Add a token; return true if we're done",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Parser.ts",
            "line": 154,
            "description": "turn a token into a label",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Parser.ts",
            "line": 173,
            "description": "shift a token",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Parser.ts",
            "line": 187,
            "description": "push a nonterminal",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Parser.ts",
            "line": 201,
            "description": "pop a nonterminal",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Parser.ts",
            "line": 220,
            "description": "parser for interactive input. returns a function that should be called with\nlines of input as they are entered. the function will return false\nuntil the input is complete, when it will return the rootnode of the parse.",
            "params": [
                {
                    "name": "fileName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "root of parse tree (optional)",
                    "type": "String="
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Parser.ts",
            "line": 284,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Parser.ts",
            "line": 298,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Tokenizer.ts",
            "line": 6,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Tokenizer.ts",
            "line": 13,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Tokenizer.ts",
            "line": 16,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Tokenizer.ts",
            "line": 128,
            "description": "This is a port of tokenize.py by Ka-Ping Yee.\n\neach call to readline should return one line of input as a string, or\nundefined if it's finished.\n\ncallback is called for each token with 5 args:\n1. the token type\n2. the token string\n3. [ start_row, start_col ]\n4. [ end_row, end_col ]\n5. logical line where the token was found, including continuation lines\n\ncallback can return true to abort.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Tokenizer.ts",
            "line": 183,
            "description": "Symbolic (numeric) constants for tokens.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/Tokenizer.ts",
            "line": 247,
            "description": "Map from token symbolic (numeric) constant to (string) name.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/base.ts",
            "line": 1,
            "description": "This is a \"fixed\" version of the typeof operator.  It differs from the typeof\noperator in such a way that null returns 'null' and arrays return 'array'.",
            "params": [
                {
                    "name": "value",
                    "description": "The value to get the type of.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The name of the type.",
                "type": "String"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/base.ts",
            "line": 26,
            "description": "// In Firefox 3.6, attempting to access iframe window objects' length\n// property throws an NS_ERROR_FAILURE, so we need to special-case it\n// here.\nif (className == '[object Window]') {\n  return 'object';\n}\n\n// We cannot always use constructor == Array or instanceof Array because\n// different frames have different Array objects. In IE6, if the iframe\n// where the array was created is destroyed, the array loses its\n// prototype. Then dereferencing val.splice here throws an exception, so\n// we can't use base.isFunction. Calling typeof directly returns 'unknown'\n// so that will work. In this case, this function will return false and\n// most array functions will still work because the array is still\n// array-like (supports length and []) even though it has lost its\n// prototype.\n// Mark Miller noticed that Object.prototype.toString\n// allows access to the unforgeable [[Class]] property.\n//  15.2.4.2 Object.prototype.toString ( )\n//  When the toString method is called, the following steps are taken:\n//      1. Get the [[Class]] property of this object.\n//      2. Compute a string value by concatenating the three strings\n//         \"[object \", Result(1), and \"]\".\n//      3. Return Result(2).\n// and this behavior survives the destruction of the execution context.\nif ((className == '[object Array]' ||\n     // In IE all non value types are wrapped as objects across window\n     // boundaries (not iframe though) so we have to do object detection\n     // for this edge case.\n     typeof value.length == 'number' &&\n     typeof value.splice != 'undefined' &&\n     typeof value.propertyIsEnumerable != 'undefined' &&\n     !value.propertyIsEnumerable('splice')\n\n    )) {\n  return 'array';\n}\n// HACK: There is still an array case that fails.\n//     function ArrayImpostor() {}\n//     ArrayImpostor.prototype = [];\n//     var impostor = new ArrayImpostor;\n// this can be fixed by getting rid of the fast path\n// (value instanceof Array) and solely relying on\n// (value && Object.prototype.toString.vall(value) === '[object Array]')\n// but that would require many more function calls and is not warranted\n// unless closure code is receiving objects from untrusted sources.\n\n// IE in cross-window calls does not correctly marshal the function type\n// (it appears just as an object) so we cannot use just typeof val ==\n// 'function'. However, if the object has a call property, it is a\n// function.\nif ((className == '[object Function]' ||\n    typeof value.call != 'undefined' &&\n    typeof value.propertyIsEnumerable != 'undefined' &&\n    !value.propertyIsEnumerable('call'))) {\n  return 'function';\n}\n\n    } else {\nreturn 'null';\n    }\n\n  } else if (s == 'function' && typeof value.call == 'undefined') {\n    // In Safari typeof nodeList returns 'function', and on Firefox typeof\n    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We\n    // would like to return object for those and we can detect an invalid\n    // function by making sure that the function object has a call method.\n    return 'object';\n  }\n  return s;\n};\n\n/**\n * Returns true if the specified value is a number.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is a number.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/base.ts",
            "line": 109,
            "description": "Returns true if the specified value is a string.",
            "params": [
                {
                    "name": "val",
                    "description": "Variable to test.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Whether variable is a string.",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/base.ts",
            "line": 119,
            "description": "Returns true if the specified value is not undefined.\nWARNING: Do not use this to test if an object has a property. Use the in\noperator instead.  Additionally, this function assumes that the global\nundefined variable has not been redefined.",
            "params": [
                {
                    "name": "val",
                    "description": "Variable to test.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Whether variable is defined.",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/base.ts",
            "line": 132,
            "description": "Returns true if the object looks like an array. To qualify as array like\nthe value needs to be either a NodeList or an object with a Number length\nproperty.",
            "params": [
                {
                    "name": "val",
                    "description": "Variable to test.",
                    "type": "*"
                }
            ],
            "return": {
                "description": "Whether variable is an array.",
                "type": "Boolean"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/builder.ts",
            "line": 21,
            "itemtype": "property",
            "name": "",
            "final": "",
            "type": "{number}",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/builder.ts",
            "line": 27,
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fileName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "lineNumber",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/builder.ts",
            "line": 51,
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/builder.ts",
            "line": 76,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/builder.ts",
            "line": 118,
            "description": "Set the context ctx for e, recursively traversing e.\n\nOnly sets context for expr kinds that can appear in assignment context as\nper the asdl file.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/builder.ts",
            "line": 1302,
            "description": "s is a python-style string literal, including quote characters and u/r/b\nprefixes. Returns decoded string object.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/builder.ts",
            "line": 1382,
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/builder.ts",
            "line": 1764,
            "description": "TODO: We're not generating _astname, _isenum, _fields anymore.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 15,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 125,
            "params": [
                {
                    "name": "priv",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The mangled name.",
                "type": "String"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 203,
            "description": "Stack of where to go on a break.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 207,
            "description": "Stack of where to go on a continue.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 215,
            "is_constructor": 1,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 248,
            "is_constructor": 1,
            "params": [
                {
                    "name": "fileName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "st",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "flags",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "sourceCodeForAnnotation",
                    "description": "used to add original source to listing if desired",
                    "type": "String="
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 257,
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 273,
            "description": "Emit the JavaScript code that comments and reports the original Python code position.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 307,
            "params": [
                {
                    "name": "hint",
                    "description": "basename for gensym",
                    "type": "String"
                },
                {
                    "name": "rest",
                    "description": "",
                    "type": "...*"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 321,
            "description": "Function to test if an interrupt should occur if the program has been running for too long.\nThis function is executed at every test/branch operation.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 555,
            "description": "compiles an expression. to 'return' something, it'll gensym a var and store\n into that var so that the calling code doesn't have avoid just pasting the\n returned name.",
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "data",
                    "description": "data to store in a store operation",
                    "type": "String="
                },
                {
                    "name": "augstoreval",
                    "description": "value to store to for an aug operation (not\n vexpr'd yet)",
                    "type": "Object="
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 675,
            "params": [
                {
                    "name": "exprs",
                    "description": "",
                    "type": "Array.<Object>"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Array.<string>="
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 680,
            "itemtype": "property",
            "name": "",
            "final": "",
            "type": "{boolean}",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 725,
            "description": "optimize some constant exprs. returns 0 if always 0, 1 if always 1 or -1 otherwise.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 1063,
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "asname",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "mod",
                    "description": "",
                    "type": "String="
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 1133,
            "description": "builds a code object (js function) for various constructs. used by def,\nlambda, generator expressions. it isn't used for class because it seemed\ndifferent enough.\n\nhandles:\n- setting up a new scope\n- decorators (if any)\n- defaults setup\n- setup for cell and free vars\n- setup and modification for generators",
            "params": [
                {
                    "name": "n",
                    "description": "ast node to build for",
                    "type": "Object"
                },
                {
                    "name": "coname",
                    "description": "name of code object to build",
                    "type": "String"
                },
                {
                    "name": "decorator_list",
                    "description": "ast of decorators if any",
                    "type": "Array"
                },
                {
                    "name": "args",
                    "description": "arguments to function, if any",
                    "type": "*"
                },
                {
                    "name": "callback",
                    "description": "called after setup to do actual work of function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "the name of the newly created function or generator object."
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 1173,
            "itemtype": "property",
            "name": "",
            "final": "",
            "type": "{boolean}",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 1178,
            "itemtype": "property",
            "name": "",
            "final": "",
            "type": "{boolean}",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 1184,
            "description": "enter the new scope, and create the first block",
            "itemtype": "property",
            "name": "",
            "final": "",
            "type": "{string}",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 1192,
            "itemtype": "property",
            "name": "",
            "final": "",
            "type": "{boolean}",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 1197,
            "itemtype": "property",
            "name": "",
            "final": "",
            "type": "{boolean}",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 1202,
            "itemtype": "property",
            "name": "",
            "final": "",
            "type": "{boolean}",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 1533,
            "itemtype": "property",
            "name": "",
            "final": "",
            "type": "{string}",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 1569,
            "description": "compiles a statement",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 1659,
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "ctx",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "dataToStore",
                    "description": "",
                    "type": "String="
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 1791,
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The generated name of the scope, usually $scopeN.",
                "type": "String"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 1858,
            "itemtype": "property",
            "name": "",
            "final": "",
            "type": "{string}",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/compiler.ts",
            "line": 1887,
            "params": [
                {
                    "name": "source",
                    "description": "the code",
                    "type": "String"
                },
                {
                    "name": "fileName",
                    "description": "where it came from",
                    "type": "String"
                }
            ],
            "return": {
                "description": "}",
                "type": "Funcname: string, code: string"
            },
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/numericLiteral.ts",
            "line": 1,
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/numericLiteral.ts",
            "line": 23,
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/numericLiteral.ts",
            "line": 43,
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 47,
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fileName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "lineNumber",
                    "description": "",
                    "type": "Number="
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 66,
            "params": [
                {
                    "name": "priv",
                    "description": "",
                    "type": "String|null"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 172,
            "is_constructor": 1,
            "params": [
                {
                    "name": "table",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "lineno",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 183,
            "type": "Array.<SymbolTableScope>",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 335,
            "description": "points at top level module symFlags",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 339,
            "description": "The current class or null.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 343,
            "description": "Temporary variable used to generate names of definitions.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 347,
            "description": "mapping from ast nodes to their scope if they have one. we add an\nid to the ast node when a scope is created for it, and store it in\nhere for the compiler to lookup later.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 357,
            "description": "Lookup the SymbolTableScope for a scopeId of the AST.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 419,
            "description": "This method is called for a Function Definition or a Lambda expression.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 434,
            "params": [
                {
                    "name": "lineno",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 441,
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "flag",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "lineno",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 490,
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 725,
            "description": "This is probably not correct for names. What are they?",
            "params": [
                {
                    "name": "names",
                    "description": "",
                    "type": "Array.<Object>"
                },
                {
                    "name": "lineno",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 754,
            "params": [
                {
                    "name": "e",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 779,
            "params": [
                {
                    "name": "ste",
                    "description": "The Symbol Table Scope.",
                    "type": "Object"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 848,
            "description": "store scope info back into the st symbols dict. symbols is modified,\nothers are not.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 880,
            "params": [
                {
                    "name": "ste",
                    "description": "The Symbol Table Scope.",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/python/symtable.ts",
            "line": 928,
            "description": "Computes the symbol table for the AST module.",
            "params": [
                {
                    "name": "module",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "fileName",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/typescript/CompletionService.ts",
            "line": 27,
            "description": "Returns the completions at the cursor position asynchronously in a callabck.\n\nFIXME: There is a side-effect of setting the matchText property which should be part of the callback result.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/typescript/EditorPosition.ts",
            "line": 5,
            "description": "A wrapper around an Editor to perform conversions between linear character, {row;column} and TextRange representations.\n\nThe editor is integral to the conversion because it knows the lengths of each line.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/typescript/autoComplete.ts",
            "line": 11,
            "description": "Makes a function that can be used to compare completion entries for sorting purposes.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/typescript/autoComplete.ts",
            "line": 35,
            "description": "Using the functional constructor pattern here because 'this' is too error-prone.\n\nAccordingly, the function is camelCase and is not called using the 'new' operator.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/typescript/autoComplete.ts",
            "line": 41,
            "description": "Declare the return object now because the AutoCompleteView needs a reference.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/typescript/autoComplete.ts",
            "line": 52,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/typescript/autoComplete.ts",
            "line": 57,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/typescript/autoComplete.ts",
            "line": 62,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/typescript/autoComplete.ts",
            "line": 67,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/typescript/autoComplete.ts",
            "line": 73,
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/typescript/autoComplete.ts",
            "line": 155,
            "description": "Returns the number of completions asynchronously in the callback with the side effect of showing the completions.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/typescript/autoComplete.ts",
            "line": 212,
            "description": "Listens for changes in the editor and maybe shows the completions.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/HtmlMode.ts",
            "line": 55,
            "description": "The name of the element for fragment parsing.",
            "class": "HtmlMode"
        },
        {
            "file": "src/mode/Mode.ts",
            "line": 47,
            "description": "Used when loading snippets for zero or more modes?",
            "class": "Mode"
        },
        {
            "file": "src/mode/python_worker.ts",
            "line": 11,
            "description": "Symbol for an information annotation (gray italic i letter).",
            "class": "Anchor"
        },
        {
            "file": "src/mode/python_worker.ts",
            "line": 15,
            "description": "Symbol for a warning annotation (yellow triangle with exclamation).",
            "class": "Anchor"
        },
        {
            "file": "src/mode/python_worker.ts",
            "line": 19,
            "description": "Symbol for an error annotation (red box with x).",
            "class": "Anchor"
        },
        {
            "file": "src/mode/python_worker.ts",
            "line": 24,
            "class": "Anchor"
        },
        {
            "file": "src/mode/typescript_worker.ts",
            "line": 6,
            "description": "Doesn't really do much because TypeScript requires the concept of a workspace.\n\nHowever, does provide some notifications to trigger further actions.",
            "class": "Anchor"
        },
        {
            "file": "src/modules/deuce.d.ts",
            "line": 8,
            "description": "Browser Code Editor targeting ES6 written in TypeScript.",
            "class": "Anchor"
        },
        {
            "file": "src/mouse/dragdrop_handler.ts",
            "line": 55,
            "description": "We construct on a class defined in the Editor!\nDoes this class have to go in the same module as the Editor?",
            "class": "Anchor"
        },
        {
            "file": "src/theme/mathdoodle.ts",
            "line": 2,
            "description": "The cssClass variable corresponds to the class used in mathdoodle.css",
            "class": "Anchor"
        },
        {
            "file": "src/worker/Mirror.ts",
            "line": 11,
            "description": "Initializes the 'sender' property to the specified argument.\nInitializes the 'doc' property to a new EditDocument.\nInitializes the 'deferredUpdate' property to a delayed call to 'onUpdate'.\nBinds the 'sender' \"change\" event to a function",
            "class": "Anchor"
        },
        {
            "file": "src/worker/Mirror.ts",
            "line": 54,
            "description": "Called after the timeout period. Derived classes will normally perform\na computationally expensive analysis then report annotations to the\nsender.",
            "class": "Anchor"
        },
        {
            "file": "src/worker/WorkerClient.ts",
            "line": 6,
            "description": "WorkerClient manages the communication with a Web Worker.",
            "class": "Anchor"
        },
        {
            "file": "src/worker/WorkerClient.ts",
            "line": 124,
            "description": "This function is used as the basis for a function where this is bound safely.\nIt handles changes to the document by placing the messages in a queue",
            "class": "Anchor"
        },
        {
            "file": "src/worker/worker-amd.ts",
            "line": 160,
            "description": "main is the instance that we are creating?",
            "class": "Anchor"
        },
        {
            "file": "src/worker/worker-amd.ts",
            "line": 164,
            "description": "sender allows us to communicate back to the WorkerClient?",
            "class": "Anchor"
        },
        {
            "file": "src/worker/worker-systemjs.ts",
            "line": 67,
            "description": "main is the instance that we are creating?",
            "class": "Anchor"
        },
        {
            "file": "src/worker/worker-systemjs.ts",
            "line": 71,
            "description": "sender allows us to communicate back to the WorkerClient?",
            "class": "Anchor"
        },
        {
            "file": "src/workspace/deuce_workspace_worker.ts",
            "line": 2,
            "description": "WorkspaceWorker",
            "class": "Anchor"
        },
        {
            "file": "src/workspace/deuce_workspace_worker.ts",
            "line": 248,
            "description": "Apply an array of text edits to a string, and return the resulting string.",
            "class": "Anchor"
        },
        {
            "file": "src/workspace/deuce_workspace_worker.ts",
            "line": 265,
            "description": "Normalize an array of edits by removing overlapping entries and sorting\nentries on the \"minChar\" position.",
            "class": "Anchor"
        },
        {
            "file": "src/workspace/deuce_workspace_worker.ts",
            "line": 325,
            "description": "WorkspaceWorker is responsible for maintaining the language service host and language service.",
            "class": "Anchor"
        },
        {
            "file": "src/workspace/deuce_workspace_worker.ts",
            "line": 417,
            "description": "The type information from the source.",
            "class": "Anchor"
        },
        {
            "file": "src/workspace/deuce_workspace_worker.ts",
            "line": 429,
            "description": "The JS documentation comments with `@param` parsed out.",
            "class": "Anchor"
        },
        {
            "file": "src/workspace/workspace.ts",
            "line": 3,
            "description": "A workspace is a collection of source files identified by name.",
            "class": "Anchor"
        },
        {
            "file": "src/workspace/workspace.ts",
            "line": 8,
            "description": "Insert or update a script.\nThis is typically called by the editing application.",
            "class": "Anchor"
        },
        {
            "file": "src/workspace/workspace.ts",
            "line": 14,
            "description": "Notify the workspace of an edit to a script.",
            "class": "Anchor"
        },
        {
            "file": "src/workspace/workspace.ts",
            "line": 19,
            "description": "Remove a script.\nThis is typically called by the editing application.",
            "class": "Anchor"
        },
        {
            "file": "src/workspace/workspace.ts",
            "line": 25,
            "class": "Anchor"
        },
        {
            "file": "src/workspace/workspace.ts",
            "line": 30,
            "class": "Anchor"
        },
        {
            "file": "src/workspace/workspace.ts",
            "line": 35,
            "class": "Anchor"
        },
        {
            "file": "src/workspace/workspace.ts",
            "line": 40,
            "class": "Anchor"
        },
        {
            "file": "src/workspace/workspace.ts",
            "line": 45,
            "class": "Anchor"
        },
        {
            "file": "src/workspace/workspace.ts",
            "line": 50,
            "class": "Anchor"
        },
        {
            "file": "src/workspace/workspace.ts",
            "line": 56,
            "return": {
                "description": "a workspace instance.\n\nThis is a functional constructor; do not use the 'new' operator to call it.\n                                  do not use 'this' in the code below."
            },
            "class": "Anchor"
        },
        {
            "file": "src/Anchor.ts",
            "line": 42,
            "itemtype": "property",
            "name": "row",
            "type": "number",
            "class": "Anchor"
        },
        {
            "file": "src/Anchor.ts",
            "line": 48,
            "itemtype": "property",
            "name": "column",
            "type": "number",
            "class": "Anchor"
        },
        {
            "file": "src/Anchor.ts",
            "line": 54,
            "itemtype": "property",
            "name": "document",
            "type": "{EditorDocument}",
            "access": "private",
            "tagname": "",
            "class": "Anchor"
        },
        {
            "file": "src/Anchor.ts",
            "line": 62,
            "itemtype": "property",
            "name": "$insertRight",
            "type": "boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "Anchor"
        },
        {
            "file": "src/Anchor.ts",
            "line": 70,
            "description": "Creates a new <code>Anchor</code> and associates it with a document.",
            "params": [
                {
                    "name": "doc",
                    "description": "The document to associate with the anchor.",
                    "type": "EditorDocument"
                },
                {
                    "name": "row",
                    "description": "The starting row position.",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The starting column position.",
                    "type": "Number"
                }
            ],
            "is_constructor": 1,
            "class": "Anchor"
        },
        {
            "file": "src/Anchor.ts",
            "line": 89,
            "description": "Returns an object identifying the `row` and `column` position of the current anchor.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Anchor"
        },
        {
            "file": "src/Anchor.ts",
            "line": 97,
            "description": "Returns the current document.",
            "itemtype": "method",
            "name": "getDocument",
            "return": {
                "description": "",
                "type": "EditorDocument"
            },
            "class": "Anchor"
        },
        {
            "file": "src/Anchor.ts",
            "line": 106,
            "description": "Fires whenever the anchor position changes.\n\nBoth of these objects have a `row` and `column` property corresponding to the position.\n\nEvents that can trigger this function include [[Anchor.setPosition `setPosition()`]].",
            "itemtype": "event",
            "name": "change",
            "params": [
                {
                    "name": "e",
                    "description": "An object containing information about the anchor position. It has two properties:\n - `old`: An object describing the old Anchor position\n - `value`: An object describing the new Anchor position",
                    "type": "Object"
                }
            ],
            "class": "Anchor"
        },
        {
            "file": "src/Anchor.ts",
            "line": 194,
            "description": "Sets the anchor position to the specified row and column. If `noClip` is `true`, the position is not clipped.",
            "params": [
                {
                    "name": "row",
                    "description": "The row index to move the anchor to",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The column index to move the anchor to",
                    "type": "Number"
                },
                {
                    "name": "noClip",
                    "description": "Identifies if you want the position to be clipped",
                    "type": "Boolean"
                }
            ],
            "class": "Anchor"
        },
        {
            "file": "src/Anchor.ts",
            "line": 229,
            "description": "When called, the `'change'` event listener is removed.",
            "class": "Anchor"
        },
        {
            "file": "src/Anchor.ts",
            "line": 242,
            "description": "Clips the anchor position to the specified row and column.",
            "params": [
                {
                    "name": "row",
                    "description": "The row index to clip the anchor to",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The column index to clip the anchor to",
                    "type": "Number"
                }
            ],
            "class": "Anchor"
        },
        {
            "file": "src/BackgroundTokenizer.ts",
            "line": 43,
            "description": "Creates a new `BackgroundTokenizer` object.",
            "params": [
                {
                    "name": "tokenizer",
                    "description": "The tokenizer to use",
                    "type": "Tokenizer"
                },
                {
                    "name": "editor",
                    "description": "The editor to associate with",
                    "type": "Editor"
                }
            ],
            "is_constructor": 1,
            "class": "BackgroundTokenizer"
        },
        {
            "file": "src/BackgroundTokenizer.ts",
            "line": 51,
            "description": "This is the value returned by setTimeout, so it's really a timer handle.\nThere are some conditionals looking for a falsey value, so we use zero where needed.",
            "class": "BackgroundTokenizer"
        },
        {
            "file": "src/BackgroundTokenizer.ts",
            "line": 104,
            "description": "Sets a new tokenizer for this object.",
            "params": [
                {
                    "name": "tokenizer",
                    "description": "The new tokenizer to use",
                    "type": "Tokenizer"
                }
            ],
            "class": "BackgroundTokenizer"
        },
        {
            "file": "src/BackgroundTokenizer.ts",
            "line": 118,
            "description": "Sets a new document to associate with this object.",
            "params": [
                {
                    "name": "doc",
                    "description": "The new document to associate with",
                    "type": "EditorDocument"
                }
            ],
            "class": "BackgroundTokenizer"
        },
        {
            "file": "src/BackgroundTokenizer.ts",
            "line": 130,
            "description": "Fires whenever the background tokeniziers between a range of rows are going to be updated.",
            "itemtype": "event",
            "name": "update",
            "params": [
                {
                    "name": "e",
                    "description": "An object containing two properties, `first` and `last`, which indicate the rows of the region being updated.",
                    "type": "Object"
                }
            ],
            "class": "BackgroundTokenizer"
        },
        {
            "file": "src/BackgroundTokenizer.ts",
            "line": 137,
            "description": "Emits the `'update'` event. `firstRow` and `lastRow` are used to define the boundaries of the region to be updated.",
            "params": [
                {
                    "name": "firstRow",
                    "description": "The starting row region",
                    "type": "Number"
                },
                {
                    "name": "lastRow",
                    "description": "The final row region",
                    "type": "Number"
                }
            ],
            "class": "BackgroundTokenizer"
        },
        {
            "file": "src/BackgroundTokenizer.ts",
            "line": 151,
            "description": "Starts tokenizing at the row indicated.",
            "params": [
                {
                    "name": "startRow",
                    "description": "The row to start at",
                    "type": "Number"
                }
            ],
            "class": "BackgroundTokenizer"
        },
        {
            "file": "src/BackgroundTokenizer.ts",
            "line": 196,
            "description": "Stops tokenizing.",
            "class": "BackgroundTokenizer"
        },
        {
            "file": "src/BackgroundTokenizer.ts",
            "line": 207,
            "description": "Gives list of tokens of the row. (tokens are cached)",
            "params": [
                {
                    "name": "row",
                    "description": "The row to get tokens at",
                    "type": "Number"
                }
            ],
            "class": "BackgroundTokenizer"
        },
        {
            "file": "src/BackgroundTokenizer.ts",
            "line": 219,
            "description": "[Returns the state of tokenization at the end of a row.]{: #BackgroundTokenizer.getState}",
            "params": [
                {
                    "name": "row",
                    "description": "The row to get state at",
                    "type": "Number"
                }
            ],
            "class": "BackgroundTokenizer"
        },
        {
            "file": "src/EditSession.ts",
            "line": 144,
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 149,
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 154,
            "description": "The worker corresponding to the mode (i.e. Language).",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 185,
            "description": "This is a marker identifier.",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 189,
            "description": "This is really a Range with an added marker id.",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 193,
            "description": "A number is a marker identifier, null indicates that no such marker exists.",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 221,
            "description": "Sets the `EditSession` to point to a new `EditorDocument`.\nIf a `BackgroundTokenizer` exists, it also points to `doc`.",
            "itemtype": "method",
            "name": "setDocument",
            "params": [
                {
                    "name": "doc",
                    "description": "The new `EditorDocument` to use.",
                    "type": "EditorDocument"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 247,
            "description": "Returns the `EditorDocument` associated with this session.",
            "itemtype": "method",
            "name": "getDocument",
            "return": {
                "description": "",
                "type": "EditorDocument"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 257,
            "itemtype": "method",
            "name": "$resetRowCache",
            "params": [
                {
                    "name": "docRow",
                    "description": "The row to work with.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "private",
            "tagname": "",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 337,
            "description": "Sets the session text.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "text",
                    "description": "The new text to place.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "private",
            "tagname": "",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 356,
            "description": "Returns the current EditorDocument as a string.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "",
                "type": "String"
            },
            "alias": "EditSession.getValue",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 367,
            "description": "Returns the current EditorDocument as a string.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "alias": "EditSession.toString",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 378,
            "description": "Returns the current selection.",
            "itemtype": "method",
            "name": "getSelection",
            "return": {
                "description": "",
                "type": "Selection"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 388,
            "description": "Sets the current selection.",
            "itemtype": "method",
            "name": "setSelection",
            "params": [
                {
                    "name": "selection",
                    "description": "",
                    "type": "Selection"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 399,
            "itemtype": "method",
            "name": "getState",
            "params": [
                {
                    "name": "row",
                    "description": "The row to start at.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 408,
            "description": "Starts tokenizing at the row indicated. Returns a list of objects of the tokenized rows.",
            "itemtype": "method",
            "name": "getTokens",
            "params": [
                {
                    "name": "row",
                    "description": "The row to start at.",
                    "type": "Number"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 417,
            "description": "Returns an object indicating the token at the current row.\nThe object has two properties: `index` and `start`.",
            "itemtype": "method",
            "name": "getTokenAt",
            "params": [
                {
                    "name": "row",
                    "description": "The row number to retrieve from",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The column number to retrieve from.",
                    "type": "Number"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 448,
            "description": "Sets the undo manager.",
            "itemtype": "method",
            "name": "setUndoManager",
            "params": [
                {
                    "name": "undoManager",
                    "description": "The new undo manager.",
                    "type": "UndoManager"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 500,
            "description": "Starts a new group in undo history.",
            "itemtype": "method",
            "name": "markUndoGroup",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 512,
            "description": "Returns the current undo manager.",
            "itemtype": "method",
            "name": "getUndoManager",
            "return": {
                "description": "",
                "type": "UndoManager"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 523,
            "description": "Returns the current value for tabs.\nIf the user is using soft tabs, this will be a series of spaces (defined by [[EditSession.getTabSize `getTabSize()`]]); otherwise it's simply `'\\t'`.",
            "itemtype": "method",
            "name": "getTabString",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 539,
            "description": "Pass `true` to enable the use of soft tabs.\nSoft tabs means you're using spaces instead of the tab character (`'\\t'`).",
            "itemtype": "method",
            "name": "setUseSoftTabs",
            "params": [
                {
                    "name": "useSoftTabs",
                    "description": "Value indicating whether or not to use soft tabs.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "EditSession"
            },
            "chainable": 1,
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 553,
            "description": "Returns `true` if soft tabs are being used, `false` otherwise.",
            "itemtype": "method",
            "name": "getUseSoftTabs",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 564,
            "description": "Set the number of spaces that define a soft tab.\nFor example, passing in `4` transforms the soft tabs to be equivalent to four spaces.\nThis function also emits the `changeTabSize` event.",
            "params": [
                {
                    "name": "tabSize",
                    "description": "The new tab size",
                    "type": "Number"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 574,
            "description": "Returns the current tab size.",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 581,
            "description": "Returns `true` if the character at the position is a soft tab.",
            "params": [
                {
                    "name": "position",
                    "description": "The position to check",
                    "type": "Object"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 591,
            "description": "Pass in `true` to enable overwrites in your session, or `false` to disable.\n\nIf overwrites is enabled, any text you enter will type over any text after it. If the value of `overwrite` changes, this function also emites the `changeOverwrite` event.",
            "params": [
                {
                    "name": "overwrite",
                    "description": "Defines whether or not to set overwrites",
                    "type": "Boolean"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 604,
            "description": "Returns `true` if overwrites are enabled; `false` otherwise.",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 611,
            "description": "Sets the value of overwrite to the opposite of whatever it currently is.",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 618,
            "description": "Adds `className` to the `row`, to be used for CSS stylings and whatnot.",
            "params": [
                {
                    "name": "row",
                    "description": "The row number",
                    "type": "Number"
                },
                {
                    "name": "className",
                    "description": "The class to add",
                    "type": "String"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 631,
            "description": "Removes `className` from the `row`.",
            "params": [
                {
                    "name": "row",
                    "description": "The row number",
                    "type": "Number"
                },
                {
                    "name": "className",
                    "description": "The class to add",
                    "type": "String"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 641,
            "description": "Returns an array of numbers, indicating which rows have breakpoints.",
            "return": {
                "description": "",
                "type": "[Number]"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 649,
            "description": "Sets a breakpoint on every row number given by `rows`. This function also emites the `'changeBreakpoint'` event.",
            "params": [
                {
                    "name": "rows",
                    "description": "An array of row indices",
                    "type": "Array"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 664,
            "description": "Removes all breakpoints on the rows. This function also emites the `'changeBreakpoint'` event.",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 672,
            "description": "Sets a breakpoint on the row number given by `rows`. This function also emites the `'changeBreakpoint'` event.",
            "params": [
                {
                    "name": "row",
                    "description": "A row index",
                    "type": "Number"
                },
                {
                    "name": "className",
                    "description": "Class of the breakpoint",
                    "type": "String"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 689,
            "description": "Removes a breakpoint on the row number given by `rows`. This function also emites the `'changeBreakpoint'` event.",
            "params": [
                {
                    "name": "row",
                    "description": "A row index",
                    "type": "Number"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 700,
            "description": "Adds a new marker to the given `Range`. If `inFront` is `true`, a front marker is defined, and the `'changeFrontMarker'` event fires; otherwise, the `'changeBackMarker'` event fires.",
            "params": [
                {
                    "name": "range",
                    "description": "Define the range of the marker",
                    "type": "Range"
                },
                {
                    "name": "clazz",
                    "description": "Set the CSS class for the marker",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "Identify the type of the marker.",
                    "type": "Function | String"
                },
                {
                    "name": "inFront",
                    "description": "Set to `true` to establish a front marker",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The new marker id",
                "type": "Number"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 735,
            "description": "Adds a dynamic marker to the session.",
            "params": [
                {
                    "name": "marker",
                    "description": "object with update method",
                    "type": "Object"
                },
                {
                    "name": "inFront",
                    "description": "Set to `true` to establish a front marker",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The added marker",
                "type": "Object"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 761,
            "description": "Removes the marker with the specified ID. If this marker was in front, the `'changeFrontMarker'` event is emitted. If the marker was in the back, the `'changeBackMarker'` event is emitted.",
            "params": [
                {
                    "name": "markerId",
                    "description": "A number representing a marker",
                    "type": "Number"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 780,
            "description": "Returns an array containing the IDs of all the markers, either front or back.",
            "params": [
                {
                    "name": "inFront",
                    "description": "If `true`, indicates you only want front markers; `false` indicates only back markers",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 813,
            "description": "Sets annotations for the `EditSession`. This functions emits the `'changeAnnotation'` event.",
            "params": [
                {
                    "name": "annotations",
                    "description": "A list of annotations",
                    "type": "Array"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 823,
            "description": "Returns the annotations for the `EditSession`.",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 831,
            "description": "Clears all the annotations for this session.\nThis function also triggers the `'changeAnnotation'` event.\nThis is called by the language modes when the worker terminates.",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 840,
            "description": "If `text` contains either the newline (`\\n`) or carriage-return ('\\r') characters, `$autoNewLine` stores that value.",
            "params": [
                {
                    "name": "text",
                    "description": "A block of text",
                    "type": "String"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 855,
            "description": "Given a starting row and column, this method returns the `Range` of the first word boundary it finds.",
            "params": [
                {
                    "name": "row",
                    "description": "The row to start at",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The column to start at",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Range"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 896,
            "description": "Gets the range of a word, including its right whitespace.",
            "params": [
                {
                    "name": "row",
                    "description": "The row number to start from",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The column number to start from",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Range"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 914,
            "description": "{:EditorDocument.setNewLineMode.desc}",
            "params": [
                {
                    "name": "newLineMode",
                    "description": "{:EditorDocument.setNewLineMode.param}",
                    "type": "String"
                }
            ],
            "related": "EditorDocument.setNewLineMode",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 925,
            "description": "Returns the current new line mode.",
            "return": {
                "description": "",
                "type": "String"
            },
            "related": "EditorDocument.getNewLineMode",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 935,
            "description": "Identifies if you want to use a worker for the `EditSession`.",
            "params": [
                {
                    "name": "useWorker",
                    "description": "Set to `true` to use a worker",
                    "type": "Boolean"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 942,
            "description": "Returns `true` if workers are being used.",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 947,
            "description": "Reloads all the tokens on the current session. This function calls [[BackgroundTokenizer.start `BackgroundTokenizer.start ()`]] to all the rows; it also emits the `'tokenizerUpdate'` event.",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 957,
            "description": "Sets a new text mode for the `EditSession`. This method also emits the `'changeMode'` event. If a [[BackgroundTokenizer `BackgroundTokenizer`]] is set, the `'tokenizerUpdate'` event is also emitted.",
            "params": [
                {
                    "name": "mode",
                    "description": "Set a new text mode",
                    "type": "TextMode"
                },
                {
                    "name": "optional",
                    "description": "callback",
                    "type": "Cb"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1076,
            "description": "Returns the current text mode.",
            "return": {
                "description": "The current text mode",
                "type": "TextMode"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1084,
            "description": "This function sets the scroll top value. It also emits the `'changeScrollTop'` event.",
            "params": [
                {
                    "name": "scrollTop",
                    "description": "The new scroll top value",
                    "type": "Number"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1098,
            "description": "[Returns the value of the distance between the top of the editor and the topmost part of the visible content.]{: #EditSession.getScrollTop}",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1106,
            "description": "[Sets the value of the distance between the left of the editor and the leftmost part of the visible content.]{: #EditSession.setScrollLeft}",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1118,
            "description": "[Returns the value of the distance between the left of the editor and the leftmost part of the visible content.]{: #EditSession.getScrollLeft}",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1126,
            "description": "Returns the width of the screen.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1182,
            "description": "Returns a verbatim copy of the given line as it is in the document",
            "params": [
                {
                    "name": "row",
                    "description": "The row to retrieve from",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1194,
            "description": "Returns an array of strings of the rows between `firstRow` and `lastRow`. This function is inclusive of `lastRow`.",
            "params": [
                {
                    "name": "firstRow",
                    "description": "The first row index to retrieve",
                    "type": "Number"
                },
                {
                    "name": "lastRow",
                    "description": "The final row index to retrieve",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "[String]"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1206,
            "description": "Returns the number of rows in the document.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1214,
            "description": "{:EditorDocument.getTextRange.desc}",
            "params": [
                {
                    "name": "range",
                    "description": "The range to work with",
                    "type": "Range"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1224,
            "description": "Inserts a block of `text` and the indicated `position`.",
            "params": [
                {
                    "name": "position",
                    "description": "The position {row, column} to start inserting at",
                    "type": "Object"
                },
                {
                    "name": "text",
                    "description": "A chunk of text to insert",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The position of the last line of `text`. If the length of `text` is 0, this function simply returns `position`.",
                "type": "Object"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1236,
            "description": "Removes the `range` from the document.",
            "params": [
                {
                    "name": "range",
                    "description": "A specified Range to remove",
                    "type": "Range"
                }
            ],
            "return": {
                "description": "The new `start` property of the range, which contains `startRow` and `startColumn`. If `range` is empty, this function returns the unmodified value of `range.start`.",
                "type": "Object"
            },
            "related": "EditorDocument.remove",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1248,
            "description": "Reverts previous changes to your document.",
            "params": [
                {
                    "name": "deltas",
                    "description": "An array of previous changes",
                    "type": "Array"
                },
                {
                    "name": "dontSelect",
                    "description": "[If `true`, doesn't select the range of where the change occured]{: #dontSelect}",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Range"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1282,
            "description": "Re-implements a previously undone change to your document.",
            "params": [
                {
                    "name": "deltas",
                    "description": "An array of previous changes",
                    "type": "Array"
                },
                {
                    "name": "dontSelect",
                    "description": "{:dontSelect}",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Range"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1312,
            "description": "Enables or disables highlighting of the range where an undo occurred.",
            "params": [
                {
                    "name": "enable",
                    "description": "If `true`, selects the range of the reinserted change",
                    "type": "Boolean"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1382,
            "description": "Replaces a range in the document with the new `text`.",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "range",
                    "description": "A specified Range to replace.",
                    "type": "Range"
                },
                {
                    "name": "text",
                    "description": "The new text to use as a replacement.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If the text and range are empty, this function returns an object containing the current `range.start` value.\nIf the text is the exact same as what currently exists, this function returns an object containing the current `range.end` value.",
                "type": "Position"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1396,
            "description": "Moves a range of text from the given range to the given position. `toPosition` is an object that looks like this:\n ```json\n   { row: newRowLocation, column: newColumnLocation }\n ```",
            "params": [
                {
                    "name": "fromRange",
                    "description": "The range of text you want moved within the document",
                    "type": "Range"
                },
                {
                    "name": "toPosition",
                    "description": "The location (row and column) where you want to move the text to",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The new range where the text was moved to.",
                "type": "Range"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1456,
            "description": "Indents all the rows, from `startRow` to `endRow` (inclusive), by prefixing each row with the token in `indentString`.\n\nIf `indentString` contains the `'\\t'` character, it's replaced by whatever is defined by [[EditSession.getTabString `getTabString()`]].",
            "params": [
                {
                    "name": "startRow",
                    "description": "Starting row",
                    "type": "Number"
                },
                {
                    "name": "endRow",
                    "description": "Ending row",
                    "type": "Number"
                },
                {
                    "name": "indentString",
                    "description": "The indent token",
                    "type": "String"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1472,
            "description": "Outdents all the rows defined by the `start` and `end` properties of `range`.",
            "params": [
                {
                    "name": "range",
                    "description": "A range of rows",
                    "type": "Range"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1532,
            "description": "Shifts all the lines in the document up one, starting from `firstRow` and ending at `lastRow`.",
            "params": [
                {
                    "name": "firstRow",
                    "description": "The starting row to move up",
                    "type": "Number"
                },
                {
                    "name": "lastRow",
                    "description": "The final row to move up",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "If `firstRow` is less-than or equal to 0, this function returns 0. Otherwise, on success, it returns -1.",
                "type": "Number"
            },
            "related": "EditorDocument.insertLines",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1545,
            "description": "Shifts all the lines in the document down one, starting from `firstRow` and ending at `lastRow`.",
            "params": [
                {
                    "name": "firstRow",
                    "description": "The starting row to move down",
                    "type": "Number"
                },
                {
                    "name": "lastRow",
                    "description": "The final row to move down",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "If `firstRow` is less-than or equal to 0, this function returns 0. Otherwise, on success, it returns -1.",
                "type": "Number"
            },
            "related": "EditorDocument.insertLines",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1557,
            "description": "Duplicates all the text between `firstRow` and `lastRow`.",
            "params": [
                {
                    "name": "firstRow",
                    "description": "The starting row to duplicate",
                    "type": "Number"
                },
                {
                    "name": "lastRow",
                    "description": "The final row to duplicate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the number of new rows added; in other words, `lastRow - firstRow + 1`.",
                "type": "Number"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1631,
            "description": "Sets whether or not line wrapping is enabled. If `useWrapMode` is different than the current value, the `'changeWrapMode'` event is emitted.",
            "params": [
                {
                    "name": "useWrapMode",
                    "description": "Enable (or disable) wrap mode",
                    "type": "Boolean"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1654,
            "description": "Returns `true` if wrap mode is being used; `false` otherwise.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1666,
            "description": "Sets the boundaries of wrap. Either value can be `null` to have an unconstrained wrap, or, they can be the same number to pin the limit. If the wrap limits for `min` or `max` are different, this method also emits the `'changeWrapMode'` event.",
            "params": [
                {
                    "name": "min",
                    "description": "The minimum wrap value (the left side wrap)",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The maximum wrap value (the right side wrap)",
                    "type": "Number"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1685,
            "description": "This should generally only be called by the renderer when a resize is detected.",
            "params": [
                {
                    "name": "desiredLimit",
                    "description": "The new wrap limit",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1720,
            "description": "Returns the value of wrap limit.",
            "return": {
                "description": "The wrap limit.",
                "type": "Number"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1728,
            "description": "Sets the line length for soft wrap in the editor. Lines will break\n at a minimum of the given length minus 20 chars and at a maximum\n of the given number of chars.",
            "params": [
                {
                    "name": "limit",
                    "description": "The maximum line length in chars, for soft wrapping lines.",
                    "type": "Number"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 1738,
            "description": "Returns an object that defines the minimum and maximum of the wrap limit; it looks something like this:\n\n    { min: wrapLimitRange_min, max: wrapLimitRange_max }",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2047,
            "description": "Given a string, returns an array of the display characters, including tabs and spaces.",
            "params": [
                {
                    "name": "str",
                    "description": "The string to check",
                    "type": "String"
                },
                {
                    "name": "offset",
                    "description": "The value to start at",
                    "type": "Number"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2087,
            "description": "Calculates the width of the string `str` on the screen while assuming that the string starts at the first column on the screen.",
            "params": [
                {
                    "name": "str",
                    "description": "The string to calculate the screen width of",
                    "type": "String"
                },
                {
                    "name": "maxScreenColumn",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "screenColumn",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns an `int[]` array with two elements:<br/>\nThe first position indicates the number of columns for `str` on screen.<br/>\nThe second value contains the position of the document column that this function read until.",
                "type": "[Number]"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2126,
            "description": "Returns number of screenrows in a wrapped line.",
            "params": [
                {
                    "name": "row",
                    "description": "The row number to check",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2165,
            "description": "Returns the position (on screen) for the last character in the provided screen row.",
            "params": [
                {
                    "name": "screenRow",
                    "description": "The screen row to check",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "related": "EditSession.documentToScreenColumn",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2177,
            "description": "For the given document row and column, this returns the column position of the last screen row.",
            "params": [
                {
                    "name": "docRow",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "docColumn",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2188,
            "description": "For the given document row and column, this returns the document position of the last row.",
            "params": [
                {
                    "name": "docRow",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "docColumn",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2200,
            "description": "For the given row, this returns the split data.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2212,
            "description": "The distance to the next tab stop at the specified screen column.",
            "methos": "getScreenTabSize",
            "params": [
                {
                    "name": "screenColumn",
                    "description": "The screen column to check",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2232,
            "description": "Converts characters coordinates on the screen to characters coordinates within the document. [This takes into account code folding, word wrap, tab size, and any other visual modifications.]{: #conversionConsiderations}",
            "params": [
                {
                    "name": "screenRow",
                    "description": "The screen row to check",
                    "type": "Number"
                },
                {
                    "name": "screenColumn",
                    "description": "The screen column to check",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The object returned has two properties: `row` and `column`.",
                "type": "Object"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2324,
            "description": "Converts document coordinates to screen coordinates. {:conversionConsiderations}",
            "params": [
                {
                    "name": "docRow",
                    "description": "The document row to check",
                    "type": "Number"
                },
                {
                    "name": "docColumn",
                    "description": "The document column to check",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The object returned by this method has two properties: `row` and `column`.",
                "type": "Object"
            },
            "related": "EditSession.screenToDocumentPosition",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2427,
            "description": "For the given document row and column, returns the screen column.",
            "params": [
                {
                    "name": "docRow",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "docColumn",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2438,
            "description": "For the given document row and column, returns the screen row.",
            "params": [
                {
                    "name": "docRow",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "docColumn",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2453,
            "description": "Returns the length of the screen.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2496,
            "access": "private",
            "tagname": "",
            "class": "EditSession"
        },
        {
            "file": "src/EditSession.ts",
            "line": 2745,
            "description": "Adds a new fold.",
            "return": {
                "description": "The new created Fold object or an existing fold object in case the\n     passed in range fits an existing fold exactly."
            },
            "class": "EditSession"
        },
        {
            "file": "src/Editor.ts",
            "line": 68,
            "itemtype": "property",
            "name": "renderer",
            "type": "VirtualRenderer",
            "class": "Editor"
        },
        {
            "file": "src/Editor.ts",
            "line": 74,
            "itemtype": "property",
            "name": "session",
            "type": "EditSession",
            "access": "private",
            "tagname": "",
            "class": "Editor"
        },
        {
            "file": "src/Editor.ts",
            "line": 94,
            "description": "The renderer container element.",
            "class": "Editor"
        },
        {
            "file": "src/Editor.ts",
            "line": 201,
            "itemtype": "property",
            "name": "selection",
            "type": "Selection",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 347,
            "description": "Sets a new key handler, such as \"vim\" or \"windows\".",
            "itemtype": "method",
            "name": "setKeyboardHandler",
            "params": [
                {
                    "name": "keyboardHandler",
                    "description": "The new key handler.",
                    "type": "String | HashHandler"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 372,
            "description": "Returns the keyboard handler, such as \"vim\" or \"windows\".",
            "itemtype": "method",
            "name": "getKeyboardHandler",
            "return": {
                "description": "",
                "type": "HashHandler"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 382,
            "description": "Sets a new EditSession to use.\nThis method also emits the `'changeSession'` event.",
            "itemtype": "method",
            "name": "setSession",
            "params": [
                {
                    "name": "session",
                    "description": "The new session to use.",
                    "type": "EditSession"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 495,
            "description": "Returns the current session being used.",
            "itemtype": "method",
            "name": "getSession",
            "return": {
                "description": "",
                "type": "EditSession"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 505,
            "description": "Sets the current document to `val`.",
            "params": [
                {
                    "name": "val",
                    "description": "The new value to set for the document",
                    "type": "String"
                },
                {
                    "name": "cursorPos",
                    "description": "Where to set the new value. `undefined` or 0 is selectAll, -1 is at the document start, and +1 is at the end",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The current document value",
                "type": "String"
            },
            "related": "Document.setValue",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 529,
            "description": "Returns the current session's content.",
            "return": {
                "description": "",
                "type": "String"
            },
            "related": "EditSession.getValue",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 539,
            "description": "Returns the currently highlighted selection.",
            "return": {
                "description": "The highlighted selection",
                "type": "String"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 548,
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "force",
                    "description": "force If `true`, recomputes the size, even if the height and width haven't changed.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 557,
            "description": "{:VirtualRenderer.setTheme}",
            "params": [
                {
                    "name": "theme",
                    "description": "The path to a theme",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "optional callback called when theme is loaded",
                    "type": "Function"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 566,
            "description": "{:VirtualRenderer.getTheme}",
            "return": {
                "description": "The set theme",
                "type": "String"
            },
            "related": "VirtualRenderer.getTheme",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 576,
            "description": "{:VirtualRenderer.setStyle}",
            "params": [
                {
                    "name": "style",
                    "description": "A class name",
                    "type": "String"
                }
            ],
            "related": "VirtualRenderer.setStyle",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 586,
            "description": "{:VirtualRenderer.unsetStyle}",
            "related": "VirtualRenderer.unsetStyle",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 594,
            "description": "Gets the current font size of the editor text.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 601,
            "description": "Set a new font size (in pixels) for the editor text.",
            "params": [
                {
                    "name": "fontSize",
                    "description": "A font size ( _e.g._ \"12px\")",
                    "type": "String"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 721,
            "description": "Brings the current `textInput` into focus.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 736,
            "description": "Returns `true` if the current `textInput` is in focus.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 744,
            "description": "Blurs the current `textInput`.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 752,
            "description": "Emitted once the editor comes into focus.",
            "itemtype": "event",
            "name": "focus",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 767,
            "description": "Emitted once the editor has been blurred.",
            "itemtype": "event",
            "name": "blur",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 787,
            "description": "Emitted whenever the document is changed.",
            "itemtype": "event",
            "name": "change",
            "params": [
                {
                    "name": "e",
                    "description": "Contains a single property, `data`, which has the delta of changes",
                    "type": "Object"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 827,
            "description": "Handler for cursor or selection changes.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 976,
            "description": "Returns the string of text currently highlighted.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 984,
            "description": "Emitted when text is copied.",
            "itemtype": "event",
            "name": "copy",
            "params": [
                {
                    "name": "text",
                    "description": "The copied text",
                    "type": "String"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 990,
            "description": "Returns the string of text currently highlighted.",
            "return": {
                "description": "",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "Use getSelectedText instead.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1001,
            "description": "Called whenever a text \"copy\" happens.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1008,
            "description": "Called whenever a text \"cut\" happens.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1015,
            "description": "Emitted when text is pasted.",
            "itemtype": "event",
            "name": "paste",
            "params": [
                {
                    "name": "text",
                    "description": "The pasted text",
                    "type": "String"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1022,
            "description": "Called whenever a text \"paste\" happens.",
            "params": [
                {
                    "name": "text",
                    "description": "The pasted text",
                    "type": "String"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1042,
            "description": "Inserts `text` into wherever the cursor is pointing.",
            "params": [
                {
                    "name": "text",
                    "description": "The new text to add",
                    "type": "String"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1145,
            "description": "Pass in `true` to enable overwrites in your session, or `false` to disable. If overwrites is enabled, any text you enter will type over any text after it. If the value of `overwrite` changes, this function also emites the `changeOverwrite` event.",
            "params": [
                {
                    "name": "overwrite",
                    "description": "Defines wheter or not to set overwrites",
                    "type": "Boolean"
                }
            ],
            "related": "EditSession.setOverwrite",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1156,
            "description": "Returns `true` if overwrites are enabled; `false` otherwise.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "related": "EditSession.getOverwrite",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1165,
            "description": "Sets the value of overwrite to the opposite of whatever it currently is.",
            "related": "EditSession.toggleOverwrite",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1173,
            "description": "Sets how fast the mouse scrolling should do.",
            "params": [
                {
                    "name": "speed",
                    "description": "A value indicating the new speed (in milliseconds)",
                    "type": "Number"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1181,
            "description": "Returns the value indicating how fast the mouse scroll speed is (in milliseconds).",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1189,
            "description": "Sets the delay (in milliseconds) of the mouse drag.",
            "params": [
                {
                    "name": "dragDelay",
                    "description": "A value indicating the new delay",
                    "type": "Number"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1197,
            "description": "Returns the current mouse drag delay.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1205,
            "description": "Emitted when the selection style changes, via [[Editor.setSelectionStyle]].",
            "itemtype": "event",
            "name": "changeSelectionStyle",
            "params": [
                {
                    "name": "data",
                    "description": "Contains one property, `data`, which indicates the new selection style",
                    "type": "Object"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1210,
            "description": "Draw selection markers spanning whole line, or only over selected text. Default value is \"line\"",
            "params": [
                {
                    "name": "style",
                    "description": "The new selection style \"line\"|\"text\"",
                    "type": "String"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1219,
            "description": "Returns the current selection style.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1227,
            "description": "Determines whether or not the current line should be highlighted.",
            "params": [
                {
                    "name": "shouldHighlight",
                    "description": "Set to `true` to highlight the current line",
                    "type": "Boolean"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1235,
            "description": "Returns `true` if current lines are always highlighted.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1251,
            "description": "Determines if the currently selected word should be highlighted.",
            "params": [
                {
                    "name": "shouldHighlight",
                    "description": "Set to `true` to highlight the currently selected word",
                    "type": "Boolean"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1260,
            "description": "Returns `true` if currently highlighted words are to be highlighted.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1276,
            "description": "If `showInvisibles` is set to `true`, invisible characters&mdash;like spaces or new lines&mdash;are show in the editor.",
            "params": [
                {
                    "name": "showInvisibles",
                    "description": "Specifies whether or not to show invisible characters",
                    "type": "Boolean"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1285,
            "description": "Returns `true` if invisible characters are being shown.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1301,
            "description": "If `showPrintMargin` is set to `true`, the print margin is shown in the editor.",
            "params": [
                {
                    "name": "showPrintMargin",
                    "description": "Specifies whether or not to show the print margin",
                    "type": "Boolean"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1309,
            "description": "Returns `true` if the print margin is being shown.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1317,
            "description": "Sets the column defining where the print margin should be.",
            "params": [
                {
                    "name": "showPrintMargin",
                    "description": "Specifies the new print margin",
                    "type": "Number"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1325,
            "description": "Returns the column number of where the print margin is.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1333,
            "description": "If `readOnly` is true, then the editor is set to read-only mode, and none of the content can change.",
            "params": [
                {
                    "name": "readOnly",
                    "description": "Specifies whether the editor can be modified or not",
                    "type": "Boolean"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1342,
            "description": "Returns `true` if the editor is set to read-only mode.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1350,
            "description": "Specifies whether to use behaviors or not. [\"Behaviors\" in this case is the auto-pairing of special characters, like quotation marks, parenthesis, or brackets.]{: #BehaviorsDef}",
            "params": [
                {
                    "name": "enabled",
                    "description": "Enables or disables behaviors",
                    "type": "Boolean"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1359,
            "description": "Returns `true` if the behaviors are currently enabled. {:BehaviorsDef}",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1368,
            "description": "Specifies whether to use wrapping behaviors or not, i.e. automatically wrapping the selection with characters such as brackets\nwhen such a character is typed in.",
            "params": [
                {
                    "name": "enabled",
                    "description": "Enables or disables wrapping behaviors",
                    "type": "Boolean"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1378,
            "description": "Returns `true` if the wrapping behaviors are currently enabled.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1385,
            "description": "Indicates whether the fold widgets should be shown or not.",
            "params": [
                {
                    "name": "show",
                    "description": "Specifies whether the fold widgets are shown",
                    "type": "Boolean"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1393,
            "description": "Returns `true` if the fold widgets are shown.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1409,
            "description": "Removes words of text from the editor. A \"word\" is defined as a string of characters bookended by whitespace.",
            "params": [
                {
                    "name": "direction",
                    "description": "The direction of the deletion to occur, either \"left\" or \"right\"",
                    "type": "String"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1445,
            "description": "Removes the word directly to the right of the current selection.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1456,
            "description": "Removes the word directly to the left of the current selection.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1467,
            "description": "Removes all the words to the left of the current selection, until the start of the line.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1478,
            "description": "Removes all the words to the right of the current selection, until the end of the line.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1495,
            "description": "Splits the line at the current selection (by inserting an `'\\n'`).",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1509,
            "description": "Transposes current line.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1535,
            "description": "Converts the current selection entirely into lowercase.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1550,
            "description": "Converts the current selection entirely into uppercase.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1565,
            "description": "Inserts an indentation into the current cursor position or indents the selected lines.",
            "related": "EditSession.indentRows",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1607,
            "description": "Indents the current line.",
            "related": "EditSession.indentRows",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1616,
            "description": "Outdents the current line.",
            "related": "EditSession.outdentRows",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1650,
            "description": "Given the currently selected range, this function either comments all the lines, or uncomments all of them.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1666,
            "description": "Works like [[EditSession.getTokenAt]], except it returns a number.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1689,
            "description": "If the character before the cursor is a number, this functions changes its value by `amount`.",
            "params": [
                {
                    "name": "amount",
                    "description": "The value to change the numeral by (can be negative to decrease value)",
                    "type": "Number"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1735,
            "description": "Removes all the lines in the current selection",
            "related": "EditSession.remove",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1771,
            "description": "Shifts all the selected lines down one row.",
            "return": {
                "description": "On success, it returns -1.",
                "type": "Number"
            },
            "related": "EditSession.moveLinesUp",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1783,
            "description": "Shifts all the selected lines up one row.",
            "return": {
                "description": "On success, it returns -1.",
                "type": "Number"
            },
            "related": "EditSession.moveLinesDown",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1794,
            "description": "Moves a range of text from the given range to the given position. `toPosition` is an object that looks like this:\n```json\n   { row: newRowLocation, column: newColumnLocation }\n```",
            "params": [
                {
                    "name": "fromRange",
                    "description": "The range of text you want moved within the document",
                    "type": "Range"
                },
                {
                    "name": "toPosition",
                    "description": "The location (row and column) where you want to move the text to",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The new range where the text was moved to.",
                "type": "Range"
            },
            "related": "EditSession.moveText",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1809,
            "description": "Copies all the selected lines up one row.",
            "return": {
                "description": "On success, returns 0.",
                "type": "Number"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1821,
            "description": "Copies all the selected lines down one row.",
            "return": {
                "description": "On success, returns the number of new rows added; in other words, `lastRow - firstRow + 1`.",
                "type": "Number"
            },
            "related": "EditSession.duplicateLines",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1833,
            "description": "Executes a specific function, which can be anything that manipulates selected lines, such as copying them, duplicating them, or shifting them.",
            "params": [
                {
                    "name": "mover",
                    "description": "A method to call on each selected row",
                    "type": "Function"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1877,
            "description": "Returns an object indicating the currently selected rows.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1903,
            "description": "{:VirtualRenderer.getFirstVisibleRow}",
            "return": {
                "description": "",
                "type": "Number"
            },
            "related": "VirtualRenderer.getFirstVisibleRow",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1913,
            "description": "{:VirtualRenderer.getLastVisibleRow}",
            "return": {
                "description": "",
                "type": "Number"
            },
            "related": "VirtualRenderer.getLastVisibleRow",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1923,
            "description": "Indicates if the row is currently visible on the screen.",
            "params": [
                {
                    "name": "row",
                    "description": "The row to check",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1933,
            "description": "Indicates if the entire row is currently visible on the screen.",
            "params": [
                {
                    "name": "row",
                    "description": "The row to check",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1944,
            "description": "Returns the number of currently visibile rows.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1952,
            "description": "FIXME: The semantics of select are not easily understood.",
            "params": [
                {
                    "name": "direction",
                    "description": "+1 for page down, -1 for page up. Maybe N for N pages?"
                },
                {
                    "name": "select",
                    "description": "true | false | undefined"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1986,
            "description": "Selects the text from the current position of the document until where a \"page down\" finishes.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 1993,
            "description": "Selects the text from the current position of the document until where a \"page up\" finishes.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2000,
            "description": "Shifts the document to wherever \"page down\" is, as well as moving the cursor position.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2007,
            "description": "Shifts the document to wherever \"page up\" is, as well as moving the cursor position.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2014,
            "description": "Scrolls the document to wherever \"page down\" is, without changing the cursor position.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2021,
            "description": "Scrolls the document to wherever \"page up\" is, without changing the cursor position.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2028,
            "description": "Moves the editor to the specified row.",
            "related": "VirtualRenderer.scrollToRow",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2036,
            "description": "Scrolls to a line. If `center` is `true`, it puts the line in middle of screen (or attempts to).",
            "params": [
                {
                    "name": "line",
                    "description": "The line to scroll to",
                    "type": "Number"
                },
                {
                    "name": "center",
                    "description": "If `true`",
                    "type": "Boolean"
                },
                {
                    "name": "animate",
                    "description": "If `true` animates scrolling",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "Function to be called when the animation has finished",
                    "type": "Function"
                }
            ],
            "related": "VirtualRenderer.scrollToLine",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2050,
            "description": "Attempts to center the current selection on the screen.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2062,
            "description": "Gets the current position of the cursor.",
            "return": {
                "description": "An object that looks something like this:\n\n```json\n{ row: currRow, column: currCol }\n```",
                "type": "Object"
            },
            "related": "Selection.getCursor",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2076,
            "description": "Returns the screen position of the cursor.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2084,
            "description": "{:Selection.getRange}",
            "return": {
                "description": "",
                "type": "Range"
            },
            "related": "Selection.getRange",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2093,
            "description": "Selects all the text in editor.",
            "related": "Selection.selectAll",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2103,
            "description": "{:Selection.clearSelection}",
            "related": "Selection.clearSelection",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2111,
            "description": "Moves the cursor to the specified row and column. Note that this does not de-select the current selection.",
            "params": [
                {
                    "name": "row",
                    "description": "The new row number",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The new column number",
                    "type": "Number"
                },
                {
                    "name": "animate",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "related": "Selection.moveCursorTo",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2123,
            "description": "Moves the cursor to the position indicated by `pos.row` and `pos.column`.",
            "params": [
                {
                    "name": "pos",
                    "description": "An object with two properties, row and column",
                    "type": "Object"
                }
            ],
            "related": "Selection.moveCursorToPosition",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2134,
            "description": "Moves the cursor's row and column to the next matching bracket or HTML tag.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2301,
            "description": "Moves the cursor to the specified line number, and also into the indiciated column.",
            "params": [
                {
                    "name": "lineNumber",
                    "description": "The line number to go to",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "A column number to go to",
                    "type": "Number"
                },
                {
                    "name": "animate",
                    "description": "If `true` animates scolling",
                    "type": "Boolean"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2322,
            "description": "Moves the cursor to the specified row and column. Note that this does de-select the current selection.",
            "params": [
                {
                    "name": "row",
                    "description": "The new row number",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The new column number",
                    "type": "Number"
                }
            ],
            "related": "Editor.moveCursorTo",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2334,
            "description": "Moves the cursor up in the document the specified number of times. Note that this does de-select the current selection.",
            "params": [
                {
                    "name": "times",
                    "description": "The number of times to change navigation",
                    "type": "Number"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2349,
            "description": "Moves the cursor down in the document the specified number of times. Note that this does de-select the current selection.",
            "params": [
                {
                    "name": "times",
                    "description": "The number of times to change navigation",
                    "type": "Number"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2364,
            "description": "Moves the cursor left in the document the specified number of times. Note that this does de-select the current selection.",
            "params": [
                {
                    "name": "times",
                    "description": "The number of times to change navigation",
                    "type": "Number"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2384,
            "description": "Moves the cursor right in the document the specified number of times. Note that this does de-select the current selection.",
            "params": [
                {
                    "name": "times",
                    "description": "The number of times to change navigation",
                    "type": "Number"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2404,
            "description": "Moves the cursor to the start of the current line. Note that this does de-select the current selection.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2413,
            "description": "Moves the cursor to the end of the current line. Note that this does de-select the current selection.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2422,
            "description": "Moves the cursor to the end of the current file. Note that this does de-select the current selection.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2431,
            "description": "Moves the cursor to the start of the current file. Note that this does de-select the current selection.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2440,
            "description": "Moves the cursor to the word immediately to the right of the current position. Note that this does de-select the current selection.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2449,
            "description": "Moves the cursor to the word immediately to the left of the current position. Note that this does de-select the current selection.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2458,
            "description": "Replaces the first occurance of `options.needle` with the value in `replacement`.",
            "params": [
                {
                    "name": "replacement",
                    "description": "The text to replace with",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The [[Search `Search`]] options to use",
                    "type": "Object"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2485,
            "description": "Replaces all occurances of `options.needle` with the value in `replacement`.",
            "params": [
                {
                    "name": "replacement",
                    "description": "The text to replace with",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The [[Search `Search`]] options to use",
                    "type": "Object"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2530,
            "description": "{:Search.getOptions} For more information on `options`, see [[Search `Search`]].",
            "related": "Search.getOptions",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2539,
            "description": "Attempts to find `needle` within the document. For more information on `options`, see [[Search `Search`]].",
            "params": [
                {
                    "name": "needle",
                    "description": "The text to search for (optional)",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "An object defining various search properties",
                    "type": "Object"
                },
                {
                    "name": "animate",
                    "description": "If `true` animate scrolling",
                    "type": "Boolean"
                }
            ],
            "related": "Search.find",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2586,
            "description": "Performs another search for `needle` in the document. For more information on `options`, see [[Search `Search`]].",
            "params": [
                {
                    "name": "options",
                    "description": "search options",
                    "type": "Object"
                },
                {
                    "name": "animate",
                    "description": "If `true` animate scrolling",
                    "type": "Boolean"
                }
            ],
            "related": "Editor.find",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2599,
            "description": "Performs a search for `needle` backwards. For more information on `options`, see [[Search `Search`]].",
            "params": [
                {
                    "name": "options",
                    "description": "search options",
                    "type": "Object"
                },
                {
                    "name": "animate",
                    "description": "If `true` animate scrolling",
                    "type": "Boolean"
                }
            ],
            "related": "Editor.find",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2623,
            "description": "{:UndoManager.undo}",
            "related": "UndoManager.undo",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2634,
            "description": "{:UndoManager.redo}",
            "related": "UndoManager.redo",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2645,
            "description": "Cleans up the entire editor.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2654,
            "description": "Enables automatic scrolling of the cursor into view when editor itself is inside scrollable element",
            "params": [
                {
                    "name": "enable",
                    "description": "default true",
                    "type": "Boolean"
                }
            ],
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 2896,
            "description": "The function to call to release a captured mouse.",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 3186,
            "description": "Cached text coordinates following getDocumentPosition()",
            "class": "GutterTooltip"
        },
        {
            "file": "src/Editor.ts",
            "line": 3596,
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "GutterTooltip"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 90,
            "description": "Replaces all the lines in the current `EditorDocument` with the value of `text`.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "text",
                    "description": "The text to use",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 103,
            "description": "Returns all the lines in the document as a single string, joined by the new line character.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 113,
            "description": "Creates a new `Anchor` to define a floating point in the document.",
            "itemtype": "method",
            "name": "createAnchor",
            "params": [
                {
                    "name": "row",
                    "description": "The row number to use",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The column number to use",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Anchor"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 124,
            "description": "Splits a string of text on any newline (`\\n`) or carriage-return ('\\r') characters.",
            "itemtype": "method",
            "name": "$split",
            "params": [
                {
                    "name": "text",
                    "description": "The text to work with",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "private",
            "tagname": "",
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 138,
            "description": "Returns the newline character that's being used, depending on the value of `newLineMode`.\n If `newLineMode == windows`, `\\r\\n` is returned.  \n If `newLineMode == unix`, `\\n` is returned.  \n If `newLineMode == auto`, the value of `autoNewLine` is returned.",
            "itemtype": "method",
            "name": "getNewLineCharacter",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 159,
            "description": "Sets the new line mode.",
            "itemtype": "method",
            "name": "setNewLineMode",
            "params": [
                {
                    "name": "newLineMode",
                    "description": "[The newline mode to use; can be either `windows`, `unix`, or `auto`]{: #EditorDocument.setNewLineMode.param}",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 174,
            "description": "Returns the type of newlines being used; either `windows`, `unix`, or `auto`.",
            "itemtype": "method",
            "name": "getNewLineMode",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 184,
            "description": "Returns `true` if `text` is a newline character (either `\\r\\n`, `\\r`, or `\\n`).",
            "itemtype": "method",
            "name": "isNewLine",
            "params": [
                {
                    "name": "text",
                    "description": "The text to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 195,
            "description": "Returns a verbatim copy of the given line as it is in the document.",
            "itemtype": "method",
            "name": "getLine",
            "params": [
                {
                    "name": "row",
                    "description": "The row index to retrieve.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 206,
            "description": "Returns an array of strings of the rows between `firstRow` and `lastRow`.\nThis function is inclusive of `lastRow`.",
            "params": [
                {
                    "name": "firstRow",
                    "description": "The first row index to retrieve",
                    "type": "Number"
                },
                {
                    "name": "lastRow",
                    "description": "The final row index to retrieve",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String[]"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 218,
            "description": "Returns all lines in the document as string array.",
            "itemtype": "method",
            "name": "getAllLines()",
            "return": {
                "description": "",
                "type": "String[]"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 228,
            "description": "Returns the number of rows in the document.",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 238,
            "description": "Given a range within the document, returns all the text within that range as a single string.",
            "itemtype": "method",
            "name": "getTextRange",
            "params": [
                {
                    "name": "range",
                    "description": "The range to work with.",
                    "type": "Range"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 258,
            "description": "Inserts a block of `text` at the indicated `position`.",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "position",
                    "description": "The position to start inserting at; it's an object that looks like `{ row: row, column: column}`",
                    "type": "Object"
                },
                {
                    "name": "text",
                    "description": "A chunk of text to insert.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The position ({row, column}) of the last line of `text`. If the length of `text` is 0, this function simply returns `position`.",
                "type": "Object"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 290,
            "description": "Fires whenever the document changes.\n\nSeveral methods trigger different `\"change\"` events. Below is a list of each action type, followed by each property that's also available:\n\n * `\"insertLines\"` (emitted by [[EditorDocument.insertLines]])\n   * `range`: the [[Range]] of the change within the document\n   * `lines`: the lines in the document that are changing\n * `\"insertText\"` (emitted by [[EditorDocument.insertNewLine]])\n   * `range`: the [[Range]] of the change within the document\n   * `text`: the text that's being added\n * `\"removeLines\"` (emitted by [[EditorDocument.insertLines]])\n   * `range`: the [[Range]] of the change within the document\n   * `lines`: the lines in the document that were removed\n   * `nl`: the new line character (as defined by [[EditorDocument.getNewLineCharacter]])\n * `\"removeText\"` (emitted by [[EditorDocument.removeInLine]] and [[EditorDocument.removeNewLine]])\n   * `range`: the [[Range]] of the change within the document\n   * `text`: the text that's being removed",
            "itemtype": "event",
            "name": "change",
            "params": [
                {
                    "name": "e",
                    "description": "Contains at least one property called `\"action\"`. `\"action\"` indicates the action that triggered the change. Each action also has a set of additional properties.",
                    "type": "Object"
                }
            ],
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 313,
            "description": "Inserts the elements in `lines` into the document, starting at the row index given by `row`. This method also triggers the `'change'` event.",
            "params": [
                {
                    "name": "row",
                    "description": "The index of the row to insert at",
                    "type": "Number"
                },
                {
                    "name": "lines",
                    "description": "An array of strings",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Contains the final row and column, like this:  \n  ```\n  {row: endRow, column: 0}\n  ```  \n  If `lines` is empty, this function returns an object containing the current row, and column, like this:  \n  ``` \n  {row: row, column: 0}\n  ```",
                "type": "Object"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 359,
            "description": "Inserts a new line into the document at the current row's `position`. This method also triggers the `'change'` event.",
            "params": [
                {
                    "name": "position",
                    "description": "The position to insert at",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns an object containing the final row and column, like this:<br/>\n   ```\n   {row: endRow, column: 0}\n   ```",
                "type": "Object"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 389,
            "description": "Inserts `text` into the `position` at the current row.",
            "itemtype": "method",
            "name": "insertInLine\nThis method also triggers the `'change'` event.",
            "params": [
                {
                    "name": "position",
                    "description": "The position to insert at.",
                    "type": "Object"
                },
                {
                    "name": "text",
                    "description": "A chunk of text",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns an object containing the final row and column.",
                "type": "Object"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 417,
            "description": "Removes the `range` from the document.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "range",
                    "description": "A specified Range to remove",
                    "type": "Range"
                }
            ],
            "return": {
                "description": "Returns the new `start` property of the range.\nIf `range` is empty, this function returns the unmodified value of `range.start`.",
                "type": "Position"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 460,
            "description": "Removes the specified columns from the `row`.\nThis method also triggers the `'change'` event.",
            "itemtype": "method",
            "name": "removeInLine",
            "params": [
                {
                    "name": "row",
                    "description": "The row to remove from",
                    "type": "Number"
                },
                {
                    "name": "startColumn",
                    "description": "The column to start removing at",
                    "type": "Number"
                },
                {
                    "name": "endColumn",
                    "description": "The column to stop removing at",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns an object containing `startRow` and `startColumn`, indicating the new row and column values.<br/>If `startColumn` is equal to `endColumn`, this function returns nothing.",
                "type": "Object"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 490,
            "description": "Removes a range of full lines.\nThis method also triggers the `'change'` event.",
            "itemtype": "method",
            "name": "removeLines",
            "params": [
                {
                    "name": "firstRow",
                    "description": "The first row to be removed.",
                    "type": "Number"
                },
                {
                    "name": "lastRow",
                    "description": "The last row to be removed.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns all the removed lines.",
                "type": "String[]"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 523,
            "description": "Removes the new line between `row` and the row immediately following it. This method also triggers the `'change'` event.",
            "params": [
                {
                    "name": "row",
                    "description": "The row to check",
                    "type": "Number"
                }
            ],
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 545,
            "description": "Replaces a range in the document with the new `text`.",
            "params": [
                {
                    "name": "range",
                    "description": "A specified Range to replace",
                    "type": "Range"
                },
                {
                    "name": "text",
                    "description": "The new text to use as a replacement",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns an object containing the final row and column, like this:\n    {row: endRow, column: 0}\nIf the text and range are empty, this function returns an object containing the current `range.start` value.\nIf the text is the exact same as what currently exists, this function returns an object containing the current `range.end` value.",
                "type": "Object"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 575,
            "description": "Applies all the changes previously accumulated. These can be either `'includeText'`, `'insertLines'`, `'removeText'`, and `'removeLines'`.",
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 594,
            "description": "Reverts any changes previously applied. These can be either `'includeText'`, `'insertLines'`, `'removeText'`, and `'removeLines'`.",
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 614,
            "description": "Converts an index position in a document to a `{row, column}` object.\n\nIndex refers to the \"absolute position\" of a character in the document. For example:\n\n```javascript\nvar x = 0; // 10 characters, plus one for newline\nvar y = -1;\n```\n\nHere, `y` is an index 15: 11 characters for the first row, and 5 characters until `y` in the second.",
            "params": [
                {
                    "name": "index",
                    "description": "An index to convert",
                    "type": "Number"
                },
                {
                    "name": "startRow=0",
                    "description": "The row from which to start the conversion",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A `{row, column}` object of the `index` position",
                "type": "Object"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/EditorDocument.ts",
            "line": 641,
            "description": "Converts the `{row, column}` position in a document to the character's index.\n\nIndex refers to the \"absolute position\" of a character in the document. For example:\n\n```javascript\nvar x = 0; // 10 characters, plus one for newline\nvar y = -1;\n```\n\nHere, `y` is an index 15: 11 characters for the first row, and 5 characters until `y` in the second.",
            "params": [
                {
                    "name": "pos",
                    "description": "The `{row, column}` to convert",
                    "type": "Object"
                },
                {
                    "name": "startRow=0",
                    "description": "The row from which to start the conversion",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The index position in the document",
                "type": "Number"
            },
            "class": "EditorDocument"
        },
        {
            "file": "src/Fold.ts",
            "line": 70,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Fold"
        },
        {
            "file": "src/Fold.ts",
            "line": 78,
            "itemtype": "method",
            "name": "setFoldLine",
            "params": [
                {
                    "name": "foldLine",
                    "description": "",
                    "type": "FoldLine"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Fold"
        },
        {
            "file": "src/Fold.ts",
            "line": 90,
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "Fold"
            },
            "class": "Fold"
        },
        {
            "file": "src/Fold.ts",
            "line": 104,
            "itemtype": "method",
            "name": "addSubFold",
            "params": [
                {
                    "name": "fold",
                    "description": "",
                    "type": "Fold"
                }
            ],
            "return": {
                "description": "",
                "type": "Fold"
            },
            "class": "Fold"
        },
        {
            "file": "src/Fold.ts",
            "line": 148,
            "itemtype": "method",
            "name": "restoreRange",
            "params": [
                {
                    "name": "range",
                    "description": "",
                    "type": "Fold"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Fold"
        },
        {
            "file": "src/FoldLine.ts",
            "line": 72,
            "description": "Note: This doesn't update wrapData!",
            "itemtype": "method",
            "name": "shiftRow",
            "params": [
                {
                    "name": "shift",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "FoldLine"
        },
        {
            "file": "src/FoldLine.ts",
            "line": 87,
            "itemtype": "method",
            "name": "addFold",
            "params": [
                {
                    "name": "fold",
                    "description": "",
                    "type": "Fold"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "FoldLine"
        },
        {
            "file": "src/FoldLine.ts",
            "line": 125,
            "itemtype": "method",
            "name": "containsRow",
            "params": [
                {
                    "name": "row",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "FoldLine"
        },
        {
            "file": "src/FoldLine.ts",
            "line": 134,
            "itemtype": "method",
            "name": "walk",
            "params": [
                {
                    "name": "callback",
                    "description": ""
                },
                {
                    "name": "endRow",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "endColumn",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "FoldLine"
        },
        {
            "file": "src/HScrollBar.ts",
            "line": 13,
            "description": "Creates a new `HScrollBar`. `parent` is the owner of the scroll bar.",
            "params": [
                {
                    "name": "parent",
                    "description": "A DOM element",
                    "type": "DOMElement"
                },
                {
                    "name": "renderer",
                    "description": "An editor renderer",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "class": "HScrollBar"
        },
        {
            "file": "src/HScrollBar.ts",
            "line": 33,
            "description": "Emitted when the scroll bar, well, scrolls.",
            "itemtype": "event",
            "name": "scroll",
            "params": [
                {
                    "name": "e",
                    "description": "Contains one property, `\"data\"`, which indicates the current scroll left position",
                    "type": "Object"
                }
            ],
            "class": "HScrollBar"
        },
        {
            "file": "src/HScrollBar.ts",
            "line": 46,
            "description": "Returns the height of the scroll bar.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "HScrollBar"
        },
        {
            "file": "src/HScrollBar.ts",
            "line": 54,
            "description": "Sets the width of the scroll bar, in pixels.",
            "params": [
                {
                    "name": "width",
                    "description": "The new width",
                    "type": "Number"
                }
            ],
            "class": "HScrollBar"
        },
        {
            "file": "src/HScrollBar.ts",
            "line": 62,
            "description": "Sets the inner width of the scroll bar, in pixels.",
            "params": [
                {
                    "name": "width",
                    "description": "The new inner width",
                    "type": "Number"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Use setScrollWidth instead",
            "class": "HScrollBar"
        },
        {
            "file": "src/HScrollBar.ts",
            "line": 71,
            "description": "Sets the scroll width of the scroll bar, in pixels.",
            "params": [
                {
                    "name": "width",
                    "description": "The new scroll width",
                    "type": "Number"
                }
            ],
            "class": "HScrollBar"
        },
        {
            "file": "src/HScrollBar.ts",
            "line": 79,
            "description": "Sets the scroll left of the scroll bar.",
            "params": [
                {
                    "name": "scrollTop",
                    "description": "The new scroll left",
                    "type": "Number"
                }
            ],
            "class": "HScrollBar"
        },
        {
            "file": "src/Position.ts",
            "line": 6,
            "itemtype": "property",
            "name": "row",
            "type": "number",
            "class": "Position"
        },
        {
            "file": "src/Position.ts",
            "line": 12,
            "itemtype": "property",
            "name": "column",
            "type": "number",
            "class": "Position"
        },
        {
            "file": "src/Range.ts",
            "line": 40,
            "itemtype": "property",
            "name": "start",
            "type": "Position",
            "class": "Range"
        },
        {
            "file": "src/Range.ts",
            "line": 46,
            "itemtype": "property",
            "name": "end",
            "type": "Position",
            "class": "Range"
        },
        {
            "file": "src/Range.ts",
            "line": 52,
            "description": "A marker id that is being sneaked onto the Range.",
            "class": "Range"
        },
        {
            "file": "src/Range.ts",
            "line": 82,
            "description": "Returns `true` if and only if the starting row and column, and ending row and column, are equivalent to those given by `range`.",
            "itemtype": "method",
            "name": "isEqual",
            "params": [
                {
                    "name": "range",
                    "description": "A range to check against.",
                    "type": "Range"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 96,
            "description": "Returns a string containing the range's row and column information.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 106,
            "description": "Returns `true` if the `row` and `column` provided are within the given range.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "row",
                    "description": "A row to check for",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "A column to check for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 118,
            "description": "Compares `this` range (A) with another range (B).",
            "itemtype": "method",
            "name": "compareRange",
            "params": [
                {
                    "name": "range",
                    "description": "A range to compare with",
                    "type": "Range"
                }
            ],
            "return": {
                "description": "This method returns one of the following numbers:<br/>\n<br/>\n* `-2`: (B) is in front of (A), and doesn't intersect with (A)<br/>\n* `-1`: (B) begins before (A) but ends inside of (A)<br/>\n* `0`: (B) is completely inside of (A) OR (A) is completely inside of (B)<br/>\n* `+1`: (B) begins inside of (A) but ends outside of (A)<br/>\n* `+2`: (B) is after (A) and doesn't intersect with (A)<br/>\n* `42`: FTW state: (B) ends in (A) but starts outside of (A)",
                "type": "Number"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 167,
            "description": "Checks the row and column points of `p` with the row and column points of the calling range.",
            "itemtype": "method",
            "name": "comparePoint",
            "params": [
                {
                    "name": "p",
                    "description": "A point to compare with",
                    "type": "Position"
                }
            ],
            "return": {
                "description": "This method returns one of the following numbers:<br/>\n* `0` if the two points are exactly equal<br/>\n* `-1` if `p.row` is less then the calling range<br/>\n* `1` if `p.row` is greater than the calling range<br/>\n<br/>\nIf the starting row of the calling range is equal to `p.row`, and:<br/>\n* `p.column` is greater than or equal to the calling range's starting column, this returns `0`<br/>\n* Otherwise, it returns -1<br/>\n<br/>\nIf the ending row of the calling range is equal to `p.row`, and:<br/>\n* `p.column` is less than or equal to the calling range's ending column, this returns `0`<br/>\n* Otherwise, it returns 1<br/>",
                "type": "Number"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 189,
            "description": "Checks the start and end points of `range` and compares them to the calling range.",
            "itemtype": "method",
            "name": "containsRange",
            "params": [
                {
                    "name": "range",
                    "description": "A range to compare with",
                    "type": "Range"
                }
            ],
            "return": {
                "description": "Returns `true` if the `range` is contained within the caller's range.",
                "type": "Boolean"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 200,
            "description": "Returns `true` if passed in `range` intersects with the one calling this method.",
            "params": [
                {
                    "name": "range",
                    "description": "A range to compare with",
                    "type": "EditorRange"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 211,
            "description": "Returns `true` if the caller's ending row point is the same as `row`, and if the caller's ending column is the same as `column`.",
            "params": [
                {
                    "name": "row",
                    "description": "A row point to compare with",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "A column point to compare with",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 222,
            "description": "Returns `true` if the caller's starting row point is the same as `row`, and if the caller's starting column is the same as `column`.",
            "params": [
                {
                    "name": "row",
                    "description": "A row point to compare with",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "A column point to compare with",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 233,
            "description": "Sets the starting row and column for the range.",
            "params": [
                {
                    "name": "row",
                    "description": "A row point to set",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "A column point to set",
                    "type": "Number"
                }
            ],
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 251,
            "description": "Sets the starting row and column for the range.",
            "params": [
                {
                    "name": "row",
                    "description": "A row point to set",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "A column point to set",
                    "type": "Number"
                }
            ],
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 269,
            "description": "Returns `true` if the `row` and `column` are within the given range.",
            "params": [
                {
                    "name": "row",
                    "description": "A row point to compare with",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "A column point to compare with",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "related": "EditorRange.compare",
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 290,
            "description": "Returns `true` if the `row` and `column` are within the given range's starting points.",
            "params": [
                {
                    "name": "row",
                    "description": "A row point to compare with",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "A column point to compare with",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "related": "EditorRange.compare",
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 310,
            "description": "Returns `true` if the `row` and `column` are within the given range's ending points.",
            "params": [
                {
                    "name": "row",
                    "description": "A row point to compare with",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "A column point to compare with",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "related": "EditorRange.compare",
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 331,
            "description": "Checks the row and column points with the row and column points of the calling range.",
            "params": [
                {
                    "name": "row",
                    "description": "A row point to compare with",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "A column point to compare with",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This method returns one of the following numbers:<br/>\n`0` if the two points are exactly equal <br/>\n`-1` if `p.row` is less then the calling range <br/>\n`1` if `p.row` is greater than the calling range <br/>\n <br/>\nIf the starting row of the calling range is equal to `p.row`, and: <br/>\n`p.column` is greater than or equal to the calling range's starting column, this returns `0`<br/>\nOtherwise, it returns -1<br/>\n<br/>\nIf the ending row of the calling range is equal to `p.row`, and: <br/>\n`p.column` is less than or equal to the calling range's ending column, this returns `0` <br/>\nOtherwise, it returns 1",
                "type": "Number"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 372,
            "description": "Checks the row and column points with the row and column points of the calling range.",
            "params": [
                {
                    "name": "row",
                    "description": "A row point to compare with",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "A column point to compare with",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This method returns one of the following numbers:<br/>\n<br/>\n`0` if the two points are exactly equal<br/>\n`-1` if `p.row` is less then the calling range<br/>\n`1` if `p.row` is greater than the calling range, or if `isStart` is `true`.<br/>\n<br/>\nIf the starting row of the calling range is equal to `p.row`, and:<br/>\n`p.column` is greater than or equal to the calling range's starting column, this returns `0`<br/>\nOtherwise, it returns -1<br/>\n<br/>\nIf the ending row of the calling range is equal to `p.row`, and:<br/>\n`p.column` is less than or equal to the calling range's ending column, this returns `0`<br/>\nOtherwise, it returns 1",
                "type": "Number"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 401,
            "description": "Checks the row and column points with the row and column points of the calling range.",
            "params": [
                {
                    "name": "row",
                    "description": "A row point to compare with",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "A column point to compare with",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This method returns one of the following numbers:<br/>\n`0` if the two points are exactly equal<br/>\n`-1` if `p.row` is less then the calling range<br/>\n`1` if `p.row` is greater than the calling range, or if `isEnd` is `true.<br/>\n<br/>\nIf the starting row of the calling range is equal to `p.row`, and:<br/>\n`p.column` is greater than or equal to the calling range's starting column, this returns `0`<br/>\nOtherwise, it returns -1<br/>\n<br/>\nIf the ending row of the calling range is equal to `p.row`, and:<br/>\n`p.column` is less than or equal to the calling range's ending column, this returns `0`<br/>\nOtherwise, it returns 1",
                "type": "Number"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 429,
            "description": "Checks the row and column points with the row and column points of the calling range.",
            "params": [
                {
                    "name": "row",
                    "description": "A row point to compare with",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "A column point to compare with",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "This method returns one of the following numbers:<br/>\n* `1` if the ending row of the calling range is equal to `row`, and the ending column of the calling range is equal to `column`<br/>\n* `-1` if the starting row of the calling range is equal to `row`, and the starting column of the calling range is equal to `column`<br/>\n<br/>\nOtherwise, it returns the value after calling [[EditorRange.compare `compare()`]].",
                "type": "Number"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 454,
            "description": "Returns the part of the current `EditorRange` that occurs within the boundaries of `firstRow` and `lastRow` as a new `EditorRange` object.",
            "params": [
                {
                    "name": "firstRow",
                    "description": "The starting row",
                    "type": "Number"
                },
                {
                    "name": "lastRow",
                    "description": "The ending row",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "EditorRange"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 476,
            "description": "Changes the row and column points for the calling range for both the starting and ending points.",
            "params": [
                {
                    "name": "row",
                    "description": "A new row to extend to",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "A new column to extend to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The original range with the new row",
                "type": "EditorRange"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 501,
            "description": "Returns `true` if the range spans across multiple lines.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 509,
            "description": "Returns a duplicate of the calling range.",
            "return": {
                "description": "",
                "type": "EditorRange"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 518,
            "description": "Returns a range containing the starting and ending rows of the original range, but with a column value of `0`.",
            "return": {
                "description": "",
                "type": "EditorRange"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/Range.ts",
            "line": 537,
            "description": "Creates and returns a new `EditorRange` based on the row and column of the given parameters.",
            "params": [
                {
                    "name": "start",
                    "description": "A starting point to use",
                    "type": "Position"
                },
                {
                    "name": "end",
                    "description": "An ending point to use",
                    "type": "Position"
                }
            ],
            "return": {
                "description": "",
                "type": "Range"
            },
            "class": "ScrollBar"
        },
        {
            "file": "src/RenderLoop.ts",
            "line": 3,
            "description": "Batches changes (that force something to be redrawn) in the background.",
            "class": "ScrollBar"
        },
        {
            "file": "src/ScrollBar.ts",
            "line": 69,
            "itemtype": "method",
            "name": "setVisible",
            "params": [
                {
                    "name": "isVisible",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "ScrollBar"
            },
            "class": "Search"
        },
        {
            "file": "src/Search.ts",
            "line": 62,
            "description": "Sets the search options via the `options` parameter.",
            "params": [
                {
                    "name": "options",
                    "description": "An object containing all the new search properties",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Search"
            },
            "chainable": 1,
            "class": "Search"
        },
        {
            "file": "src/Search.ts",
            "line": 75,
            "description": "[Returns an object containing all the search options.]{: #Search.getOptions}",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Search"
        },
        {
            "file": "src/Search.ts",
            "line": 83,
            "description": "Sets the search options via the `options` parameter.",
            "params": [
                {
                    "name": "An",
                    "description": "object containing all the search propertie",
                    "type": "Object"
                }
            ],
            "related": "Search.set",
            "class": "Search"
        },
        {
            "file": "src/Search.ts",
            "line": 92,
            "description": "Searches for `options.needle`. If found, this method returns the [[Range `Range`]] where the text first occurs. If `options.backwards` is `true`, the search goes backwards in the session.",
            "params": [
                {
                    "name": "session",
                    "description": "The session to search with",
                    "type": "EditSession"
                }
            ],
            "return": {
                "description": "",
                "type": "Range"
            },
            "class": "Search"
        },
        {
            "file": "src/Search.ts",
            "line": 119,
            "description": "Searches for all occurances `options.needle`. If found, this method returns an array of [[Range `Range`s]] where the text first occurs. If `options.backwards` is `true`, the search goes backwards in the session.",
            "params": [
                {
                    "name": "session",
                    "description": "The session to search with",
                    "type": "EditSession"
                }
            ],
            "return": {
                "description": "",
                "type": "[Range]"
            },
            "class": "Search"
        },
        {
            "file": "src/Search.ts",
            "line": 195,
            "description": "Searches for `options.needle` in `input`, and, if found, replaces it with `replacement`.",
            "params": [
                {
                    "name": "input",
                    "description": "The text to search in",
                    "type": "String"
                },
                {
                    "name": "replacement",
                    "description": "The replacing text\n+ (String): If `options.regExp` is `true`, this function returns `input` with the replacement already made. Otherwise, this function just returns `replacement`.<br/>\nIf `options.needle` was not found, this function returns `null`.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Search"
        },
        {
            "file": "src/Selection.ts",
            "line": 48,
            "description": "Emitted when the cursor position changes.",
            "itemtype": "event",
            "name": "changeCursor",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 53,
            "description": "Emitted when the cursor selection changes.",
            "itemtype": "event",
            "name": "changeSelection",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 58,
            "description": "Creates a new `Selection` object.",
            "params": [
                {
                    "name": "session",
                    "description": "The session to use",
                    "type": "EditSession"
                }
            ],
            "is_constructor": 1,
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 104,
            "description": "Returns `true` if the selection is empty.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 117,
            "description": "Returns `true` if the selection is a multi-line.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 129,
            "description": "Returns an object containing the `row` and `column` current position of the cursor.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 137,
            "description": "Sets the row and column position of the anchor. This function also emits the `'changeSelection'` event.",
            "params": [
                {
                    "name": "row",
                    "description": "The new row",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The new column",
                    "type": "Number"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 151,
            "description": "Returns an object containing the `row` and `column` of the calling selection anchor.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "related": "Anchor.getPosition",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 164,
            "description": "Returns an object containing the `row` and `column` of the calling selection lead.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 173,
            "description": "Shifts the selection up (or down, if [[Selection.isBackwards `isBackwards()`]] is true) the given number of columns.",
            "params": [
                {
                    "name": "columns",
                    "description": "The number of columns to shift by",
                    "type": "Number"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 201,
            "description": "Returns `true` if the selection is going backwards in the document.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 211,
            "description": "[Returns the [[Range]] for the selected text.]{: #Selection.getRange}",
            "return": {
                "description": "",
                "type": "Range"
            },
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 230,
            "description": "[Empties the selection (by de-selecting it). This function also emits the `'changeSelection'` event.]{: #Selection.clearSelection}",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 240,
            "description": "Selects all the text in the document.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 249,
            "description": "Sets the selection to the provided range.",
            "params": [
                {
                    "name": "range",
                    "description": "The range of text to select",
                    "type": "Range"
                },
                {
                    "name": "reverse",
                    "description": "Indicates if the range should go backwards (`true`) or not",
                    "type": "Boolean"
                }
            ],
            "itemtype": "method",
            "name": "setSelectionRange",
            "alias": "setRange",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 283,
            "description": "Moves the selection cursor to the indicated row and column.",
            "params": [
                {
                    "name": "row",
                    "description": "The row to select to",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The column to select to",
                    "type": "Number"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 297,
            "description": "Moves the selection cursor to the row and column indicated by `pos`.",
            "params": [
                {
                    "name": "pos",
                    "description": "An object containing the row and column",
                    "type": "Object"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 310,
            "description": "Moves the selection cursor to the indicated row and column.",
            "params": [
                {
                    "name": "row",
                    "description": "The row to select to",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The column to select to",
                    "type": "Number"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 321,
            "description": "Moves the selection cursor to the row and column indicated by `pos`.",
            "params": [
                {
                    "name": "pos",
                    "description": "An object containing the row and column",
                    "type": "Object"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 331,
            "description": "Moves the selection up one row.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 339,
            "description": "Moves the selection down one row.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 347,
            "description": "Moves the selection right one column.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 356,
            "description": "Moves the selection left one column.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 364,
            "description": "Moves the selection to the beginning of the current line.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 372,
            "description": "Moves the selection to the end of the current line.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 380,
            "description": "Moves the selection to the end of the file.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 388,
            "description": "Moves the selection to the start of the file.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 396,
            "description": "Moves the selection to the first word on the right.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 404,
            "description": "Moves the selection to the first word on the left.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 412,
            "description": "Moves the selection to highlight the entire word.",
            "related": "EditSession.getWordRange",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 425,
            "description": "Selects an entire word boundary.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 433,
            "description": "Selects a word, including its right whitespace.",
            "related": "EditSession.getAWordRange",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 464,
            "description": "Selects the entire line.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 471,
            "description": "Moves the cursor up one row.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 479,
            "description": "Moves the cursor down one row.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 487,
            "description": "Moves the cursor left one column.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 512,
            "description": "Moves the cursor right one column.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 539,
            "description": "Moves the cursor to the start of the line.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 565,
            "description": "Moves the cursor to the end of the line.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 584,
            "description": "Moves the cursor to the end of the file.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 594,
            "description": "Moves the cursor to the start of the file.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 602,
            "description": "Moves the cursor to the word on the right.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 648,
            "description": "Moves the cursor to the word on the left.",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 808,
            "description": "Moves the cursor to position indicated by the parameters. Negative numbers move the cursor backwards in the document.",
            "params": [
                {
                    "name": "rows",
                    "description": "The number of rows to move by",
                    "type": "Number"
                },
                {
                    "name": "chars",
                    "description": "The number of characters to move by",
                    "type": "Number"
                }
            ],
            "related": "EditSession.documentToScreenPosition",
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 840,
            "description": "Moves the selection to the position indicated by its `row` and `column`.",
            "params": [
                {
                    "name": "position",
                    "description": "The position to move to",
                    "type": "Object"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 850,
            "description": "Moves the cursor to the row and column provided. [If `preventUpdateDesiredColumn` is `true`, then the cursor stays in the same column position as its original point.]{: #preventUpdateBoolDesc}",
            "params": [
                {
                    "name": "row",
                    "description": "The row to move to",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The column to move to",
                    "type": "Number"
                },
                {
                    "name": "keepDesiredColumn",
                    "description": "[If `true`, the cursor move does not respect the previous column]{: #preventUpdateBool}",
                    "type": "Boolean"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 872,
            "description": "Moves the cursor to the screen position indicated by row and column. {:preventUpdateBoolDesc}",
            "params": [
                {
                    "name": "row",
                    "description": "The row to move to",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The column to move to",
                    "type": "Number"
                },
                {
                    "name": "keepDesiredColumn",
                    "description": "{:preventUpdateBool}",
                    "type": "Boolean"
                }
            ],
            "class": "Selection"
        },
        {
            "file": "src/Selection.ts",
            "line": 914,
            "description": "Saves the current cursor position and calls `func` that can change the cursor\npostion. The result is the range of the starting and eventual cursor position.\nWill reset the cursor position.",
            "params": [
                {
                    "name": "The",
                    "description": "callback that should change the cursor position",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Range"
            },
            "class": "Selection"
        },
        {
            "file": "src/TokenIterator.ts",
            "line": 39,
            "description": "Creates a new token iterator object. The inital token index is set to the provided row and column coordinates.",
            "params": [
                {
                    "name": "session",
                    "description": "The session to associate with",
                    "type": "EditSession"
                },
                {
                    "name": "initialRow",
                    "description": "The row to start the tokenizing at",
                    "type": "Number"
                },
                {
                    "name": "initialColumn",
                    "description": "The column to start the tokenizing at",
                    "type": "Number"
                }
            ],
            "is_constructor": 1,
            "class": "TokenIterator"
        },
        {
            "file": "src/TokenIterator.ts",
            "line": 62,
            "description": "Tokenizes all the items from the current point to the row prior in the document.",
            "return": {
                "description": "If the current point is not at the top of the file, this function returns `null`. Otherwise, it returns an array of the tokenized strings.",
                "type": "[String]"
            },
            "class": "TokenIterator"
        },
        {
            "file": "src/TokenIterator.ts",
            "line": 84,
            "description": "Tokenizes all the items from the current point until the next row in the document. If the current point is at the end of the file, this function returns `null`. Otherwise, it returns the tokenized string.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "TokenIterator"
        },
        {
            "file": "src/TokenIterator.ts",
            "line": 108,
            "description": "Returns the current tokenized string.",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "TokenIterator"
        },
        {
            "file": "src/TokenIterator.ts",
            "line": 117,
            "description": "Returns the current row.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "TokenIterator"
        },
        {
            "file": "src/TokenIterator.ts",
            "line": 126,
            "description": "Returns the current column.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "TokenIterator"
        },
        {
            "file": "src/Tokenizer.ts",
            "line": 38,
            "description": "Constructs a new tokenizer based on the given rules and flags.",
            "params": [
                {
                    "name": "rules",
                    "description": "The highlighting rules",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "class": "Tokenizer"
        },
        {
            "file": "src/Tokenizer.ts",
            "line": 224,
            "description": "Returns an object containing two properties: `tokens`, which contains all the tokens; and `state`, the current state.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Tokenizer"
        },
        {
            "file": "src/Tooltip.ts",
            "line": 36,
            "itemtype": "property",
            "name": "isOpen",
            "type": "{boolean}",
            "defualt": "false",
            "class": "Tooltip"
        },
        {
            "file": "src/Tooltip.ts",
            "line": 55,
            "description": "This internal method is called (lazily) once through the `getElement` method.\nIt creates the $element member.",
            "itemtype": "method",
            "name": "$init",
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "access": "private",
            "tagname": "",
            "class": "Tooltip"
        },
        {
            "file": "src/Tooltip.ts",
            "line": 70,
            "description": "Provides the HTML div element.",
            "itemtype": "method",
            "name": "getElement",
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "class": "Tooltip"
        },
        {
            "file": "src/Tooltip.ts",
            "line": 79,
            "description": "Use the dom method `setInnerText`",
            "itemtype": "method",
            "name": "setText",
            "params": [
                {
                    "name": "text",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tooltip"
        },
        {
            "file": "src/Tooltip.ts",
            "line": 89,
            "description": "Sets the `innerHTML` property on the div element.",
            "itemtype": "method",
            "name": "setHtml",
            "params": [
                {
                    "name": "html",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tooltip"
        },
        {
            "file": "src/Tooltip.ts",
            "line": 99,
            "description": "Sets the `left` and `top` CSS style properties.\nThis action can also happen during the `show` method.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "left",
                    "description": "The style 'left' value in pixels.",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "The style 'top' value in pixels.",
                    "type": "Number"
                }
            ],
            "class": "Tooltip"
        },
        {
            "file": "src/Tooltip.ts",
            "line": 112,
            "description": "Adds a CSS class to the underlying tooltip div element using the dom method `addCssClass`",
            "itemtype": "method",
            "name": "setClassName",
            "params": [
                {
                    "name": "className",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tooltip"
        },
        {
            "file": "src/Tooltip.ts",
            "line": 122,
            "description": "Shows the tool by setting the CSS display property to 'block'.\nThe text parameter is optional, but if provided sets HTML.\nFIXME: Remove the text parameter in favor of explicit pre-setting.\nFIXME: Remove left and top too.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "string",
                    "description": "text",
                    "optional": true
                },
                {
                    "name": "number",
                    "description": "left",
                    "optional": true
                },
                {
                    "name": "number",
                    "description": "top",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tooltip"
        },
        {
            "file": "src/Tooltip.ts",
            "line": 146,
            "description": "Hides the tool by setting the CSS display property to 'none'.",
            "itemtype": "method",
            "name": "hide",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tooltip"
        },
        {
            "file": "src/Tooltip.ts",
            "line": 158,
            "description": "Returns the `offsetHeight` property of the div element.",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Tooltip"
        },
        {
            "file": "src/Tooltip.ts",
            "line": 167,
            "description": "Returns the `offsetWidth` property of the div element.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Tooltip"
        },
        {
            "file": "src/UndoManager.ts",
            "line": 40,
            "itemtype": "property",
            "name": "_editSession",
            "type": "EditSession",
            "access": "private",
            "tagname": "",
            "class": "UndoManager"
        },
        {
            "file": "src/UndoManager.ts",
            "line": 47,
            "itemtype": "property",
            "name": "_dirtyCounter",
            "type": "number",
            "access": "private",
            "tagname": "",
            "class": "UndoManager"
        },
        {
            "file": "src/UndoManager.ts",
            "line": 68,
            "description": "Provides a means for implementing your own undo manager. `options` has one property, `args`, an [[Array `Array`]], with two elements:\n\n- `args[0]` is an array of deltas\n- `args[1]` is the document to associate with",
            "params": [
                {
                    "name": "options",
                    "description": "Contains additional properties",
                    "type": "Object"
                }
            ],
            "class": "UndoManager"
        },
        {
            "file": "src/UndoManager.ts",
            "line": 95,
            "description": "Perform an undo operation on the document, reverting the last change.",
            "itemtype": "method",
            "name": "undo",
            "params": [
                {
                    "name": "dontSelect",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The range of the undo.",
                "type": "Range"
            },
            "class": "UndoManager"
        },
        {
            "file": "src/UndoManager.ts",
            "line": 113,
            "description": "Perform a redo operation on the document, reimplementing the last change.",
            "itemtype": "method",
            "name": "redo",
            "params": [
                {
                    "name": "dontSelect",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "The range of the redo.",
                "type": "Range"
            },
            "class": "UndoManager"
        },
        {
            "file": "src/UndoManager.ts",
            "line": 130,
            "description": "Destroys the stack of undo and redo redo operations and marks the manager as clean.",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "UndoManager"
        },
        {
            "file": "src/UndoManager.ts",
            "line": 142,
            "description": "Returns `true` if there are undo operations left to perform.",
            "itemtype": "method",
            "name": "hasUndo",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "UndoManager"
        },
        {
            "file": "src/UndoManager.ts",
            "line": 152,
            "description": "Returns `true` if there are redo operations left to perform.",
            "itemtype": "method",
            "name": "hasRedo",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "UndoManager"
        },
        {
            "file": "src/UndoManager.ts",
            "line": 162,
            "description": "Marks the current status clean.",
            "itemtype": "method",
            "name": "markClean",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "UndoManager"
        },
        {
            "file": "src/UndoManager.ts",
            "line": 172,
            "description": "Determines whether the current status is clean.",
            "itemtype": "method",
            "name": "isClean",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "UndoManager"
        },
        {
            "file": "src/VScrollBar.ts",
            "line": 14,
            "description": "Creates a new `VScrollBar`. `parent` is the owner of the scroll bar.",
            "params": [
                {
                    "name": "parent",
                    "description": "A DOM element",
                    "type": "DOMElement"
                },
                {
                    "name": "renderer",
                    "description": "An editor renderer",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "class": "VScrollBar"
        },
        {
            "file": "src/VScrollBar.ts",
            "line": 33,
            "description": "Emitted when the scroll bar, well, scrolls.",
            "itemtype": "event",
            "name": "scroll",
            "params": [
                {
                    "name": "e",
                    "description": "Contains one property, `\"data\"`, which indicates the current scroll top position",
                    "type": "Object"
                }
            ],
            "class": "VScrollBar"
        },
        {
            "file": "src/VScrollBar.ts",
            "line": 46,
            "description": "Returns the width of the scroll bar.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "VScrollBar"
        },
        {
            "file": "src/VScrollBar.ts",
            "line": 54,
            "description": "Sets the height of the scroll bar, in pixels.",
            "params": [
                {
                    "name": "height",
                    "description": "The new height",
                    "type": "Number"
                }
            ],
            "class": "VScrollBar"
        },
        {
            "file": "src/VScrollBar.ts",
            "line": 62,
            "description": "Sets the inner height of the scroll bar, in pixels.",
            "params": [
                {
                    "name": "height",
                    "description": "The new inner height",
                    "type": "Number"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "Use setScrollHeight instead",
            "class": "VScrollBar"
        },
        {
            "file": "src/VScrollBar.ts",
            "line": 71,
            "description": "Sets the scroll height of the scroll bar, in pixels.",
            "params": [
                {
                    "name": "height",
                    "description": "The new scroll height",
                    "type": "Number"
                }
            ],
            "class": "VScrollBar"
        },
        {
            "file": "src/VScrollBar.ts",
            "line": 79,
            "description": "Sets the scroll top of the scroll bar.",
            "params": [
                {
                    "name": "scrollTop",
                    "description": "The new scroll top",
                    "type": "Number"
                }
            ],
            "class": "VScrollBar"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 96,
            "description": "The loaded theme object. This allows us to remove a theme.",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 251,
            "itemtype": "property",
            "name": "maxLines",
            "type": "number",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 259,
            "itemtype": "property",
            "name": "keepTextAreaAtCursor",
            "type": "boolean",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 267,
            "description": "Sets the <code>style</code> property of the content to \"default\".",
            "itemtype": "method",
            "name": "setDefaultCursorStyle",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 277,
            "description": "Sets the <code>opacity</code> of the cursor layer to \"0\".",
            "itemtype": "method",
            "name": "setCursorLayerOff",
            "return": {
                "description": "",
                "type": "VirtualRenderer"
            },
            "chainable": 1,
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 291,
            "itemtype": "method",
            "name": "updateCharacterSize",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 307,
            "description": "Associates the renderer with a different EditSession.",
            "itemtype": "method",
            "name": "setSession",
            "params": [
                {
                    "name": "session",
                    "description": "",
                    "type": "EditSession"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 341,
            "description": "Triggers a partial update of the text, from the range given by the two parameters.",
            "params": [
                {
                    "name": "firstRow",
                    "description": "The first row to update.",
                    "type": "Number"
                },
                {
                    "name": "lastRow",
                    "description": "The last row to update.",
                    "type": "Number"
                },
                {
                    "name": "force",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 413,
            "description": "Triggers a full update of the text, for all the rows.",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 420,
            "description": "Triggers a full update of all the layers, for all the rows.",
            "params": [
                {
                    "name": "force",
                    "description": "If `true`, forces the changes through",
                    "type": "Boolean"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 431,
            "description": "Updates the font size.",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 447,
            "description": "[Triggers a resize of the editor.]{: #VirtualRenderer.onResize}",
            "params": [
                {
                    "name": "force",
                    "description": "If `true`, recomputes the size, even if the height and width haven't changed",
                    "type": "Boolean"
                },
                {
                    "name": "gutterWidth",
                    "description": "The width of the gutter in pixels",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The width of the editor in pixels",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The hiehgt of the editor, in pixels",
                    "type": "Number"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 553,
            "description": "Adjusts the wrap limit, which is the number of characters that can fit within the width of the edit area on screen.",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 562,
            "description": "Identifies whether you want to have an animated scroll or not.",
            "itemtype": "method",
            "name": "setAnimatedScroll",
            "params": [
                {
                    "name": "shouldAnimate",
                    "description": "Set to `true` to show animated scrolls.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 573,
            "description": "Returns whether an animated scroll happens or not.",
            "itemtype": "method",
            "name": "getAnimatedScroll",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 583,
            "description": "Identifies whether you want to show invisible characters or not.",
            "params": [
                {
                    "name": "showInvisibles",
                    "description": "Set to `true` to show invisibles",
                    "type": "Boolean"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 591,
            "description": "Returns whether invisible characters are being shown or not.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 607,
            "description": "Identifies whether you want to show the print margin or not.",
            "params": [
                {
                    "name": "showPrintMargin",
                    "description": "Set to `true` to show the print margin",
                    "type": "Boolean"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 616,
            "description": "Returns whether the print margin is being shown or not.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 624,
            "description": "Sets the column defining where the print margin should be.",
            "params": [
                {
                    "name": "printMarginColumn",
                    "description": "Specifies the new print margin",
                    "type": "Number"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 632,
            "description": "Returns the column number of where the print margin is.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 640,
            "description": "Returns `true` if the gutter is being shown.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 648,
            "description": "Identifies whether you want to show the gutter or not.",
            "params": [
                {
                    "name": "show",
                    "description": "Set to `true` to show the gutter",
                    "type": "Boolean"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 707,
            "description": "Returns the root element containing this renderer.",
            "return": {
                "description": "",
                "type": "DOMElement"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 716,
            "description": "Returns the element that the mouse events are attached to",
            "return": {
                "description": "",
                "type": "DOMElement"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 725,
            "description": "Returns the element to which the hidden text area is added.",
            "return": {
                "description": "",
                "type": "DOMElement"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 767,
            "description": "[Returns the index of the first visible row.]{: #VirtualRenderer.getFirstVisibleRow}",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 776,
            "description": "Returns the index of the first fully visible row. \"Fully\" here means that the characters in the row are not truncated; that the top and the bottom of the row are on the screen.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 785,
            "description": "Returns the index of the last fully visible row. \"Fully\" here means that the characters in the row are not truncated; that the top and the bottom of the row are on the screen.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 795,
            "description": "[Returns the index of the last visible row.]{: #VirtualRenderer.getLastVisibleRow}",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 804,
            "description": "Sets the padding for all the layers.",
            "params": [
                {
                    "name": "padding",
                    "description": "A new padding value (in pixels)",
                    "type": "Number"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 831,
            "description": "Returns whether the horizontal scrollbar is set to be always visible.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 840,
            "description": "Identifies whether you want to show the horizontal scrollbar or not.",
            "params": [
                {
                    "name": "alwaysVisible",
                    "description": "Set to `true` to make the horizontal scroll bar visible",
                    "type": "Boolean"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 848,
            "description": "Returns whether the vertical scrollbar is set to be always visible.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 856,
            "description": "Identifies whether you want to show the vertical scrollbar or not.",
            "params": [
                {
                    "name": "alwaysVisible",
                    "description": "Set to `true` to make the vertical scroll bar visible",
                    "type": "Boolean"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1164,
            "description": "Schedules an update to all the front markers in the document.",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1173,
            "description": "Schedules an update to all the back markers in the document.",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1182,
            "description": "Redraw breakpoints.",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1190,
            "description": "Sets annotations for the gutter.",
            "params": [
                {
                    "name": "annotations",
                    "description": "An array containing annotations",
                    "type": "Array"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1200,
            "description": "Updates the cursor icon.",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1208,
            "description": "Hides the cursor icon.",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1216,
            "description": "Shows the cursor icon.",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1230,
            "description": "Scrolls the cursor into the first visibile area of the editor",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1277,
            "description": "{:EditSession.getScrollTop}",
            "related": "EditSession.getScrollTop",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1286,
            "description": "{:EditSession.getScrollLeft}",
            "related": "EditSession.getScrollLeft",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1295,
            "description": "Returns the first visible row, regardless of whether it's fully visible or not.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1304,
            "description": "Returns the last visible row, regardless of whether it's fully visible or not.",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1313,
            "description": "Gracefully scrolls from the top of the editor to the row indicated.",
            "params": [
                {
                    "name": "row",
                    "description": "A row id",
                    "type": "Number"
                }
            ],
            "related": "EditSession.setScrollTop",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1352,
            "description": "Gracefully scrolls the editor to the row indicated.",
            "params": [
                {
                    "name": "line",
                    "description": "A line number",
                    "type": "Number"
                },
                {
                    "name": "center",
                    "description": "If `true`, centers the editor the to indicated line",
                    "type": "Boolean"
                },
                {
                    "name": "animate",
                    "description": "If `true` animates scrolling",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "Function to be called after the animation has finished",
                    "type": "Function"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1417,
            "description": "Scrolls the editor to the y pixel indicated.",
            "params": [
                {
                    "name": "scrollTop",
                    "description": "The position to scroll to",
                    "type": "Number"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1430,
            "description": "Scrolls the editor across the x-axis to the pixel indicated.",
            "params": [
                {
                    "name": "scrollLeft",
                    "description": "The position to scroll to",
                    "type": "Number"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1441,
            "description": "Scrolls the editor across both x- and y-axes.",
            "params": [
                {
                    "name": "x",
                    "description": "The x value to scroll to",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y value to scroll to",
                    "type": "Number"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1451,
            "description": "Scrolls the editor across both x- and y-axes.",
            "params": [
                {
                    "name": "deltaX",
                    "description": "The x value to scroll by",
                    "type": "Number"
                },
                {
                    "name": "deltaY",
                    "description": "The y value to scroll by",
                    "type": "Number"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1461,
            "description": "Returns `true` if you can still scroll by either parameter; in other words, you haven't reached the end of the file or line.",
            "params": [
                {
                    "name": "deltaX",
                    "description": "The x value to scroll by",
                    "type": "Number"
                },
                {
                    "name": "deltaY",
                    "description": "The y value to scroll by",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1502,
            "description": "Returns an object containing the `pageX` and `pageY` coordinates of the document position.",
            "params": [
                {
                    "name": "row",
                    "description": "The document row position",
                    "type": "Number"
                },
                {
                    "name": "column",
                    "description": "The document column position",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1521,
            "description": "Focuses the current container.",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1529,
            "description": "Blurs the current container.",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1537,
            "itemtype": "method",
            "name": "showComposition",
            "params": [
                {
                    "name": "position",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1555,
            "params": [
                {
                    "name": "text",
                    "description": "A string of text to use\n\nSets the inner text of the current composition to `text`.",
                    "type": "String"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1565,
            "description": "Hides the current composition.",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1579,
            "description": "Sets a new theme for the editor.\n`theme` should exist, and be a directory path, like `ace/theme/textmate`.",
            "itemtype": "method",
            "name": "setTheme",
            "params": [
                {
                    "name": "theme",
                    "description": "theme The path to a theme",
                    "type": "String"
                },
                {
                    "name": "theme",
                    "description": "cb optional callback",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1642,
            "description": "Returns the path of the current theme.",
            "itemtype": "method",
            "name": "getTheme",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1656,
            "description": "[Adds a new class, `style`, to the editor.]{: #VirtualRenderer.setStyle}",
            "params": [
                {
                    "name": "style",
                    "description": "A class name",
                    "type": "String"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1665,
            "description": "[Removes the class `style` from the editor.]{: #VirtualRenderer.unsetStyle}",
            "params": [
                {
                    "name": "style",
                    "description": "A class name",
                    "type": "String"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1679,
            "params": [
                {
                    "name": "cursorStyle",
                    "description": "A css cursor style",
                    "type": "String"
                }
            ],
            "class": "VirtualRenderer"
        },
        {
            "file": "src/VirtualRenderer.ts",
            "line": 1686,
            "description": "Destroys the text and cursor layers for this renderer.",
            "class": "VirtualRenderer"
        },
        {
            "file": "src/autocomplete.ts",
            "line": 103,
            "description": "Implementation of the Completer interface.",
            "class": ""
        },
        {
            "file": "src/autocomplete.ts",
            "line": 142,
            "description": "Implementation of the Completer interface.",
            "class": ""
        },
        {
            "file": "src/autocomplete.ts",
            "line": 164,
            "description": "Implementation of the Completer interface.",
            "class": ""
        },
        {
            "file": "src/autocomplete.ts",
            "line": 181,
            "description": "Implementation of the Completer interface.",
            "class": ""
        },
        {
            "file": "src/config.ts",
            "line": 53,
            "class": ""
        },
        {
            "file": "src/config.ts",
            "line": 92,
            "description": "A map from module name to an array of callbacks.",
            "class": ""
        },
        {
            "file": "src/config.ts",
            "line": 157,
            "description": "Who calls this function?",
            "class": ""
        },
        {
            "file": "src/range_list.ts",
            "line": 95,
            "description": "merge overlapping ranges",
            "class": ""
        },
        {
            "file": "src/typeInfoTip.ts",
            "line": 4,
            "description": "The User Interface element leverages the existing Tooltip for consistency.",
            "class": ""
        },
        {
            "file": "src/typeInfoTip.ts",
            "line": 29,
            "description": "Gets the Position based on mouse x,y coordinates",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: memberof",
            "line": " src/hammer/recognizers/attribute.ts:28"
        },
        {
            "message": "unknown tag: memberof",
            "line": " src/hammer/recognizers/attribute.ts:58"
        },
        {
            "message": "unknown tag: virtual",
            "line": " src/hammer/hammer.ts:628"
        },
        {
            "message": "unknown tag: this",
            "line": " src/hammer/hammer.ts:906"
        },
        {
            "message": "unknown tag: virtual",
            "line": " src/hammer/hammer.ts:1190"
        },
        {
            "message": "unknown tag: virtual",
            "line": " src/hammer/hammer.ts:1201"
        },
        {
            "message": "unknown tag: virtual",
            "line": " src/hammer/hammer.ts:1208"
        },
        {
            "message": "unknown tag: license",
            "line": " src/lib/net.ts:1"
        },
        {
            "message": "unknown tag: version",
            "line": " src/mode/html/Comment.ts:4"
        },
        {
            "message": "unknown tag: version",
            "line": " src/mode/html/Document.ts:6"
        },
        {
            "message": "unknown tag: version",
            "line": " src/mode/html/Element.ts:11"
        },
        {
            "message": "unknown tag: version",
            "line": " src/mode/html/Node.ts:7"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/mode/javascript/jshint.ts:1357"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/mode/javascript/jshint.ts:2832"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/mode/javascript/jshint.ts:2975"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/mode/javascript/jshint.ts:4885"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/mode/javascript/jshint.ts:4898"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/mode/javascript/name-stack.ts:38"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/mode/javascript/scope-manager.ts:181"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/mode/javascript/scope-manager.ts:552"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/mode/javascript/scope-manager.ts:577"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/mode/javascript/scope-manager.ts:722"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/mode/javascript/scope-manager.ts:748"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/mode/javascript/scope-manager.ts:791"
        },
        {
            "message": "unknown tag: alias",
            "line": " src/EditSession.ts:356"
        },
        {
            "message": "unknown tag: alias",
            "line": " src/EditSession.ts:367"
        },
        {
            "message": "unknown tag: related",
            "line": " src/EditSession.ts:914"
        },
        {
            "message": "unknown tag: related",
            "line": " src/EditSession.ts:925"
        },
        {
            "message": "unknown tag: related",
            "line": " src/EditSession.ts:1236"
        },
        {
            "message": "unknown tag: related",
            "line": " src/EditSession.ts:1532"
        },
        {
            "message": "unknown tag: related",
            "line": " src/EditSession.ts:1545"
        },
        {
            "message": "unknown tag: related",
            "line": " src/EditSession.ts:2165"
        },
        {
            "message": "unknown tag: methos",
            "line": " src/EditSession.ts:2212"
        },
        {
            "message": "unknown tag: related",
            "line": " src/EditSession.ts:2324"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:505"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:529"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:566"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:576"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:586"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:1145"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:1156"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:1165"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:1565"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:1607"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:1616"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:1735"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:1771"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:1783"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:1794"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:1821"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:1903"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:1913"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2028"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2036"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2062"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2084"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2093"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2103"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2111"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2123"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2322"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2530"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2539"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2586"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2599"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2623"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Editor.ts:2634"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Range.ts:269"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Range.ts:290"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Range.ts:310"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Search.ts:83"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Selection.ts:151"
        },
        {
            "message": "unknown tag: alias",
            "line": " src/Selection.ts:249"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Selection.ts:412"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Selection.ts:433"
        },
        {
            "message": "unknown tag: related",
            "line": " src/Selection.ts:808"
        },
        {
            "message": "unknown tag: defualt",
            "line": " src/Tooltip.ts:36"
        },
        {
            "message": "unknown tag: related",
            "line": " src/VirtualRenderer.ts:62"
        },
        {
            "message": "unknown tag: related",
            "line": " src/VirtualRenderer.ts:1277"
        },
        {
            "message": "unknown tag: related",
            "line": " src/VirtualRenderer.ts:1286"
        },
        {
            "message": "unknown tag: related",
            "line": " src/VirtualRenderer.ts:1313"
        },
        {
            "message": "Missing item type",
            "line": " src/autocomplete/popup.ts:233"
        },
        {
            "message": "Missing item type\nDoes a distance analysis of the word `prefix` at position `pos` in `doc`.",
            "line": " src/autocomplete/text_completer.ts:34"
        },
        {
            "message": "Missing item type\nThis textual completer is rather dumb.",
            "line": " src/autocomplete/text_completer.ts:66"
        },
        {
            "message": "Missing item type",
            "line": " src/commands/CommandManager.ts:16"
        },
        {
            "message": "Missing item type\nUtility service fo",
            "line": " src/edit_session/BracketMatch.ts:35"
        },
        {
            "message": "Missing item type\nMaps an opening(closing) bracket string to the corresponding closing(opening) bracket.",
            "line": " src/edit_session/BracketMatch.ts:39"
        },
        {
            "message": "Missing item type\nEnable live autocomplete. If the value is an array, it is assumed to be an array of completers\nand will use them instead of the default completers.",
            "line": " src/ext/language_tools.ts:185"
        },
        {
            "message": "Missing item type\nThis recognizer is just used as a base for the simple attribute recognizers.",
            "line": " src/hammer/recognizers/attribute.ts:18"
        },
        {
            "message": "Missing item type\nUsed to check if the recognizer receives valid input, like input.distance > 10.",
            "line": " src/hammer/recognizers/attribute.ts:28"
        },
        {
            "message": "Missing item type\nProcess the input and return the state for the recognizer",
            "line": " src/hammer/recognizers/attribute.ts:58"
        },
        {
            "message": "Missing item type",
            "line": " src/hammer/recognizers/pan.ts:18"
        },
        {
            "message": "Missing item type\nPinch\nRecognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).",
            "line": " src/hammer/recognizers/pinch.ts:4"
        },
        {
            "message": "Missing item type\nPress\nRecognized when the pointer is down for x ms without any movement.",
            "line": " src/hammer/recognizers/press.ts:19"
        },
        {
            "message": "Missing item type\nRotate\nRecognized when two or more pointer are moving in a circular motion.",
            "line": " src/hammer/recognizers/rotate.ts:4"
        },
        {
            "message": "Missing item type\nSwipe\nRecognized when the pointer is moving fast enough in the allowed direction.",
            "line": " src/hammer/recognizers/swipe.ts:10"
        },
        {
            "message": "Missing item type\nMaintains the history of events for a gesture recognition.",
            "line": " src/hammer/hammer.ts:93"
        },
        {
            "message": "Missing item type\nThe contract for what the Manager requires from a Recognizer.",
            "line": " src/hammer/hammer.ts:143"
        },
        {
            "message": "Missing item type\nManager",
            "line": " src/hammer/hammer.ts:177"
        },
        {
            "message": "Missing item type\nstop recognizing for this session.\nThis session will be discarded, when a new [input]start event is fired.\nWhen forced, the recognizer cycle is stopped immediately.",
            "line": " src/hammer/hammer.ts:190"
        },
        {
            "message": "Missing item type\nrun the recognizers!\ncalled by the inputHandler function on every movement of the pointers (touches)\nit walks through all the recognizers and tries to detect the gesture that is being made",
            "line": " src/hammer/hammer.ts:200"
        },
        {
            "message": "Missing item type\nget a recognizer by its event name.",
            "line": " src/hammer/hammer.ts:258"
        },
        {
            "message": "Missing item type\nadd a recognizer to the manager\nexisting recognizers with the same event name will be removed",
            "line": " src/hammer/hammer.ts:271"
        },
        {
            "message": "Missing item type\nremove a recognizer by name or instance",
            "line": " src/hammer/hammer.ts:289"
        },
        {
            "message": "Missing item type\nbind event",
            "line": " src/hammer/hammer.ts:303"
        },
        {
            "message": "Missing item type\nunbind event, leave emit blank to remove all handlers",
            "line": " src/hammer/hammer.ts:318"
        },
        {
            "message": "Missing item type\nemit event to the listeners",
            "line": " src/hammer/hammer.ts:337"
        },
        {
            "message": "Missing item type\ndestroy the manager and unbinds all events\nit doesn't unbind dom events, that is the user own responsibility",
            "line": " src/hammer/hammer.ts:373"
        },
        {
            "message": "Missing item type\ntrigger dom event",
            "line": " src/hammer/hammer.ts:400"
        },
        {
            "message": "Missing item type\nTouch Action\nsets the touchAction property or uses the js alternative",
            "line": " src/hammer/hammer.ts:425"
        },
        {
            "message": "Missing item type\nset the touchAction value on the element or enable the polyfill",
            "line": " src/hammer/hammer.ts:436"
        },
        {
            "message": "Missing item type\njust re-set the touchAction value",
            "line": " src/hammer/hammer.ts:452"
        },
        {
            "message": "Missing item type\ncompute the value for the touchAction property based on the recognizer's settings",
            "line": " src/hammer/hammer.ts:459"
        },
        {
            "message": "Missing item type\nthis method is called on each input cycle and provides the preventing of the browser behavior",
            "line": " src/hammer/hammer.ts:474"
        },
        {
            "message": "Missing item type\ncall preventDefault to prevent the browser's default behavior (scrolling in most cases)",
            "line": " src/hammer/hammer.ts:504"
        },
        {
            "message": "Missing item type\nwhen the touchActions are collected they are not a valid value, so we need to clean things up. *",
            "line": " src/hammer/hammer.ts:514"
        },
        {
            "message": "Missing item type\ncreate new input type manager",
            "line": " src/hammer/hammer.ts:599"
        },
        {
            "message": "Missing item type\nshould handle the inputEvent data and trigger the callback",
            "line": " src/hammer/hammer.ts:628"
        },
        {
            "message": "Missing item type\nbind the events",
            "line": " src/hammer/hammer.ts:634"
        },
        {
            "message": "Missing item type\nunbind the events",
            "line": " src/hammer/hammer.ts:643"
        },
        {
            "message": "Missing item type\nhandle input events",
            "line": " src/hammer/hammer.ts:653"
        },
        {
            "message": "Missing item type\nextend the data with some usable properties like scale, rotate, velocity etc",
            "line": " src/hammer/hammer.ts:668"
        },
        {
            "message": "Missing item type\nget the center of all the pointers",
            "line": " src/hammer/hammer.ts:752"
        },
        {
            "message": "Missing item type\ncalculate the velocity between two points. unit is in px per ms.",
            "line": " src/hammer/hammer.ts:776"
        },
        {
            "message": "Missing item type\nget the direction between two points",
            "line": " src/hammer/hammer.ts:787"
        },
        {
            "message": "Missing item type\ncalculate the absolute distance between two points",
            "line": " src/hammer/hammer.ts:823"
        },
        {
            "message": "Missing item type\ncalculate the angle between two coordinates",
            "line": " src/hammer/hammer.ts:840"
        },
        {
            "message": "Missing item type\ncalculate the rotation degrees between two pointersets",
            "line": " src/hammer/hammer.ts:856"
        },
        {
            "message": "Missing item type\ncalculate the scale factor between two pointersets\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "line": " src/hammer/hammer.ts:866"
        },
        {
            "message": "Missing item type\nMulti-user touch events input",
            "line": " src/hammer/hammer.ts:889"
        },
        {
            "message": "Missing item type",
            "line": " src/hammer/hammer.ts:906"
        },
        {
            "message": "Missing item type\nRecognizer flow explained; *\nAll recognizers have the initial state of POSSIBLE when a input session starts.\nThe definition of a input session is from the first input until the last input, with all it's movement in it. *\nExample session for mouse-input: mousedown -> mousemove -> mouseup\n\nOn each recognizing cycle (see Manager.recognize) the .recognize() method is executed\nwhich determines with state it should be.\n\nIf the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\nPOSSIBLE to give it another change on the next cycle.\n\n              Possible\n                 |\n           +-----+---------------+\n           |                     |\n     +-----+-----+               |\n     |           |               |\n  Failed      Cancelled          |\n                         +-------+------+\n                         |              |\n                     Recognized       Began\n                                        |\n                                     Changed\n                                        |\n                                    Recognized",
            "line": " src/hammer/hammer.ts:967"
        },
        {
            "message": "Missing item type\nRecognizer\nEvery recognizer needs to extend from this class.",
            "line": " src/hammer/hammer.ts:1010"
        },
        {
            "message": "Missing item type\nrecognize simultaneous with an other recognizer.",
            "line": " src/hammer/hammer.ts:1036"
        },
        {
            "message": "Missing item type\ndrop the simultaneous link. it doesnt remove the link on the other recognizer.",
            "line": " src/hammer/hammer.ts:1051"
        },
        {
            "message": "Missing item type\nrecognizer can only run when an other is failing",
            "line": " src/hammer/hammer.ts:1062"
        },
        {
            "message": "Missing item type\ndrop the requireFailure link. it does not remove the link on the other recognizer.",
            "line": " src/hammer/hammer.ts:1075"
        },
        {
            "message": "Missing item type\nhas require failures boolean",
            "line": " src/hammer/hammer.ts:1089"
        },
        {
            "message": "Missing item type\nif the recognizer can recognize simultaneous with an other recognizer",
            "line": " src/hammer/hammer.ts:1097"
        },
        {
            "message": "Missing item type\nYou should use `tryEmit` instead of `emit` directly to check\nthat all the needed recognizers has failed before emitting.",
            "line": " src/hammer/hammer.ts:1106"
        },
        {
            "message": "Missing item type\nCheck that all the require failure recognizers has failed,\nif true, it emits a gesture event,\notherwise, setup the state to FAILED.",
            "line": " src/hammer/hammer.ts:1134"
        },
        {
            "message": "Missing item type\ncan we emit?",
            "line": " src/hammer/hammer.ts:1150"
        },
        {
            "message": "Missing item type\nupdate the recognizer",
            "line": " src/hammer/hammer.ts:1165"
        },
        {
            "message": "Missing item type\nreturn the state of the recognizer\nthe actual recognizing happens in this method",
            "line": " src/hammer/hammer.ts:1190"
        },
        {
            "message": "Missing item type\nreturn the preferred touch-action",
            "line": " src/hammer/hammer.ts:1201"
        },
        {
            "message": "Missing item type\ncalled when the gesture isn't allowed to recognize\nlike when another is being recognized or it is disabled",
            "line": " src/hammer/hammer.ts:1208"
        },
        {
            "message": "Missing item type\nTODO: Are the string values part of the API, or just for debugging?\nget a usable string, used as event postfix",
            "line": " src/hammer/hammer.ts:1216"
        },
        {
            "message": "Missing item type\nProvide a decode of the state.\nThe result is not normative and should not be considered API.\nSine the state is a bit field, show all bits even though they may/should be exclusive.",
            "line": " src/hammer/hammer.ts:1238"
        },
        {
            "message": "Missing item type\nTODO: This really belongs in the input service.\ndirection cons to string",
            "line": " src/hammer/hammer.ts:1272"
        },
        {
            "message": "Missing item type\nget a recognizer by name if it is bound to a manager",
            "line": " src/hammer/hammer.ts:1295"
        },
        {
            "message": "Missing item type\nset a timeout with a given `this` scope.",
            "line": " src/hammer/utils.ts:10"
        },
        {
            "message": "Missing item type\nif the argument is an array, we want to execute the fn on each entry\nif it aint an array we don't want to do a thing.\nthis is used by all the methods that accept a single and array argument.",
            "line": " src/hammer/utils.ts:21"
        },
        {
            "message": "Missing item type\nwalk objects and arrays",
            "line": " src/hammer/utils.ts:38"
        },
        {
            "message": "Missing item type\nextend object.\nmeans that properties in dest will be overwritten by the ones in src.",
            "line": " src/hammer/utils.ts:66"
        },
        {
            "message": "Missing item type\nmerge the values from src in the dest.\nmeans that properties that exist in dest will not be overwritten by src",
            "line": " src/hammer/utils.ts:86"
        },
        {
            "message": "Missing item type\nsimple class inheritance",
            "line": " src/hammer/utils.ts:97"
        },
        {
            "message": "Missing item type\nsimple function bind",
            "line": " src/hammer/utils.ts:116"
        },
        {
            "message": "Missing item type\nuse the val2 when val1 is undefined",
            "line": " src/hammer/utils.ts:128"
        },
        {
            "message": "Missing item type\naddEventListener with multiple events at once",
            "line": " src/hammer/utils.ts:138"
        },
        {
            "message": "Missing item type\nremoveEventListener with multiple events at once",
            "line": " src/hammer/utils.ts:150"
        },
        {
            "message": "Missing item type\nsmall indexOf wrapper",
            "line": " src/hammer/utils.ts:179"
        },
        {
            "message": "Missing item type\nsplit string on whitespace",
            "line": " src/hammer/utils.ts:189"
        },
        {
            "message": "Missing item type\nfind if a array contains the object using indexOf or a simple polyFill",
            "line": " src/hammer/utils.ts:198"
        },
        {
            "message": "Missing item type\nconvert array-like objects to real arrays",
            "line": " src/hammer/utils.ts:220"
        },
        {
            "message": "Missing item type\nunique array with objects based on a key (like 'id') or just by the array's value",
            "line": " src/hammer/utils.ts:229"
        },
        {
            "message": "Missing item type\nget the prefixed property",
            "line": " src/hammer/utils.ts:263"
        },
        {
            "message": "Missing item type\nget a unique id",
            "line": " src/hammer/utils.ts:286"
        },
        {
            "message": "Missing item type\nget the window object of an element",
            "line": " src/hammer/utils.ts:295"
        },
        {
            "message": "Missing item type\nReturns either \"markers\", \"foldWidgets\", or undefined.",
            "line": " src/layer/Gutter.ts:264"
        },
        {
            "message": "Missing item type\nUsed in Web Workers.\nUses postMessage to communicate with a taget window.",
            "line": " src/lib/Sender.ts:3"
        },
        {
            "message": "Missing item type\nAdd a CSS class to the list of classes on the given node",
            "line": " src/lib/dom.ts:52"
        },
        {
            "message": "Missing item type\nRemove a CSS class from the list of classes on the given node",
            "line": " src/lib/dom.ts:61"
        },
        {
            "message": "Missing item type\nReturns a function which may be used to manually release the mouse.",
            "line": " src/lib/event.ts:97"
        },
        {
            "message": "Missing item type\nAdds a portable 'mousewheel' ['wheel','DOM MouseScroll'] listener to an element.",
            "line": " src/lib/event.ts:123"
        },
        {
            "message": "Missing item type\nA backwards-compatible, browser-neutral, requestAnimationFrame.",
            "line": " src/lib/event.ts:401"
        },
        {
            "message": "Missing item type\nIntended to be used as a Mixin.\nN.B. The original implementation was an object, the TypeScript way is\ndesigned to satisfy the compiler.",
            "line": " src/lib/event_emitter.ts:4"
        },
        {
            "message": "Missing item type\nEach event name has multiple callbacks.",
            "line": " src/lib/event_emitter.ts:10"
        },
        {
            "message": "Missing item type\nThere may be one default handler for an event too.",
            "line": " src/lib/event_emitter.ts:14"
        },
        {
            "message": "Missing item type",
            "line": " src/lib/event_emitter.ts:54"
        },
        {
            "message": "Missing item type",
            "line": " src/lib/event_emitter.ts:61"
        },
        {
            "message": "Missing item type\nReturns the last element in an array.",
            "line": " src/lib/lang.ts:31"
        },
        {
            "message": "Missing item type\nsplice out of 'array' anything that === 'value'",
            "line": " src/lib/lang.ts:121"
        },
        {
            "message": "Missing item type",
            "line": " src/lib/lang.ts:140"
        },
        {
            "message": "Missing item type\nSee TypeScript Mixins documentation.",
            "line": " src/lib/mix.ts:1"
        },
        {
            "message": "Missing item type\nbased on code from:",
            "line": " src/lib/net.ts:1"
        },
        {
            "message": "Missing item type\nExecutes a 'GET' HTTP request with a responseText callback.",
            "line": " src/lib/net.ts:11"
        },
        {
            "message": "Missing item type\nCreates a <script> tag, sets the 'src' property, and calls back when loaded.",
            "line": " src/lib/net.ts:27"
        },
        {
            "message": "Missing item type\nConvert a url into a fully qualified absolute URL.\nThis function does not work in IE6",
            "line": " src/lib/net.ts:48"
        },
        {
            "message": "Missing item type\nClassic ACE",
            "line": " src/lib/oop.ts:31"
        },
        {
            "message": "Missing item type\nClassic ACE",
            "line": " src/lib/oop.ts:46"
        },
        {
            "message": "Missing item type\nClassic ACE",
            "line": " src/lib/oop.ts:56"
        },
        {
            "message": "Missing item type\nReturn an exports.OS constant",
            "line": " src/lib/useragent.ts:46"
        },
        {
            "message": "Missing item type\nThe constructor.",
            "line": " src/mode/html/Characters.ts:7"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/Characters.ts:17"
        },
        {
            "message": "Missing item type\nA comment.",
            "line": " src/mode/html/Comment.ts:4"
        },
        {
            "message": "Missing item type\nThe constructor.",
            "line": " src/mode/html/Comment.ts:13"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/Comment.ts:25"
        },
        {
            "message": "Missing item type\nThe constructor.",
            "line": " src/mode/html/DTD.ts:9"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/DTD.ts:24"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/DTD.ts:32"
        },
        {
            "message": "Missing item type\nA document.",
            "line": " src/mode/html/Document.ts:6"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/Document.ts:16"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/Document.ts:24"
        },
        {
            "message": "Missing item type\nAn element.",
            "line": " src/mode/html/Element.ts:11"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/Element.ts:26"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/Element.ts:41"
        },
        {
            "message": "Missing item type\nRepresents a stack of open elements",
            "line": " src/mode/html/ElementStack.ts:58"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/ElementStack.ts:69"
        },
        {
            "message": "Missing item type\nPushes the item on the stack top",
            "line": " src/mode/html/ElementStack.ts:86"
        },
        {
            "message": "Missing item type\nPushes the item on the stack top",
            "line": " src/mode/html/ElementStack.ts:94"
        },
        {
            "message": "Missing item type\nPushes the item on the stack top",
            "line": " src/mode/html/ElementStack.ts:103"
        },
        {
            "message": "Missing item type\nPushes the item on the stack top",
            "line": " src/mode/html/ElementStack.ts:112"
        },
        {
            "message": "Missing item type\nPops the topmost item",
            "line": " src/mode/html/ElementStack.ts:121"
        },
        {
            "message": "Missing item type\nRemoves the item from the element stack",
            "line": " src/mode/html/ElementStack.ts:129"
        },
        {
            "message": "Missing item type\nPops until an element with a given localName is popped",
            "line": " src/mode/html/ElementStack.ts:137"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/ElementStack.ts:163"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/ElementStack.ts:172"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/ElementStack.ts:181"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/ElementStack.ts:190"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/ElementStack.ts:199"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/ElementStack.ts:208"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/ElementStack.ts:217"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/ElementStack.ts:226"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/ElementStack.ts:240"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/ElementStack.ts:257"
        },
        {
            "message": "Missing item type\nThe common node superclass.",
            "line": " src/mode/html/Node.ts:7"
        },
        {
            "message": "Missing item type\nVisit the node.",
            "line": " src/mode/html/Node.ts:25"
        },
        {
            "message": "Missing item type\nRevisit the node.",
            "line": " src/mode/html/Node.ts:35"
        },
        {
            "message": "Missing item type\nDetach this node from its parent.",
            "line": " src/mode/html/Node.ts:49"
        },
        {
            "message": "Missing item type\nA CDATA section.",
            "line": " src/mode/html/NodeType.ts:2"
        },
        {
            "message": "Missing item type\nA run of characters.",
            "line": " src/mode/html/NodeType.ts:6"
        },
        {
            "message": "Missing item type\nA comment.",
            "line": " src/mode/html/NodeType.ts:10"
        },
        {
            "message": "Missing item type\nA document.",
            "line": " src/mode/html/NodeType.ts:14"
        },
        {
            "message": "Missing item type\nA document fragment.",
            "line": " src/mode/html/NodeType.ts:18"
        },
        {
            "message": "Missing item type\nA DTD.",
            "line": " src/mode/html/NodeType.ts:22"
        },
        {
            "message": "Missing item type\nAn element.",
            "line": " src/mode/html/NodeType.ts:26"
        },
        {
            "message": "Missing item type\nAn entity.",
            "line": " src/mode/html/NodeType.ts:30"
        },
        {
            "message": "Missing item type\nA run of ignorable whitespace.",
            "line": " src/mode/html/NodeType.ts:34"
        },
        {
            "message": "Missing item type\nA processing instruction.",
            "line": " src/mode/html/NodeType.ts:38"
        },
        {
            "message": "Missing item type\nA skipped entity.",
            "line": " src/mode/html/NodeType.ts:42"
        },
        {
            "message": "Missing item type\nInsert a new child before a pre-existing child and return the newly inserted child.",
            "line": " src/mode/html/ParentNode.ts:11"
        },
        {
            "message": "Missing item type\nAppend a child to this node and return the child.",
            "line": " src/mode/html/ParentNode.ts:60"
        },
        {
            "message": "Missing item type\nAppend the children of another node to this node removing them from the other node .",
            "line": " src/mode/html/ParentNode.ts:78"
        },
        {
            "message": "Missing item type\nRemove a child from this node.",
            "line": " src/mode/html/ParentNode.ts:101"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/Tokenizer.ts:7"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/TreeBuilder.ts:16"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/TreeBuilder.ts:41"
        },
        {
            "message": "Missing item type\nAdoption agency algorithm (http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoption-agency-algorithm)",
            "line": " src/mode/html/TreeBuilder.ts:2438"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/TreeBuilder.ts:2634"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/TreeBuilder.ts:2642"
        },
        {
            "message": "Missing item type\nReturns topmost open element",
            "line": " src/mode/html/TreeBuilder.ts:2740"
        },
        {
            "message": "Missing item type\nPopulates current open element",
            "line": " src/mode/html/TreeBuilder.ts:2748"
        },
        {
            "message": "Missing item type\nReturns true if redirect is required and current open element causes foster parenting",
            "line": " src/mode/html/TreeBuilder.ts:2756"
        },
        {
            "message": "Missing item type\nImplements http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#closing-elements-that-have-implied-end-tags",
            "line": " src/mode/html/TreeBuilder.ts:2764"
        },
        {
            "message": "Missing item type\nPerforms http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#reconstruct-the-active-formatting-elements",
            "line": " src/mode/html/TreeBuilder.ts:2777"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/TreeBuilder.ts:2814"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/TreeBuilder.ts:2860"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/TreeBuilder.ts:2869"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/TreeBuilder.ts:2896"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/html/TreeBuilder.ts:2909"
        },
        {
            "message": "Missing item type\nResets the insertion mode (http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#reset-the-insertion-mode-appropriately)",
            "line": " src/mode/html/TreeBuilder.ts:2922"
        },
        {
            "message": "Missing item type\nTODO: Remove in JSHint 3",
            "line": " src/mode/javascript/jshint.ts:190"
        },
        {
            "message": "Missing item type\nUse `in` to check for the presence of any explicitly-specified value for\n`globalstrict` because both `true` and `false` should trigger an error.",
            "line": " src/mode/javascript/jshint.ts:211"
        },
        {
            "message": "Missing item type\nTODO: Extend this restriction to *all* ES6-specific options.",
            "line": " src/mode/javascript/jshint.ts:223"
        },
        {
            "message": "Missing item type\nTODO: Remove in JSHint 3",
            "line": " src/mode/javascript/jshint.ts:545"
        },
        {
            "message": "Missing item type\nTODO: Extend this restriction to *all* \"environmental\" options.",
            "line": " src/mode/javascript/jshint.ts:668"
        },
        {
            "message": "Missing item type\nTODO: Remove in JSHint 3",
            "line": " src/mode/javascript/jshint.ts:676"
        },
        {
            "message": "Missing item type\nChecks the left hand side of an assignment for issues, returns if ok",
            "line": " src/mode/javascript/jshint.ts:1357"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/javascript/jshint.ts:2832"
        },
        {
            "message": "Missing item type\nDetermine if the parser has begun parsing executable code.",
            "line": " src/mode/javascript/jshint.ts:2975"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/javascript/jshint.ts:3020"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/javascript/jshint.ts:3210"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/javascript/jshint.ts:4839"
        },
        {
            "message": "Missing item type\nTest whether a given token is a punctuator matching one of the specified values",
            "line": " src/mode/javascript/jshint.ts:4885"
        },
        {
            "message": "Missing item type\nTest whether a given token is a punctuator matching the specified value",
            "line": " src/mode/javascript/jshint.ts:4898"
        },
        {
            "message": "Missing item type\nCreate a new entry in the stack. Useful for tracking names across\nexpressions.",
            "line": " src/mode/javascript/name-stack.ts:13"
        },
        {
            "message": "Missing item type\nDiscard the most recently-created name on the stack.",
            "line": " src/mode/javascript/name-stack.ts:21"
        },
        {
            "message": "Missing item type\nUpdate the most recent name on the top of the stack.",
            "line": " src/mode/javascript/name-stack.ts:28"
        },
        {
            "message": "Missing item type\nGenerate a string representation of the most recent name.",
            "line": " src/mode/javascript/name-stack.ts:38"
        },
        {
            "message": "Missing item type\nThis option prohibits the use of bitwise operators such as `^` (XOR),\n`|` (OR) and others. Bitwise operators are very rare in JavaScript\nprograms and quite often `&` is simply a mistyped `&&`.",
            "line": " src/mode/javascript/options.ts:7"
        },
        {
            "message": "Missing item type\nThis options prohibits overwriting prototypes of native objects such as\n `Array`, `Date` and so on.\n    // jshint freeze:true\n     Array.prototype.count = function (value) { return 4; };\n     // -> Warning: Extending prototype of native object: 'Array'.",
            "line": " src/mode/javascript/options.ts:14"
        },
        {
            "message": "Missing item type\nThis option allows you to force all variable names to use either\ncamelCase style or UPPER_CASE with underscores.",
            "line": " src/mode/javascript/options.ts:25"
        },
        {
            "message": "Missing item type\nThis option requires you to always put curly braces around blocks in\nloops and conditionals. JavaScript allows you to omit curly braces when\nthe block consists of only one statement, for example:\n\n    while (day)\n      shuffle();\n\nHowever, in some circumstances, it can lead to bugs (you'd think that\n`sleep()` is a part of the loop while in reality it is not):\n\n    while (day)\n      shuffle();\n      sleep();",
            "line": " src/mode/javascript/options.ts:36"
        },
        {
            "message": "Missing item type\nThis options prohibits the use of `==` and `!=` in favor of `===` and\n`!==`. The former try to coerce values before comparing them which can\nlead to some unexpected results. The latter don't do any coercion so\nthey are generally safer. If you would like to learn more about type\ncoercion in JavaScript, we recommend [Truth, Equality and\nJavaScript](http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/)\nby Angus Croll.",
            "line": " src/mode/javascript/options.ts:53"
        },
        {
            "message": "Missing item type\nThis option enables warnings about the use of identifiers which are\ndefined in future versions of JavaScript. Although overwriting them has\nno effect in contexts where they are not implemented, this practice can\ncause issues when migrating codebases to newer versions of the language.",
            "line": " src/mode/javascript/options.ts:64"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about invalid `typeof` operator values.\nThis operator has only [a limited set of possible return\nvalues](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof).\nBy default, JSHint warns when you compare its result with an invalid\nvalue which often can be a typo.\n\n    // 'fuction' instead of 'function'\n    if (typeof a == \"fuction\") { // Invalid typeof value 'fuction'\n      // ...\n    }\n\nDo not use this option unless you're absolutely sure you don't want\nthese checks.",
            "line": " src/mode/javascript/options.ts:72"
        },
        {
            "message": "Missing item type\nThis option tells JSHint that your code needs to adhere to ECMAScript 3\nspecification. Use this option if you need your program to be executable\nin older browsers—such as Internet Explorer 6/7/8/9—and other legacy\nJavaScript environments.",
            "line": " src/mode/javascript/options.ts:89"
        },
        {
            "message": "Missing item type\nThis option enables syntax first defined in [the ECMAScript 5.1\nspecification](http://es5.github.io/). This includes allowing reserved\nkeywords as object properties.",
            "line": " src/mode/javascript/options.ts:99"
        },
        {
            "message": "Missing item type\nThis option requires all `for in` loops to filter object's items. The\nfor in statement allows for looping through the names of all of the\nproperties of an object including those inherited through the prototype\nchain. This behavior can lead to unexpected items in your object so it\nis generally safer to always filter inherited properties out as shown in\nthe example:\n\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        // We are sure that obj[key] belongs to the object and was not inherited.\n      }\n    }\n\nFor more in-depth understanding of `for in` loops in JavaScript, read\n[Exploring JavaScript for-in\nloops](http://javascriptweblog.wordpress.com/2011/01/04/exploring-javascript-for-in-loops/)\nby Angus Croll.",
            "line": " src/mode/javascript/options.ts:108"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about declaring variables inside of\ncontrol\nstructures while accessing them later from the outside. Even though\nJavaScript has only two real scopes—global and function—such practice\nleads to confusion among people new to the language and hard-to-debug\nbugs. This is why, by default, JSHint warns about variables that are\nused outside of their intended scope.\n\n    function test() {\n      if (true) {\n        var x = 0;\n      }\n\n      x += 1; // Default: 'x' used out of scope.\n                // No warning when funcscope:true\n    }",
            "line": " src/mode/javascript/options.ts:129"
        },
        {
            "message": "Missing item type\nThis option prohibits the use of immediate function invocations without\nwrapping them in parentheses. Wrapping parentheses assists readers of\nyour code in understanding that the expression is the result of a\nfunction, and not the function itself.",
            "line": " src/mode/javascript/options.ts:149"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about the `__iterator__` property. This\nproperty is not supported by all browsers so use it carefully.",
            "line": " src/mode/javascript/options.ts:162"
        },
        {
            "message": "Missing item type\nThis option requires you to capitalize names of constructor functions.\nCapitalizing functions that are intended to be used with `new` operator\nis just a convention that helps programmers to visually distinguish\nconstructor functions from other types of functions to help spot\nmistakes when using `this`.\n\nNot doing so won't break your code in any browsers or environments but\nit will be a bit harder to figure out—by reading the code—if the\nfunction was supposed to be used with or without new. And this is\nimportant because when the function that was intended to be used with\n`new` is used without it, `this` will point to the global object instead\nof a new object.",
            "line": " src/mode/javascript/options.ts:168"
        },
        {
            "message": "Missing item type\nThis option prohibits the use of `arguments.caller` and\n`arguments.callee`.  Both `.caller` and `.callee` make quite a few\noptimizations impossible so they were deprecated in future versions of\nJavaScript. In fact, ECMAScript 5 forbids the use of `arguments.callee`\nin strict mode.",
            "line": " src/mode/javascript/options.ts:189"
        },
        {
            "message": "Missing item type\nThis option prohibits the use of the comma operator. When misused, the\ncomma operator can obscure the value of a statement and promote\nincorrect code.",
            "line": " src/mode/javascript/options.ts:198"
        },
        {
            "message": "Missing item type\nThis option warns when you have an empty block in your code. JSLint was\noriginally warning for all empty blocks and we simply made it optional.\nThere were no studies reporting that empty blocks in JavaScript break\nyour code in any way.",
            "line": " src/mode/javascript/options.ts:205"
        },
        {
            "message": "Missing item type\nThis option warns about \"non-breaking whitespace\" characters. These\ncharacters can be entered with option-space on Mac computers and have a\npotential of breaking non-UTF8 web pages.",
            "line": " src/mode/javascript/options.ts:218"
        },
        {
            "message": "Missing item type\nThis option prohibits the use of constructor functions for side-effects.\nSome people like to call constructor functions without assigning its\nresult to any variable:\n\n    new MyConstructor();\n\nThere is no advantage in this approach over simply calling\n`MyConstructor` since the object that the operator `new` creates isn't\nused anywhere so you should generally avoid constructors like this one.",
            "line": " src/mode/javascript/options.ts:225"
        },
        {
            "message": "Missing item type\nThis option prohibits the use of explicitly undeclared variables. This\noption is very useful for spotting leaking and mistyped variables.\n\n    // jshint undef:true\n\n    function test() {\n      var myVar = 'Hello, World';\n      console.log(myvar); // Oops, typoed here. JSHint with undef will complain\n    }\n\nIf your variable is defined in another file, you can use the `global`\ndirective to tell JSHint about it.",
            "line": " src/mode/javascript/options.ts:238"
        },
        {
            "message": "Missing item type\nThis option prohibits the use of the grouping operator when it is not\nstrictly required. Such usage commonly reflects a misunderstanding of\nunary operators, for example:\n\n    // jshint singleGroups: true\n\n    delete(obj.attr); // Warning: Unnecessary grouping operator.",
            "line": " src/mode/javascript/options.ts:254"
        },
        {
            "message": "Missing item type\nWhen set to true, the use of VariableStatements are forbidden.\nFor example:\n\n    // jshint varstmt: true\n\n    var a; // Warning: `var` declarations are forbidden. Use `let` or `const` instead.",
            "line": " src/mode/javascript/options.ts:265"
        },
        {
            "message": "Missing item type\nThis option is a short hand for the most strict JSHint configuration as\navailable in JSHint version 2.6.3. It enables all enforcing options and\ndisables all relaxing options that were defined in that release.",
            "line": " src/mode/javascript/options.ts:275"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about missing semicolons. There is a lot\nof FUD about semicolon spread by quite a few people in the community.\nThe common myths are that semicolons are required all the time (they are\nnot) and that they are unreliable. JavaScript has rules about semicolons\nwhich are followed by *all* browsers so it is up to you to decide\nwhether you should or should not use semicolons in your code.\n\nFor more information about semicolons in JavaScript read [An Open Letter\nto JavaScript Leaders Regarding\nSemicolons](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding)\nby Isaac Schlueter and [JavaScript Semicolon\nInsertion](http://inimino.org/~inimino/blog/javascript_semicolons).",
            "line": " src/mode/javascript/options.ts:289"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about multi-line strings. Multi-line\nstrings can be dangerous in JavaScript because all hell breaks loose if\nyou accidentally put a whitespace in between the escape character (`\\`)\nand a new line.\n\nNote that even though this option allows correct multi-line strings, it\nstill warns about multi-line strings without escape characters or with\nanything in between the escape character and a whitespace.\n\n    // jshint multistr:true\n\n    var text = \"Hello\\\n    World\"; // All good.\n\n    text = \"Hello\n    World\"; // Warning, no escape character.\n\n    text = \"Hello\\\n    World\"; // Warning, there is a space after \\",
            "line": " src/mode/javascript/options.ts:305"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about the `debugger` statements in your\ncode.",
            "line": " src/mode/javascript/options.ts:333"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about the use of assignments in cases\nwhere comparisons are expected. More often than not, code like `if (a =\n10) {}` is a typo. However, it can be useful in cases like this one:\n\n    for (var i = 0, person; person = people[i]; i++) {}\n\nYou can silence this error on a per-use basis by surrounding the assignment\nwith parenthesis, such as:\n\n    for (var i = 0, person; (person = people[i]); i++) {}",
            "line": " src/mode/javascript/options.ts:339"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about the use of `eval`. The use of\n`eval` is discouraged because it can make your code vulnerable to\nvarious injection attacks and it makes it hard for JavaScript\ninterpreter to do certain optimizations.",
            "line": " src/mode/javascript/options.ts:353"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about the use of global strict mode.\nGlobal strict mode can break third-party widgets so it is not\nrecommended.\n\nFor more info about strict mode see the `strict` option.",
            "line": " src/mode/javascript/options.ts:361"
        },
        {
            "message": "Missing item type\nThis option prohibits the use of unary increment and decrement\noperators.  Some people think that `++` and `--` reduces the quality of\ntheir coding styles and there are programming languages—such as\nPython—that go completely without these operators.",
            "line": " src/mode/javascript/options.ts:372"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about the `__proto__` property.",
            "line": " src/mode/javascript/options.ts:380"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about the use of script-targeted\nURLs—such as `javascript:...`.",
            "line": " src/mode/javascript/options.ts:385"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about using `[]` notation when it can be\nexpressed in dot notation: `person['name']` vs. `person.name`.",
            "line": " src/mode/javascript/options.ts:391"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about \"weird\" constructions like\n`new function () { ... }` and `new Object;`. Such constructions are\nsometimes used to produce singletons in JavaScript:\n\n    var singleton = new function() {\n      var privateVar;\n\n      this.publicMethod  = function () {}\n      this.publicMethod2 = function () {}\n    };",
            "line": " src/mode/javascript/options.ts:402"
        },
        {
            "message": "Missing item type\nThis option suppresses most of the warnings about possibly unsafe line\nbreakings in your code. It doesn't suppress warnings about comma-first\ncoding style. To suppress those you have to use `laxcomma` (see below).",
            "line": " src/mode/javascript/options.ts:416"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about comma-first coding style:\n\n    var obj = {\n        name: 'Anton'\n      , handle: 'valueof'\n      , role: 'SW Engineer'\n    };",
            "line": " src/mode/javascript/options.ts:428"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about possible strict violations when\nthe code is running in strict mode and you use `this` in a\nnon-constructor function. You should use this option—in a function scope\nonly—when you are positive that your use of `this` is valid in the\nstrict mode (for example, if you call your function using\n`Function.call`).\n\n**Note:** This option can be used only inside of a function scope.\nJSHint will fail with an error if you will try to set this option\nglobally.",
            "line": " src/mode/javascript/options.ts:444"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about the use of the `with` statement.\nThe semantics of the `with` statement can cause confusion among\ndevelopers and accidental definition of global variables.\n\nMore info:\n\n* [with Statement Considered\n  Harmful](http://yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/)",
            "line": " src/mode/javascript/options.ts:458"
        },
        {
            "message": "Missing item type\nThis options tells JSHint that your code uses Mozilla JavaScript\nextensions. Unless you develop specifically for the Firefox web browser\nyou don't need this option.\n\nMore info:\n\n* [New in JavaScript\n  1.7](https://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.7)",
            "line": " src/mode/javascript/options.ts:470"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about generator functions with no\n`yield` statement in them.",
            "line": " src/mode/javascript/options.ts:482"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about `== null` comparisons. Such\ncomparisons are often useful when you want to check if a variable is\n`null` or `undefined`.",
            "line": " src/mode/javascript/options.ts:488"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about missing semicolons, but only when\nthe semicolon is omitted for the last statement in a one-line block:\n\n    var name = (function() { return 'Anton' }());\n\nThis is a very niche use case that is useful only when you use automatic\nJavaScript code generators.",
            "line": " src/mode/javascript/options.ts:495"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about functions inside of loops.\nDefining functions inside of loops can lead to bugs such as this one:\n\n    var nums = [];\n\n    for (var i = 0; i < 10; i++) {\n      nums[i] = function (j) {\n        return i + j;\n      };\n    }\n\n    nums[0](2); // Prints 12 instead of 2\n\nTo fix the code above you need to copy the value of `i`:\n\n    var nums = [];\n\n    for (var i = 0; i < 10; i++) {\n      (function (i) {\n        nums[i] = function (j) {\n            return i + j;\n        };\n      }(i));\n    }",
            "line": " src/mode/javascript/options.ts:506"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about the use of expressions where\nnormally you would expect to see assignments or function calls. Most of\nthe time, such code is a typo. However, it is not forbidden by the spec\nand that's why this warning is optional.",
            "line": " src/mode/javascript/options.ts:534"
        },
        {
            "message": "Missing item type\nThis option tells JSHint that your code uses ECMAScript 6 specific\nsyntax. Note that not all browsers implement these features.\n\nMore info:\n\n* [Specification for ECMAScript\n  6](http://www.ecma-international.org/ecma-262/6.0/index.html)",
            "line": " src/mode/javascript/options.ts:542"
        },
        {
            "message": "Missing item type\nThis option tells JSHint that your code uses ES3 array elision elements,\nor empty elements (for example, `[1, , , 4, , , 7]`).",
            "line": " src/mode/javascript/options.ts:555"
        },
        {
            "message": "Missing item type\nThis option defines globals exposed by the\n[MooTools](http://mootools.net/) JavaScript framework.",
            "line": " src/mode/javascript/options.ts:565"
        },
        {
            "message": "Missing item type\nThis option defines globals exposed by\n[CouchDB](http://couchdb.apache.org/). CouchDB is a document-oriented\ndatabase that can be queried and indexed in a MapReduce fashion using\nJavaScript.",
            "line": " src/mode/javascript/options.ts:571"
        },
        {
            "message": "Missing item type\nThis option defines globals exposed by [the Jasmine unit testing\nframework](https://jasmine.github.io/).",
            "line": " src/mode/javascript/options.ts:579"
        },
        {
            "message": "Missing item type\nThis option defines globals exposed by the [jQuery](http://jquery.com/)\nJavaScript library.",
            "line": " src/mode/javascript/options.ts:585"
        },
        {
            "message": "Missing item type\nThis option defines globals available when your code is running inside\nof the Node runtime environment. [Node.js](http://nodejs.org/) is a\nserver-side JavaScript environment that uses an asynchronous\nevent-driven model. This option also skips some warnings that make sense\nin the browser environments but don't make sense in Node such as\nfile-level `use strict` pragmas and `console.log` statements.",
            "line": " src/mode/javascript/options.ts:591"
        },
        {
            "message": "Missing item type\nThis option defines globals exposed by [the QUnit unit testing\nframework](http://qunitjs.com/).",
            "line": " src/mode/javascript/options.ts:601"
        },
        {
            "message": "Missing item type\nThis option defines globals available when your code is running inside\nof the Rhino runtime environment. [Rhino](http://www.mozilla.org/rhino/)\nis an open-source implementation of JavaScript written entirely in Java.",
            "line": " src/mode/javascript/options.ts:607"
        },
        {
            "message": "Missing item type\nThis option defines globals exposed by [the ShellJS\nlibrary](http://documentup.com/arturadib/shelljs).",
            "line": " src/mode/javascript/options.ts:614"
        },
        {
            "message": "Missing item type\nThis option defines globals exposed by the\n[Prototype](http://www.prototypejs.org/) JavaScript framework.",
            "line": " src/mode/javascript/options.ts:620"
        },
        {
            "message": "Missing item type\nThis option defines globals exposed by the [YUI](http://yuilibrary.com/)\nJavaScript framework.",
            "line": " src/mode/javascript/options.ts:626"
        },
        {
            "message": "Missing item type\nThis option defines globals exposed by the \"BDD\" and \"TDD\" UIs of the\n[Mocha unit testing framework](http://mochajs.org/).",
            "line": " src/mode/javascript/options.ts:632"
        },
        {
            "message": "Missing item type\nThis option informs JSHint that the input code describes an ECMAScript 6\nmodule. All module code is interpreted as strict mode code.",
            "line": " src/mode/javascript/options.ts:638"
        },
        {
            "message": "Missing item type\nThis option defines globals available when your code is running as a\nscript for the [Windows Script\nHost](http://en.wikipedia.org/wiki/Windows_Script_Host).",
            "line": " src/mode/javascript/options.ts:644"
        },
        {
            "message": "Missing item type\nThis option defines globals available when your code is running inside\nof a Web Worker. [Web\nWorkers](https://developer.mozilla.org/en/Using_web_workers) provide a\nsimple means for web content to run scripts in background threads.",
            "line": " src/mode/javascript/options.ts:651"
        },
        {
            "message": "Missing item type\nThis option defines non-standard but widely adopted globals such as\n`escape` and `unescape`.",
            "line": " src/mode/javascript/options.ts:659"
        },
        {
            "message": "Missing item type\nThis option defines globals exposed by modern browsers: all the way from\ngood old `document` and `navigator` to the HTML5 `FileReader` and other\nnew developments in the browser world.\n\n**Note:** This option doesn't expose variables like `alert` or\n`console`. See option `devel` for more information.",
            "line": " src/mode/javascript/options.ts:665"
        },
        {
            "message": "Missing item type\nThis option defines globals available when using [the Browserify\ntool](http://browserify.org/) to build a project.",
            "line": " src/mode/javascript/options.ts:675"
        },
        {
            "message": "Missing item type\nThis option defines globals that are usually used for logging poor-man's\ndebugging: `console`, `alert`, etc. It is usually a good idea to not\nship them in production because, for example, `console.log` breaks in\nlegacy versions of Internet Explorer.",
            "line": " src/mode/javascript/options.ts:681"
        },
        {
            "message": "Missing item type\nThis option defines globals exposed by the [Dojo\nToolkit](http://dojotoolkit.org/).",
            "line": " src/mode/javascript/options.ts:689"
        },
        {
            "message": "Missing item type\nThis option defines globals for typed array constructors.\n\nMore info:\n\n* [JavaScript typed\n  arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays)",
            "line": " src/mode/javascript/options.ts:695"
        },
        {
            "message": "Missing item type\nThis option defines globals available when your core is running inside\nof the PhantomJS runtime environment. [PhantomJS](http://phantomjs.org/)\nis a headless WebKit scriptable with a JavaScript API. It has fast and\nnative support for various web standards: DOM handling, CSS selector,\nJSON, Canvas, and SVG.",
            "line": " src/mode/javascript/options.ts:705"
        },
        {
            "message": "Missing item type\nThis option lets you set the maximum length of a line.",
            "line": " src/mode/javascript/options.ts:728"
        },
        {
            "message": "Missing item type\nThis option sets a specific tab width for your code.",
            "line": " src/mode/javascript/options.ts:737"
        },
        {
            "message": "Missing item type\nThis options allows you to set the maximum amount of warnings JSHint will\nproduce before giving up. Default is 50.",
            "line": " src/mode/javascript/options.ts:746"
        },
        {
            "message": "Missing item type\nThis option allows you to control which variables JSHint considers to be\nimplicitly defined in the environment. Configure it with an array of\nstring values. Prefixing a variable name with a hyphen (-) character will\nremove that name from the collection of predefined variables.\n\nJSHint will consider variables declared in this way to be read-only.\n\nThis option cannot be specified in-line; it may only be used via the\nJavaScript API or from an external configuration file.",
            "line": " src/mode/javascript/options.ts:752"
        },
        {
            "message": "Missing item type\nThis option can be used to specify a white list of global variables that\nare not formally defined in the source code. This is most useful when\ncombined with the `undef` option in order to suppress warnings for\nproject-specific global variables.\n\nSetting an entry to `true` enables reading and writing to that variable.\nSetting it to `false` will trigger JSHint to consider that variable\nread-only.\n\nSee also the \"environment\" options: a set of options to be used as short\nhand for enabling global variables defined in common JavaScript\nenvironments.\n\nTo configure `globals` within an individual file, see [Inline\nConfiguration](http://jshint.com/docs/#inline-configuration).",
            "line": " src/mode/javascript/options.ts:765"
        },
        {
            "message": "Missing item type\nThis option enforces the consistency of quotation marks used throughout\nyour code. It accepts three values: `true` if you don't want to enforce\none particular style but want some consistency, `\"single\"` if you want to\nallow only single quotes and `\"double\"` if you want to allow only double\nquotes.",
            "line": " src/mode/javascript/options.ts:784"
        },
        {
            "message": "Missing item type\nThis option lets you set the max number of statements allowed per function:\n\n    // jshint maxstatements:4\n\n    function main() {\n      var i = 0;\n      var j = 0;\n\n      // Function declarations count as one statement. Their bodies\n      // don't get taken into account for the outer function.\n      function inner() {\n        var i2 = 1;\n        var j2 = 1;\n\n        return i2 + j2;\n      }\n\n      j = i + j;\n      return j; // JSHint: Too many statements per function. (5)\n    }",
            "line": " src/mode/javascript/options.ts:799"
        },
        {
            "message": "Missing item type\nThis option lets you control how nested do you want your blocks to be:\n\n    // jshint maxdepth:2\n\n    function main(meaning) {\n      var day = true;\n\n      if (meaning === 42) {\n        while (day) {\n          shuffle();\n\n          if (tired) { // JSHint: Blocks are nested too deeply (3).\n              sleep();\n          }\n        }\n      }\n    }",
            "line": " src/mode/javascript/options.ts:823"
        },
        {
            "message": "Missing item type\nThis option lets you set the max number of formal parameters allowed per\nfunction:\n\n    // jshint maxparams:3\n\n    function login(request, onSuccess) {\n      // ...\n    }\n\n    // JSHint: Too many parameters per function (4).\n    function logout(request, isManual, whereAmI, onSuccess) {\n      // ...\n    }",
            "line": " src/mode/javascript/options.ts:844"
        },
        {
            "message": "Missing item type\nThis option lets you control cyclomatic complexity throughout your code.\nCyclomatic complexity measures the number of linearly independent paths\nthrough a program's source code. Read more about [cyclomatic complexity on\nWikipedia](http://en.wikipedia.org/wiki/Cyclomatic_complexity).",
            "line": " src/mode/javascript/options.ts:861"
        },
        {
            "message": "Missing item type\nThis option suppresses warnings about variable shadowing i.e. declaring a\nvariable that had been already declared somewhere in the outer scope.\n\n- \"inner\"  - check for variables defined in the same scope only\n- \"outer\"  - check for variables defined in outer scopes as well\n- false    - same as inner\n- true     - allow variable shadowing",
            "line": " src/mode/javascript/options.ts:869"
        },
        {
            "message": "Missing item type\nThis option requires the code to run in ECMAScript 5's strict mode.\n[Strict mode](https://developer.mozilla.org/en/JavaScript/Strict_mode)\nis a way to opt in to a restricted variant of JavaScript. Strict mode\neliminates some JavaScript pitfalls that didn't cause errors by changing\nthem to produce errors.  It also fixes mistakes that made it difficult\nfor the JavaScript engines to perform certain optimizations.\n\n- \"func\"    - there must be a `\"use strict\";` directive at function level\n- \"global\"  - there must be a `\"use strict\";` directive at global level\n- \"implied\" - lint the code as if there is the `\"use strict\";` directive\n- false     - disable warnings about strict mode\n- true      - same as `\"func\"`, but environment options have precedence over\n              this (e.g. `node`, `module`, `browserify` and `phantomjs` can\n              set `strict: global`)",
            "line": " src/mode/javascript/options.ts:880"
        },
        {
            "message": "Missing item type\nThis option warns when you define and never use your variables. It is very\nuseful for general code cleanup, especially when used in addition to\n`undef`.\n\n    // jshint unused:true\n\n    function test(a, b) {\n      var c, d = 2;\n\n      return a + d;\n    }\n\n    test(1, 2);\n\n    // Line 3: 'b' was defined but never used.\n    // Line 4: 'c' was defined but never used.\n\nIn addition to that, this option will warn you about unused global\nvariables declared via the `global` directive.\n\nThis can be set to `vars` to only check for variables, not function\nparameters, or `strict` to check all variables and parameters.  The\ndefault (true) behavior is to allow unused parameters that are followed by\na used parameter.",
            "line": " src/mode/javascript/options.ts:898"
        },
        {
            "message": "Missing item type\nThis option prohibits the use of a variable before it was defined.\nJavaScript has function scope only and, in addition to that, all variables\nare always moved—or hoisted— to the top of the function. This behavior can\nlead to some very nasty bugs and that's why it is safer to always use\nvariable only after they have been explicitly defined.\n\nSetting this option to \"nofunc\" will allow function declarations to be\nignored.\n\nFor more in-depth understanding of scoping and hoisting in JavaScript,\nread [JavaScript Scoping and\nHoisting](http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting)\nby Ben Cherry.",
            "line": " src/mode/javascript/options.ts:926"
        },
        {
            "message": "Missing item type\nThis option is used to specify the ECMAScript version to which the code\nmust adhere. It can assume one of the following values:\n - `3` - If you need your program to be executable\n   in older browsers—such as Internet Explorer 6/7/8/9—and other legacy\n   JavaScript environments\n - `5` - To enable syntax first defined in [the ECMAScript 5.1\n   specification](http://www.ecma-international.org/ecma-262/5.1/index.html).\n   This includes allowing reserved keywords as object properties.\n - `6` - To tell JSHint that your code uses [ECMAScript\n   6](http://www.ecma-international.org/ecma-262/6.0/index.html) specific\n   syntax. Note that not all browsers implement them.",
            "line": " src/mode/javascript/options.ts:952"
        },
        {
            "message": "Missing item type\nCreates a scope manager that handles variables and labels, storing usages\nand resolving when variables are used and undefined",
            "line": " src/mode/javascript/scope-manager.ts:28"
        },
        {
            "message": "Missing item type\nChecks the current scope for unused identifiers",
            "line": " src/mode/javascript/scope-manager.ts:126"
        },
        {
            "message": "Missing item type\nChecks the current scope for unused parameters\nMust be called in a function parameter scope",
            "line": " src/mode/javascript/scope-manager.ts:147"
        },
        {
            "message": "Missing item type\nFinds the relevant label's scope, searching from nearest outwards",
            "line": " src/mode/javascript/scope-manager.ts:181"
        },
        {
            "message": "Missing item type\nTell the manager we are entering a new block of code",
            "line": " src/mode/javascript/scope-manager.ts:257"
        },
        {
            "message": "Missing item type\nAdd a param to the current scope",
            "line": " src/mode/javascript/scope-manager.ts:461"
        },
        {
            "message": "Missing item type\nGets an array of implied globals",
            "line": " src/mode/javascript/scope-manager.ts:552"
        },
        {
            "message": "Missing item type\nReturns a list of unused variables",
            "line": " src/mode/javascript/scope-manager.ts:577"
        },
        {
            "message": "Missing item type\nfor the exported options, indicating a variable is used outside the file",
            "line": " src/mode/javascript/scope-manager.ts:598"
        },
        {
            "message": "Missing item type\nMark an indentifier as es6 module exported",
            "line": " src/mode/javascript/scope-manager.ts:626"
        },
        {
            "message": "Missing item type\nadds an indentifier to the relevant current scope and creates warnings/errors as necessary",
            "line": " src/mode/javascript/scope-manager.ts:633"
        },
        {
            "message": "Missing item type\nReturns the label type given certain options",
            "line": " src/mode/javascript/scope-manager.ts:722"
        },
        {
            "message": "Missing item type\nReturns if a break label exists in the function scope",
            "line": " src/mode/javascript/scope-manager.ts:748"
        },
        {
            "message": "Missing item type\nReturns if the label is in the current function scope\nSee scopeManager.funct.labelType for options",
            "line": " src/mode/javascript/scope-manager.ts:766"
        },
        {
            "message": "Missing item type\nAdds a new function scoped variable\nsee block.add for block scoped",
            "line": " src/mode/javascript/scope-manager.ts:774"
        },
        {
            "message": "Missing item type\nis the current block global?",
            "line": " src/mode/javascript/scope-manager.ts:791"
        },
        {
            "message": "Missing item type\nAdds a new variable",
            "line": " src/mode/javascript/scope-manager.ts:844"
        },
        {
            "message": "Missing item type\nDetermine if the code currently being linted is strict mode code.",
            "line": " src/mode/javascript/state.ts:36"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/javascript/state.ts:50"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/javascript/state.ts:61"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/Parser.ts:9"
        },
        {
            "message": "Missing item type\nFinds the specified",
            "line": " src/mode/python/Parser.ts:26"
        },
        {
            "message": "Missing item type\nAdd a token; return true if we're done",
            "line": " src/mode/python/Parser.ts:87"
        },
        {
            "message": "Missing item type\nturn a token into a label",
            "line": " src/mode/python/Parser.ts:154"
        },
        {
            "message": "Missing item type\nshift a token",
            "line": " src/mode/python/Parser.ts:173"
        },
        {
            "message": "Missing item type\npush a nonterminal",
            "line": " src/mode/python/Parser.ts:187"
        },
        {
            "message": "Missing item type\npop a nonterminal",
            "line": " src/mode/python/Parser.ts:201"
        },
        {
            "message": "Missing item type\nparser for interactive input. returns a function that should be called with\nlines of input as they are entered. the function will return false\nuntil the input is complete, when it will return the rootnode of the parse.",
            "line": " src/mode/python/Parser.ts:220"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/Parser.ts:284"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/Parser.ts:298"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/Tokenizer.ts:6"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/Tokenizer.ts:13"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/Tokenizer.ts:16"
        },
        {
            "message": "Missing item type\nThis is a port of tokenize.py by Ka-Ping Yee.\n\neach call to readline should return one line of input as a string, or\nundefined if it's finished.\n\ncallback is called for each token with 5 args:\n1. the token type\n2. the token string\n3. [ start_row, start_col ]\n4. [ end_row, end_col ]\n5. logical line where the token was found, including continuation lines\n\ncallback can return true to abort.",
            "line": " src/mode/python/Tokenizer.ts:128"
        },
        {
            "message": "Missing item type\nSymbolic (numeric) constants for tokens.",
            "line": " src/mode/python/Tokenizer.ts:183"
        },
        {
            "message": "Missing item type\nMap from token symbolic (numeric) constant to (string) name.",
            "line": " src/mode/python/Tokenizer.ts:247"
        },
        {
            "message": "Missing item type\nThis is a \"fixed\" version of the typeof operator.  It differs from the typeof\noperator in such a way that null returns 'null' and arrays return 'array'.",
            "line": " src/mode/python/base.ts:1"
        },
        {
            "message": "Missing item type\n// In Firefox 3.6, attempting to access iframe window objects' length\n// property throws an NS_ERROR_FAILURE, so we need to special-case it\n// here.\nif (className == '[object Window]') {\n  return 'object';\n}\n\n// We cannot always use constructor == Array or instanceof Array because\n// different frames have different Array objects. In IE6, if the iframe\n// where the array was created is destroyed, the array loses its\n// prototype. Then dereferencing val.splice here throws an exception, so\n// we can't use base.isFunction. Calling typeof directly returns 'unknown'\n// so that will work. In this case, this function will return false and\n// most array functions will still work because the array is still\n// array-like (supports length and []) even though it has lost its\n// prototype.\n// Mark Miller noticed that Object.prototype.toString\n// allows access to the unforgeable [[Class]] property.\n//  15.2.4.2 Object.prototype.toString ( )\n//  When the toString method is called, the following steps are taken:\n//      1. Get the [[Class]] property of this object.\n//      2. Compute a string value by concatenating the three strings\n//         \"[object \", Result(1), and \"]\".\n//      3. Return Result(2).\n// and this behavior survives the destruction of the execution context.\nif ((className == '[object Array]' ||\n     // In IE all non value types are wrapped as objects across window\n     // boundaries (not iframe though) so we have to do object detection\n     // for this edge case.\n     typeof value.length == 'number' &&\n     typeof value.splice != 'undefined' &&\n     typeof value.propertyIsEnumerable != 'undefined' &&\n     !value.propertyIsEnumerable('splice')\n\n    )) {\n  return 'array';\n}\n// HACK: There is still an array case that fails.\n//     function ArrayImpostor() {}\n//     ArrayImpostor.prototype = [];\n//     var impostor = new ArrayImpostor;\n// this can be fixed by getting rid of the fast path\n// (value instanceof Array) and solely relying on\n// (value && Object.prototype.toString.vall(value) === '[object Array]')\n// but that would require many more function calls and is not warranted\n// unless closure code is receiving objects from untrusted sources.\n\n// IE in cross-window calls does not correctly marshal the function type\n// (it appears just as an object) so we cannot use just typeof val ==\n// 'function'. However, if the object has a call property, it is a\n// function.\nif ((className == '[object Function]' ||\n    typeof value.call != 'undefined' &&\n    typeof value.propertyIsEnumerable != 'undefined' &&\n    !value.propertyIsEnumerable('call'))) {\n  return 'function';\n}\n\n    } else {\nreturn 'null';\n    }\n\n  } else if (s == 'function' && typeof value.call == 'undefined') {\n    // In Safari typeof nodeList returns 'function', and on Firefox typeof\n    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We\n    // would like to return object for those and we can detect an invalid\n    // function by making sure that the function object has a call method.\n    return 'object';\n  }\n  return s;\n};\n\n/**\n * Returns true if the specified value is a number.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is a number.",
            "line": " src/mode/python/base.ts:26"
        },
        {
            "message": "Missing item type\nReturns true if the specified value is a string.",
            "line": " src/mode/python/base.ts:109"
        },
        {
            "message": "Missing item type\nReturns true if the specified value is not undefined.\nWARNING: Do not use this to test if an object has a property. Use the in\noperator instead.  Additionally, this function assumes that the global\nundefined variable has not been redefined.",
            "line": " src/mode/python/base.ts:119"
        },
        {
            "message": "Missing item type\nReturns true if the object looks like an array. To qualify as array like\nthe value needs to be either a NodeList or an object with a Number length\nproperty.",
            "line": " src/mode/python/base.ts:132"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/builder.ts:27"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/builder.ts:51"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/builder.ts:76"
        },
        {
            "message": "Missing item type\nSet the context ctx for e, recursively traversing e.\n\nOnly sets context for expr kinds that can appear in assignment context as\nper the asdl file.",
            "line": " src/mode/python/builder.ts:118"
        },
        {
            "message": "Missing item type\ns is a python-style string literal, including quote characters and u/r/b\nprefixes. Returns decoded string object.",
            "line": " src/mode/python/builder.ts:1302"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/builder.ts:1382"
        },
        {
            "message": "Missing item type\nTODO: We're not generating _astname, _isenum, _fields anymore.",
            "line": " src/mode/python/builder.ts:1764"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/compiler.ts:15"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/compiler.ts:125"
        },
        {
            "message": "Missing item type\nStack of where to go on a break.",
            "line": " src/mode/python/compiler.ts:203"
        },
        {
            "message": "Missing item type\nStack of where to go on a continue.",
            "line": " src/mode/python/compiler.ts:207"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/compiler.ts:215"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/compiler.ts:248"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/compiler.ts:257"
        },
        {
            "message": "Missing item type\nEmit the JavaScript code that comments and reports the original Python code position.",
            "line": " src/mode/python/compiler.ts:273"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/compiler.ts:307"
        },
        {
            "message": "Missing item type\nFunction to test if an interrupt should occur if the program has been running for too long.\nThis function is executed at every test/branch operation.",
            "line": " src/mode/python/compiler.ts:321"
        },
        {
            "message": "Missing item type\ncompiles an expression. to 'return' something, it'll gensym a var and store\n into that var so that the calling code doesn't have avoid just pasting the\n returned name.",
            "line": " src/mode/python/compiler.ts:555"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/compiler.ts:675"
        },
        {
            "message": "Missing item type\noptimize some constant exprs. returns 0 if always 0, 1 if always 1 or -1 otherwise.",
            "line": " src/mode/python/compiler.ts:725"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/compiler.ts:1063"
        },
        {
            "message": "Missing item type\nbuilds a code object (js function) for various constructs. used by def,\nlambda, generator expressions. it isn't used for class because it seemed\ndifferent enough.\n\nhandles:\n- setting up a new scope\n- decorators (if any)\n- defaults setup\n- setup for cell and free vars\n- setup and modification for generators",
            "line": " src/mode/python/compiler.ts:1133"
        },
        {
            "message": "Missing item type\ncompiles a statement",
            "line": " src/mode/python/compiler.ts:1569"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/compiler.ts:1659"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/compiler.ts:1791"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/compiler.ts:1887"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/numericLiteral.ts:1"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/numericLiteral.ts:23"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/numericLiteral.ts:43"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/symtable.ts:47"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/symtable.ts:66"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/symtable.ts:172"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/symtable.ts:183"
        },
        {
            "message": "Missing item type\npoints at top level module symFlags",
            "line": " src/mode/python/symtable.ts:335"
        },
        {
            "message": "Missing item type\nThe current class or null.",
            "line": " src/mode/python/symtable.ts:339"
        },
        {
            "message": "Missing item type\nTemporary variable used to generate names of definitions.",
            "line": " src/mode/python/symtable.ts:343"
        },
        {
            "message": "Missing item type\nmapping from ast nodes to their scope if they have one. we add an\nid to the ast node when a scope is created for it, and store it in\nhere for the compiler to lookup later.",
            "line": " src/mode/python/symtable.ts:347"
        },
        {
            "message": "Missing item type\nLookup the SymbolTableScope for a scopeId of the AST.",
            "line": " src/mode/python/symtable.ts:357"
        },
        {
            "message": "Missing item type\nThis method is called for a Function Definition or a Lambda expression.",
            "line": " src/mode/python/symtable.ts:419"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/symtable.ts:434"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/symtable.ts:441"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/symtable.ts:490"
        },
        {
            "message": "Missing item type\nThis is probably not correct for names. What are they?",
            "line": " src/mode/python/symtable.ts:725"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/symtable.ts:754"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/symtable.ts:779"
        },
        {
            "message": "Missing item type\nstore scope info back into the st symbols dict. symbols is modified,\nothers are not.",
            "line": " src/mode/python/symtable.ts:848"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python/symtable.ts:880"
        },
        {
            "message": "Missing item type\nComputes the symbol table for the AST module.",
            "line": " src/mode/python/symtable.ts:928"
        },
        {
            "message": "Missing item type\nReturns the completions at the cursor position asynchronously in a callabck.\n\nFIXME: There is a side-effect of setting the matchText property which should be part of the callback result.",
            "line": " src/mode/typescript/CompletionService.ts:27"
        },
        {
            "message": "Missing item type\nA wrapper around an Editor to perform conversions between linear character, {row;column} and TextRange representations.\n\nThe editor is integral to the conversion because it knows the lengths of each line.",
            "line": " src/mode/typescript/EditorPosition.ts:5"
        },
        {
            "message": "Missing item type\nMakes a function that can be used to compare completion entries for sorting purposes.",
            "line": " src/mode/typescript/autoComplete.ts:11"
        },
        {
            "message": "Missing item type\nUsing the functional constructor pattern here because 'this' is too error-prone.\n\nAccordingly, the function is camelCase and is not called using the 'new' operator.",
            "line": " src/mode/typescript/autoComplete.ts:35"
        },
        {
            "message": "Missing item type\nDeclare the return object now because the AutoCompleteView needs a reference.",
            "line": " src/mode/typescript/autoComplete.ts:41"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/typescript/autoComplete.ts:52"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/typescript/autoComplete.ts:57"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/typescript/autoComplete.ts:62"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/typescript/autoComplete.ts:67"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/typescript/autoComplete.ts:73"
        },
        {
            "message": "Missing item type\nReturns the number of completions asynchronously in the callback with the side effect of showing the completions.",
            "line": " src/mode/typescript/autoComplete.ts:155"
        },
        {
            "message": "Missing item type\nListens for changes in the editor and maybe shows the completions.",
            "line": " src/mode/typescript/autoComplete.ts:212"
        },
        {
            "message": "Missing item type\nThe name of the element for fragment parsing.",
            "line": " src/mode/HtmlMode.ts:55"
        },
        {
            "message": "Missing item type\nUsed when loading snippets for zero or more modes?",
            "line": " src/mode/Mode.ts:47"
        },
        {
            "message": "Missing item type\nSymbol for an information annotation (gray italic i letter).",
            "line": " src/mode/python_worker.ts:11"
        },
        {
            "message": "Missing item type\nSymbol for a warning annotation (yellow triangle with exclamation).",
            "line": " src/mode/python_worker.ts:15"
        },
        {
            "message": "Missing item type\nSymbol for an error annotation (red box with x).",
            "line": " src/mode/python_worker.ts:19"
        },
        {
            "message": "Missing item type",
            "line": " src/mode/python_worker.ts:24"
        },
        {
            "message": "Missing item type\nDoesn't really do much because TypeScript requires the concept of a workspace.\n\nHowever, does provide some notifications to trigger further actions.",
            "line": " src/mode/typescript_worker.ts:6"
        },
        {
            "message": "Missing item type\nBrowser Code Editor targeting ES6 written in TypeScript.",
            "line": " src/modules/deuce.d.ts:8"
        },
        {
            "message": "Missing item type\nWe construct on a class defined in the Editor!\nDoes this class have to go in the same module as the Editor?",
            "line": " src/mouse/dragdrop_handler.ts:55"
        },
        {
            "message": "Missing item type\nThe cssClass variable corresponds to the class used in mathdoodle.css",
            "line": " src/theme/mathdoodle.ts:2"
        },
        {
            "message": "Missing item type\nInitializes the 'sender' property to the specified argument.\nInitializes the 'doc' property to a new EditDocument.\nInitializes the 'deferredUpdate' property to a delayed call to 'onUpdate'.\nBinds the 'sender' \"change\" event to a function",
            "line": " src/worker/Mirror.ts:11"
        },
        {
            "message": "Missing item type\nCalled after the timeout period. Derived classes will normally perform\na computationally expensive analysis then report annotations to the\nsender.",
            "line": " src/worker/Mirror.ts:54"
        },
        {
            "message": "Missing item type\nWorkerClient manages the communication with a Web Worker.",
            "line": " src/worker/WorkerClient.ts:6"
        },
        {
            "message": "Missing item type\nThis function is used as the basis for a function where this is bound safely.\nIt handles changes to the document by placing the messages in a queue",
            "line": " src/worker/WorkerClient.ts:124"
        },
        {
            "message": "Missing item type\nmain is the instance that we are creating?",
            "line": " src/worker/worker-amd.ts:160"
        },
        {
            "message": "Missing item type\nsender allows us to communicate back to the WorkerClient?",
            "line": " src/worker/worker-amd.ts:164"
        },
        {
            "message": "Missing item type\nmain is the instance that we are creating?",
            "line": " src/worker/worker-systemjs.ts:67"
        },
        {
            "message": "Missing item type\nsender allows us to communicate back to the WorkerClient?",
            "line": " src/worker/worker-systemjs.ts:71"
        },
        {
            "message": "Missing item type\nWorkspaceWorker",
            "line": " src/workspace/deuce_workspace_worker.ts:2"
        },
        {
            "message": "Missing item type\nApply an array of text edits to a string, and return the resulting string.",
            "line": " src/workspace/deuce_workspace_worker.ts:248"
        },
        {
            "message": "Missing item type\nNormalize an array of edits by removing overlapping entries and sorting\nentries on the \"minChar\" position.",
            "line": " src/workspace/deuce_workspace_worker.ts:265"
        },
        {
            "message": "Missing item type\nWorkspaceWorker is responsible for maintaining the language service host and language service.",
            "line": " src/workspace/deuce_workspace_worker.ts:325"
        },
        {
            "message": "Missing item type\nThe type information from the source.",
            "line": " src/workspace/deuce_workspace_worker.ts:417"
        },
        {
            "message": "Missing item type\nThe JS documentation comments with `@param` parsed out.",
            "line": " src/workspace/deuce_workspace_worker.ts:429"
        },
        {
            "message": "Missing item type\nA workspace is a collection of source files identified by name.",
            "line": " src/workspace/workspace.ts:3"
        },
        {
            "message": "Missing item type\nInsert or update a script.\nThis is typically called by the editing application.",
            "line": " src/workspace/workspace.ts:8"
        },
        {
            "message": "Missing item type\nNotify the workspace of an edit to a script.",
            "line": " src/workspace/workspace.ts:14"
        },
        {
            "message": "Missing item type\nRemove a script.\nThis is typically called by the editing application.",
            "line": " src/workspace/workspace.ts:19"
        },
        {
            "message": "Missing item type",
            "line": " src/workspace/workspace.ts:25"
        },
        {
            "message": "Missing item type",
            "line": " src/workspace/workspace.ts:30"
        },
        {
            "message": "Missing item type",
            "line": " src/workspace/workspace.ts:35"
        },
        {
            "message": "Missing item type",
            "line": " src/workspace/workspace.ts:40"
        },
        {
            "message": "Missing item type",
            "line": " src/workspace/workspace.ts:45"
        },
        {
            "message": "Missing item type",
            "line": " src/workspace/workspace.ts:50"
        },
        {
            "message": "Missing item type",
            "line": " src/workspace/workspace.ts:56"
        },
        {
            "message": "Missing item type\nCreates a new <code>Anchor</code> and associates it with a document.",
            "line": " src/Anchor.ts:70"
        },
        {
            "message": "Missing item type\nReturns an object identifying the `row` and `column` position of the current anchor.",
            "line": " src/Anchor.ts:89"
        },
        {
            "message": "Missing item type\nSets the anchor position to the specified row and column. If `noClip` is `true`, the position is not clipped.",
            "line": " src/Anchor.ts:194"
        },
        {
            "message": "Missing item type\nWhen called, the `'change'` event listener is removed.",
            "line": " src/Anchor.ts:229"
        },
        {
            "message": "Missing item type\nClips the anchor position to the specified row and column.",
            "line": " src/Anchor.ts:242"
        },
        {
            "message": "Missing item type\nCreates a new `BackgroundTokenizer` object.",
            "line": " src/BackgroundTokenizer.ts:43"
        },
        {
            "message": "Missing item type\nThis is the value returned by setTimeout, so it's really a timer handle.\nThere are some conditionals looking for a falsey value, so we use zero where needed.",
            "line": " src/BackgroundTokenizer.ts:51"
        },
        {
            "message": "Missing item type\nSets a new tokenizer for this object.",
            "line": " src/BackgroundTokenizer.ts:104"
        },
        {
            "message": "Missing item type\nSets a new document to associate with this object.",
            "line": " src/BackgroundTokenizer.ts:118"
        },
        {
            "message": "Missing item type\nEmits the `'update'` event. `firstRow` and `lastRow` are used to define the boundaries of the region to be updated.",
            "line": " src/BackgroundTokenizer.ts:137"
        },
        {
            "message": "Missing item type\nStarts tokenizing at the row indicated.",
            "line": " src/BackgroundTokenizer.ts:151"
        },
        {
            "message": "Missing item type\nStops tokenizing.",
            "line": " src/BackgroundTokenizer.ts:196"
        },
        {
            "message": "Missing item type\nGives list of tokens of the row. (tokens are cached)",
            "line": " src/BackgroundTokenizer.ts:207"
        },
        {
            "message": "Missing item type\n[Returns the state of tokenization at the end of a row.]{: #BackgroundTokenizer.getState}",
            "line": " src/BackgroundTokenizer.ts:219"
        },
        {
            "message": "Missing item type",
            "line": " src/EditSession.ts:144"
        },
        {
            "message": "Missing item type",
            "line": " src/EditSession.ts:149"
        },
        {
            "message": "Missing item type\nThe worker corresponding to the mode (i.e. Language).",
            "line": " src/EditSession.ts:154"
        },
        {
            "message": "Missing item type\nThis is a marker identifier.",
            "line": " src/EditSession.ts:185"
        },
        {
            "message": "Missing item type\nThis is really a Range with an added marker id.",
            "line": " src/EditSession.ts:189"
        },
        {
            "message": "Missing item type\nA number is a marker identifier, null indicates that no such marker exists.",
            "line": " src/EditSession.ts:193"
        },
        {
            "message": "Missing item type\nSet the number of spaces that define a soft tab.\nFor example, passing in `4` transforms the soft tabs to be equivalent to four spaces.\nThis function also emits the `changeTabSize` event.",
            "line": " src/EditSession.ts:564"
        },
        {
            "message": "Missing item type\nReturns the current tab size.",
            "line": " src/EditSession.ts:574"
        },
        {
            "message": "Missing item type\nReturns `true` if the character at the position is a soft tab.",
            "line": " src/EditSession.ts:581"
        },
        {
            "message": "Missing item type\nPass in `true` to enable overwrites in your session, or `false` to disable.\n\nIf overwrites is enabled, any text you enter will type over any text after it. If the value of `overwrite` changes, this function also emites the `changeOverwrite` event.",
            "line": " src/EditSession.ts:591"
        },
        {
            "message": "Missing item type\nReturns `true` if overwrites are enabled; `false` otherwise.",
            "line": " src/EditSession.ts:604"
        },
        {
            "message": "Missing item type\nSets the value of overwrite to the opposite of whatever it currently is.",
            "line": " src/EditSession.ts:611"
        },
        {
            "message": "Missing item type\nAdds `className` to the `row`, to be used for CSS stylings and whatnot.",
            "line": " src/EditSession.ts:618"
        },
        {
            "message": "Missing item type\nRemoves `className` from the `row`.",
            "line": " src/EditSession.ts:631"
        },
        {
            "message": "Missing item type\nReturns an array of numbers, indicating which rows have breakpoints.",
            "line": " src/EditSession.ts:641"
        },
        {
            "message": "Missing item type\nSets a breakpoint on every row number given by `rows`. This function also emites the `'changeBreakpoint'` event.",
            "line": " src/EditSession.ts:649"
        },
        {
            "message": "Missing item type\nRemoves all breakpoints on the rows. This function also emites the `'changeBreakpoint'` event.",
            "line": " src/EditSession.ts:664"
        },
        {
            "message": "Missing item type\nSets a breakpoint on the row number given by `rows`. This function also emites the `'changeBreakpoint'` event.",
            "line": " src/EditSession.ts:672"
        },
        {
            "message": "Missing item type\nRemoves a breakpoint on the row number given by `rows`. This function also emites the `'changeBreakpoint'` event.",
            "line": " src/EditSession.ts:689"
        },
        {
            "message": "Missing item type\nAdds a new marker to the given `Range`. If `inFront` is `true`, a front marker is defined, and the `'changeFrontMarker'` event fires; otherwise, the `'changeBackMarker'` event fires.",
            "line": " src/EditSession.ts:700"
        },
        {
            "message": "Missing item type\nAdds a dynamic marker to the session.",
            "line": " src/EditSession.ts:735"
        },
        {
            "message": "Missing item type\nRemoves the marker with the specified ID. If this marker was in front, the `'changeFrontMarker'` event is emitted. If the marker was in the back, the `'changeBackMarker'` event is emitted.",
            "line": " src/EditSession.ts:761"
        },
        {
            "message": "Missing item type\nReturns an array containing the IDs of all the markers, either front or back.",
            "line": " src/EditSession.ts:780"
        },
        {
            "message": "Missing item type\nSets annotations for the `EditSession`. This functions emits the `'changeAnnotation'` event.",
            "line": " src/EditSession.ts:813"
        },
        {
            "message": "Missing item type\nReturns the annotations for the `EditSession`.",
            "line": " src/EditSession.ts:823"
        },
        {
            "message": "Missing item type\nClears all the annotations for this session.\nThis function also triggers the `'changeAnnotation'` event.\nThis is called by the language modes when the worker terminates.",
            "line": " src/EditSession.ts:831"
        },
        {
            "message": "Missing item type\nIf `text` contains either the newline (`\\n`) or carriage-return ('\\r') characters, `$autoNewLine` stores that value.",
            "line": " src/EditSession.ts:840"
        },
        {
            "message": "Missing item type\nGiven a starting row and column, this method returns the `Range` of the first word boundary it finds.",
            "line": " src/EditSession.ts:855"
        },
        {
            "message": "Missing item type\nGets the range of a word, including its right whitespace.",
            "line": " src/EditSession.ts:896"
        },
        {
            "message": "Missing item type\n{:EditorDocument.setNewLineMode.desc}",
            "line": " src/EditSession.ts:914"
        },
        {
            "message": "Missing item type\nReturns the current new line mode.",
            "line": " src/EditSession.ts:925"
        },
        {
            "message": "Missing item type\nIdentifies if you want to use a worker for the `EditSession`.",
            "line": " src/EditSession.ts:935"
        },
        {
            "message": "Missing item type\nReturns `true` if workers are being used.",
            "line": " src/EditSession.ts:942"
        },
        {
            "message": "Missing item type\nReloads all the tokens on the current session. This function calls [[BackgroundTokenizer.start `BackgroundTokenizer.start ()`]] to all the rows; it also emits the `'tokenizerUpdate'` event.",
            "line": " src/EditSession.ts:947"
        },
        {
            "message": "Missing item type\nSets a new text mode for the `EditSession`. This method also emits the `'changeMode'` event. If a [[BackgroundTokenizer `BackgroundTokenizer`]] is set, the `'tokenizerUpdate'` event is also emitted.",
            "line": " src/EditSession.ts:957"
        },
        {
            "message": "Missing item type\nReturns the current text mode.",
            "line": " src/EditSession.ts:1076"
        },
        {
            "message": "Missing item type\nThis function sets the scroll top value. It also emits the `'changeScrollTop'` event.",
            "line": " src/EditSession.ts:1084"
        },
        {
            "message": "Missing item type\n[Returns the value of the distance between the top of the editor and the topmost part of the visible content.]{: #EditSession.getScrollTop}",
            "line": " src/EditSession.ts:1098"
        },
        {
            "message": "Missing item type\n[Sets the value of the distance between the left of the editor and the leftmost part of the visible content.]{: #EditSession.setScrollLeft}",
            "line": " src/EditSession.ts:1106"
        },
        {
            "message": "Missing item type\n[Returns the value of the distance between the left of the editor and the leftmost part of the visible content.]{: #EditSession.getScrollLeft}",
            "line": " src/EditSession.ts:1118"
        },
        {
            "message": "Missing item type\nReturns the width of the screen.",
            "line": " src/EditSession.ts:1126"
        },
        {
            "message": "Missing item type\nReturns a verbatim copy of the given line as it is in the document",
            "line": " src/EditSession.ts:1182"
        },
        {
            "message": "Missing item type\nReturns an array of strings of the rows between `firstRow` and `lastRow`. This function is inclusive of `lastRow`.",
            "line": " src/EditSession.ts:1194"
        },
        {
            "message": "Missing item type\nReturns the number of rows in the document.",
            "line": " src/EditSession.ts:1206"
        },
        {
            "message": "Missing item type\n{:EditorDocument.getTextRange.desc}",
            "line": " src/EditSession.ts:1214"
        },
        {
            "message": "Missing item type\nInserts a block of `text` and the indicated `position`.",
            "line": " src/EditSession.ts:1224"
        },
        {
            "message": "Missing item type\nRemoves the `range` from the document.",
            "line": " src/EditSession.ts:1236"
        },
        {
            "message": "Missing item type\nReverts previous changes to your document.",
            "line": " src/EditSession.ts:1248"
        },
        {
            "message": "Missing item type\nRe-implements a previously undone change to your document.",
            "line": " src/EditSession.ts:1282"
        },
        {
            "message": "Missing item type\nEnables or disables highlighting of the range where an undo occurred.",
            "line": " src/EditSession.ts:1312"
        },
        {
            "message": "Missing item type\nMoves a range of text from the given range to the given position. `toPosition` is an object that looks like this:\n ```json\n   { row: newRowLocation, column: newColumnLocation }\n ```",
            "line": " src/EditSession.ts:1396"
        },
        {
            "message": "Missing item type\nIndents all the rows, from `startRow` to `endRow` (inclusive), by prefixing each row with the token in `indentString`.\n\nIf `indentString` contains the `'\\t'` character, it's replaced by whatever is defined by [[EditSession.getTabString `getTabString()`]].",
            "line": " src/EditSession.ts:1456"
        },
        {
            "message": "Missing item type\nOutdents all the rows defined by the `start` and `end` properties of `range`.",
            "line": " src/EditSession.ts:1472"
        },
        {
            "message": "Missing item type\nShifts all the lines in the document up one, starting from `firstRow` and ending at `lastRow`.",
            "line": " src/EditSession.ts:1532"
        },
        {
            "message": "Missing item type\nShifts all the lines in the document down one, starting from `firstRow` and ending at `lastRow`.",
            "line": " src/EditSession.ts:1545"
        },
        {
            "message": "Missing item type\nDuplicates all the text between `firstRow` and `lastRow`.",
            "line": " src/EditSession.ts:1557"
        },
        {
            "message": "Missing item type\nSets whether or not line wrapping is enabled. If `useWrapMode` is different than the current value, the `'changeWrapMode'` event is emitted.",
            "line": " src/EditSession.ts:1631"
        },
        {
            "message": "Missing item type\nReturns `true` if wrap mode is being used; `false` otherwise.",
            "line": " src/EditSession.ts:1654"
        },
        {
            "message": "Missing item type\nSets the boundaries of wrap. Either value can be `null` to have an unconstrained wrap, or, they can be the same number to pin the limit. If the wrap limits for `min` or `max` are different, this method also emits the `'changeWrapMode'` event.",
            "line": " src/EditSession.ts:1666"
        },
        {
            "message": "Missing item type\nThis should generally only be called by the renderer when a resize is detected.",
            "line": " src/EditSession.ts:1685"
        },
        {
            "message": "Missing item type\nReturns the value of wrap limit.",
            "line": " src/EditSession.ts:1720"
        },
        {
            "message": "Missing item type\nSets the line length for soft wrap in the editor. Lines will break\n at a minimum of the given length minus 20 chars and at a maximum\n of the given number of chars.",
            "line": " src/EditSession.ts:1728"
        },
        {
            "message": "Missing item type\nReturns an object that defines the minimum and maximum of the wrap limit; it looks something like this:\n\n    { min: wrapLimitRange_min, max: wrapLimitRange_max }",
            "line": " src/EditSession.ts:1738"
        },
        {
            "message": "Missing item type\nGiven a string, returns an array of the display characters, including tabs and spaces.",
            "line": " src/EditSession.ts:2047"
        },
        {
            "message": "Missing item type\nCalculates the width of the string `str` on the screen while assuming that the string starts at the first column on the screen.",
            "line": " src/EditSession.ts:2087"
        },
        {
            "message": "Missing item type\nReturns number of screenrows in a wrapped line.",
            "line": " src/EditSession.ts:2126"
        },
        {
            "message": "Missing item type\nReturns the position (on screen) for the last character in the provided screen row.",
            "line": " src/EditSession.ts:2165"
        },
        {
            "message": "Missing item type\nFor the given document row and column, this returns the column position of the last screen row.",
            "line": " src/EditSession.ts:2177"
        },
        {
            "message": "Missing item type\nFor the given document row and column, this returns the document position of the last row.",
            "line": " src/EditSession.ts:2188"
        },
        {
            "message": "Missing item type\nFor the given row, this returns the split data.",
            "line": " src/EditSession.ts:2200"
        },
        {
            "message": "Missing item type\nThe distance to the next tab stop at the specified screen column.",
            "line": " src/EditSession.ts:2212"
        },
        {
            "message": "Missing item type\nConverts characters coordinates on the screen to characters coordinates within the document. [This takes into account code folding, word wrap, tab size, and any other visual modifications.]{: #conversionConsiderations}",
            "line": " src/EditSession.ts:2232"
        },
        {
            "message": "Missing item type\nConverts document coordinates to screen coordinates. {:conversionConsiderations}",
            "line": " src/EditSession.ts:2324"
        },
        {
            "message": "Missing item type\nFor the given document row and column, returns the screen column.",
            "line": " src/EditSession.ts:2427"
        },
        {
            "message": "Missing item type\nFor the given document row and column, returns the screen row.",
            "line": " src/EditSession.ts:2438"
        },
        {
            "message": "Missing item type\nReturns the length of the screen.",
            "line": " src/EditSession.ts:2453"
        },
        {
            "message": "Missing item type",
            "line": " src/EditSession.ts:2496"
        },
        {
            "message": "Missing item type\nAdds a new fold.",
            "line": " src/EditSession.ts:2745"
        },
        {
            "message": "Missing item type\nThe renderer container element.",
            "line": " src/Editor.ts:94"
        },
        {
            "message": "Missing item type\nSets the current document to `val`.",
            "line": " src/Editor.ts:505"
        },
        {
            "message": "Missing item type\nReturns the current session's content.",
            "line": " src/Editor.ts:529"
        },
        {
            "message": "Missing item type\nReturns the currently highlighted selection.",
            "line": " src/Editor.ts:539"
        },
        {
            "message": "Missing item type\n{:VirtualRenderer.setTheme}",
            "line": " src/Editor.ts:557"
        },
        {
            "message": "Missing item type\n{:VirtualRenderer.getTheme}",
            "line": " src/Editor.ts:566"
        },
        {
            "message": "Missing item type\n{:VirtualRenderer.setStyle}",
            "line": " src/Editor.ts:576"
        },
        {
            "message": "Missing item type\n{:VirtualRenderer.unsetStyle}",
            "line": " src/Editor.ts:586"
        },
        {
            "message": "Missing item type\nGets the current font size of the editor text.",
            "line": " src/Editor.ts:594"
        },
        {
            "message": "Missing item type\nSet a new font size (in pixels) for the editor text.",
            "line": " src/Editor.ts:601"
        },
        {
            "message": "Missing item type\nBrings the current `textInput` into focus.",
            "line": " src/Editor.ts:721"
        },
        {
            "message": "Missing item type\nReturns `true` if the current `textInput` is in focus.",
            "line": " src/Editor.ts:736"
        },
        {
            "message": "Missing item type\nBlurs the current `textInput`.",
            "line": " src/Editor.ts:744"
        },
        {
            "message": "Missing item type\nHandler for cursor or selection changes.",
            "line": " src/Editor.ts:827"
        },
        {
            "message": "Missing item type\nReturns the string of text currently highlighted.",
            "line": " src/Editor.ts:976"
        },
        {
            "message": "Missing item type\nReturns the string of text currently highlighted.",
            "line": " src/Editor.ts:990"
        },
        {
            "message": "Missing item type\nCalled whenever a text \"copy\" happens.",
            "line": " src/Editor.ts:1001"
        },
        {
            "message": "Missing item type\nCalled whenever a text \"cut\" happens.",
            "line": " src/Editor.ts:1008"
        },
        {
            "message": "Missing item type\nCalled whenever a text \"paste\" happens.",
            "line": " src/Editor.ts:1022"
        },
        {
            "message": "Missing item type\nInserts `text` into wherever the cursor is pointing.",
            "line": " src/Editor.ts:1042"
        },
        {
            "message": "Missing item type\nPass in `true` to enable overwrites in your session, or `false` to disable. If overwrites is enabled, any text you enter will type over any text after it. If the value of `overwrite` changes, this function also emites the `changeOverwrite` event.",
            "line": " src/Editor.ts:1145"
        },
        {
            "message": "Missing item type\nReturns `true` if overwrites are enabled; `false` otherwise.",
            "line": " src/Editor.ts:1156"
        },
        {
            "message": "Missing item type\nSets the value of overwrite to the opposite of whatever it currently is.",
            "line": " src/Editor.ts:1165"
        },
        {
            "message": "Missing item type\nSets how fast the mouse scrolling should do.",
            "line": " src/Editor.ts:1173"
        },
        {
            "message": "Missing item type\nReturns the value indicating how fast the mouse scroll speed is (in milliseconds).",
            "line": " src/Editor.ts:1181"
        },
        {
            "message": "Missing item type\nSets the delay (in milliseconds) of the mouse drag.",
            "line": " src/Editor.ts:1189"
        },
        {
            "message": "Missing item type\nReturns the current mouse drag delay.",
            "line": " src/Editor.ts:1197"
        },
        {
            "message": "Missing item type\nDraw selection markers spanning whole line, or only over selected text. Default value is \"line\"",
            "line": " src/Editor.ts:1210"
        },
        {
            "message": "Missing item type\nReturns the current selection style.",
            "line": " src/Editor.ts:1219"
        },
        {
            "message": "Missing item type\nDetermines whether or not the current line should be highlighted.",
            "line": " src/Editor.ts:1227"
        },
        {
            "message": "Missing item type\nReturns `true` if current lines are always highlighted.",
            "line": " src/Editor.ts:1235"
        },
        {
            "message": "Missing item type\nDetermines if the currently selected word should be highlighted.",
            "line": " src/Editor.ts:1251"
        },
        {
            "message": "Missing item type\nReturns `true` if currently highlighted words are to be highlighted.",
            "line": " src/Editor.ts:1260"
        },
        {
            "message": "Missing item type\nIf `showInvisibles` is set to `true`, invisible characters&mdash;like spaces or new lines&mdash;are show in the editor.",
            "line": " src/Editor.ts:1276"
        },
        {
            "message": "Missing item type\nReturns `true` if invisible characters are being shown.",
            "line": " src/Editor.ts:1285"
        },
        {
            "message": "Missing item type\nIf `showPrintMargin` is set to `true`, the print margin is shown in the editor.",
            "line": " src/Editor.ts:1301"
        },
        {
            "message": "Missing item type\nReturns `true` if the print margin is being shown.",
            "line": " src/Editor.ts:1309"
        },
        {
            "message": "Missing item type\nSets the column defining where the print margin should be.",
            "line": " src/Editor.ts:1317"
        },
        {
            "message": "Missing item type\nReturns the column number of where the print margin is.",
            "line": " src/Editor.ts:1325"
        },
        {
            "message": "Missing item type\nIf `readOnly` is true, then the editor is set to read-only mode, and none of the content can change.",
            "line": " src/Editor.ts:1333"
        },
        {
            "message": "Missing item type\nReturns `true` if the editor is set to read-only mode.",
            "line": " src/Editor.ts:1342"
        },
        {
            "message": "Missing item type\nSpecifies whether to use behaviors or not. [\"Behaviors\" in this case is the auto-pairing of special characters, like quotation marks, parenthesis, or brackets.]{: #BehaviorsDef}",
            "line": " src/Editor.ts:1350"
        },
        {
            "message": "Missing item type\nReturns `true` if the behaviors are currently enabled. {:BehaviorsDef}",
            "line": " src/Editor.ts:1359"
        },
        {
            "message": "Missing item type\nSpecifies whether to use wrapping behaviors or not, i.e. automatically wrapping the selection with characters such as brackets\nwhen such a character is typed in.",
            "line": " src/Editor.ts:1368"
        },
        {
            "message": "Missing item type\nReturns `true` if the wrapping behaviors are currently enabled.",
            "line": " src/Editor.ts:1378"
        },
        {
            "message": "Missing item type\nIndicates whether the fold widgets should be shown or not.",
            "line": " src/Editor.ts:1385"
        },
        {
            "message": "Missing item type\nReturns `true` if the fold widgets are shown.",
            "line": " src/Editor.ts:1393"
        },
        {
            "message": "Missing item type\nRemoves words of text from the editor. A \"word\" is defined as a string of characters bookended by whitespace.",
            "line": " src/Editor.ts:1409"
        },
        {
            "message": "Missing item type\nRemoves the word directly to the right of the current selection.",
            "line": " src/Editor.ts:1445"
        },
        {
            "message": "Missing item type\nRemoves the word directly to the left of the current selection.",
            "line": " src/Editor.ts:1456"
        },
        {
            "message": "Missing item type\nRemoves all the words to the left of the current selection, until the start of the line.",
            "line": " src/Editor.ts:1467"
        },
        {
            "message": "Missing item type\nRemoves all the words to the right of the current selection, until the end of the line.",
            "line": " src/Editor.ts:1478"
        },
        {
            "message": "Missing item type\nSplits the line at the current selection (by inserting an `'\\n'`).",
            "line": " src/Editor.ts:1495"
        },
        {
            "message": "Missing item type\nTransposes current line.",
            "line": " src/Editor.ts:1509"
        },
        {
            "message": "Missing item type\nConverts the current selection entirely into lowercase.",
            "line": " src/Editor.ts:1535"
        },
        {
            "message": "Missing item type\nConverts the current selection entirely into uppercase.",
            "line": " src/Editor.ts:1550"
        },
        {
            "message": "Missing item type\nInserts an indentation into the current cursor position or indents the selected lines.",
            "line": " src/Editor.ts:1565"
        },
        {
            "message": "Missing item type\nIndents the current line.",
            "line": " src/Editor.ts:1607"
        },
        {
            "message": "Missing item type\nOutdents the current line.",
            "line": " src/Editor.ts:1616"
        },
        {
            "message": "Missing item type\nGiven the currently selected range, this function either comments all the lines, or uncomments all of them.",
            "line": " src/Editor.ts:1650"
        },
        {
            "message": "Missing item type\nWorks like [[EditSession.getTokenAt]], except it returns a number.",
            "line": " src/Editor.ts:1666"
        },
        {
            "message": "Missing item type\nIf the character before the cursor is a number, this functions changes its value by `amount`.",
            "line": " src/Editor.ts:1689"
        },
        {
            "message": "Missing item type\nRemoves all the lines in the current selection",
            "line": " src/Editor.ts:1735"
        },
        {
            "message": "Missing item type\nShifts all the selected lines down one row.",
            "line": " src/Editor.ts:1771"
        },
        {
            "message": "Missing item type\nShifts all the selected lines up one row.",
            "line": " src/Editor.ts:1783"
        },
        {
            "message": "Missing item type\nMoves a range of text from the given range to the given position. `toPosition` is an object that looks like this:\n```json\n   { row: newRowLocation, column: newColumnLocation }\n```",
            "line": " src/Editor.ts:1794"
        },
        {
            "message": "Missing item type\nCopies all the selected lines up one row.",
            "line": " src/Editor.ts:1809"
        },
        {
            "message": "Missing item type\nCopies all the selected lines down one row.",
            "line": " src/Editor.ts:1821"
        },
        {
            "message": "Missing item type\nExecutes a specific function, which can be anything that manipulates selected lines, such as copying them, duplicating them, or shifting them.",
            "line": " src/Editor.ts:1833"
        },
        {
            "message": "Missing item type\nReturns an object indicating the currently selected rows.",
            "line": " src/Editor.ts:1877"
        },
        {
            "message": "Missing item type\n{:VirtualRenderer.getFirstVisibleRow}",
            "line": " src/Editor.ts:1903"
        },
        {
            "message": "Missing item type\n{:VirtualRenderer.getLastVisibleRow}",
            "line": " src/Editor.ts:1913"
        },
        {
            "message": "Missing item type\nIndicates if the row is currently visible on the screen.",
            "line": " src/Editor.ts:1923"
        },
        {
            "message": "Missing item type\nIndicates if the entire row is currently visible on the screen.",
            "line": " src/Editor.ts:1933"
        },
        {
            "message": "Missing item type\nReturns the number of currently visibile rows.",
            "line": " src/Editor.ts:1944"
        },
        {
            "message": "Missing item type\nFIXME: The semantics of select are not easily understood.",
            "line": " src/Editor.ts:1952"
        },
        {
            "message": "Missing item type\nSelects the text from the current position of the document until where a \"page down\" finishes.",
            "line": " src/Editor.ts:1986"
        },
        {
            "message": "Missing item type\nSelects the text from the current position of the document until where a \"page up\" finishes.",
            "line": " src/Editor.ts:1993"
        },
        {
            "message": "Missing item type\nShifts the document to wherever \"page down\" is, as well as moving the cursor position.",
            "line": " src/Editor.ts:2000"
        },
        {
            "message": "Missing item type\nShifts the document to wherever \"page up\" is, as well as moving the cursor position.",
            "line": " src/Editor.ts:2007"
        },
        {
            "message": "Missing item type\nScrolls the document to wherever \"page down\" is, without changing the cursor position.",
            "line": " src/Editor.ts:2014"
        },
        {
            "message": "Missing item type\nScrolls the document to wherever \"page up\" is, without changing the cursor position.",
            "line": " src/Editor.ts:2021"
        },
        {
            "message": "Missing item type\nMoves the editor to the specified row.",
            "line": " src/Editor.ts:2028"
        },
        {
            "message": "Missing item type\nScrolls to a line. If `center` is `true`, it puts the line in middle of screen (or attempts to).",
            "line": " src/Editor.ts:2036"
        },
        {
            "message": "Missing item type\nAttempts to center the current selection on the screen.",
            "line": " src/Editor.ts:2050"
        },
        {
            "message": "Missing item type\nGets the current position of the cursor.",
            "line": " src/Editor.ts:2062"
        },
        {
            "message": "Missing item type\nReturns the screen position of the cursor.",
            "line": " src/Editor.ts:2076"
        },
        {
            "message": "Missing item type\n{:Selection.getRange}",
            "line": " src/Editor.ts:2084"
        },
        {
            "message": "Missing item type\nSelects all the text in editor.",
            "line": " src/Editor.ts:2093"
        },
        {
            "message": "Missing item type\n{:Selection.clearSelection}",
            "line": " src/Editor.ts:2103"
        },
        {
            "message": "Missing item type\nMoves the cursor to the specified row and column. Note that this does not de-select the current selection.",
            "line": " src/Editor.ts:2111"
        },
        {
            "message": "Missing item type\nMoves the cursor to the position indicated by `pos.row` and `pos.column`.",
            "line": " src/Editor.ts:2123"
        },
        {
            "message": "Missing item type\nMoves the cursor's row and column to the next matching bracket or HTML tag.",
            "line": " src/Editor.ts:2134"
        },
        {
            "message": "Missing item type\nMoves the cursor to the specified line number, and also into the indiciated column.",
            "line": " src/Editor.ts:2301"
        },
        {
            "message": "Missing item type\nMoves the cursor to the specified row and column. Note that this does de-select the current selection.",
            "line": " src/Editor.ts:2322"
        },
        {
            "message": "Missing item type\nMoves the cursor up in the document the specified number of times. Note that this does de-select the current selection.",
            "line": " src/Editor.ts:2334"
        },
        {
            "message": "Missing item type\nMoves the cursor down in the document the specified number of times. Note that this does de-select the current selection.",
            "line": " src/Editor.ts:2349"
        },
        {
            "message": "Missing item type\nMoves the cursor left in the document the specified number of times. Note that this does de-select the current selection.",
            "line": " src/Editor.ts:2364"
        },
        {
            "message": "Missing item type\nMoves the cursor right in the document the specified number of times. Note that this does de-select the current selection.",
            "line": " src/Editor.ts:2384"
        },
        {
            "message": "Missing item type\nMoves the cursor to the start of the current line. Note that this does de-select the current selection.",
            "line": " src/Editor.ts:2404"
        },
        {
            "message": "Missing item type\nMoves the cursor to the end of the current line. Note that this does de-select the current selection.",
            "line": " src/Editor.ts:2413"
        },
        {
            "message": "Missing item type\nMoves the cursor to the end of the current file. Note that this does de-select the current selection.",
            "line": " src/Editor.ts:2422"
        },
        {
            "message": "Missing item type\nMoves the cursor to the start of the current file. Note that this does de-select the current selection.",
            "line": " src/Editor.ts:2431"
        },
        {
            "message": "Missing item type\nMoves the cursor to the word immediately to the right of the current position. Note that this does de-select the current selection.",
            "line": " src/Editor.ts:2440"
        },
        {
            "message": "Missing item type\nMoves the cursor to the word immediately to the left of the current position. Note that this does de-select the current selection.",
            "line": " src/Editor.ts:2449"
        },
        {
            "message": "Missing item type\nReplaces the first occurance of `options.needle` with the value in `replacement`.",
            "line": " src/Editor.ts:2458"
        },
        {
            "message": "Missing item type\nReplaces all occurances of `options.needle` with the value in `replacement`.",
            "line": " src/Editor.ts:2485"
        },
        {
            "message": "Missing item type\n{:Search.getOptions} For more information on `options`, see [[Search `Search`]].",
            "line": " src/Editor.ts:2530"
        },
        {
            "message": "Missing item type\nAttempts to find `needle` within the document. For more information on `options`, see [[Search `Search`]].",
            "line": " src/Editor.ts:2539"
        },
        {
            "message": "Missing item type\nPerforms another search for `needle` in the document. For more information on `options`, see [[Search `Search`]].",
            "line": " src/Editor.ts:2586"
        },
        {
            "message": "Missing item type\nPerforms a search for `needle` backwards. For more information on `options`, see [[Search `Search`]].",
            "line": " src/Editor.ts:2599"
        },
        {
            "message": "Missing item type\n{:UndoManager.undo}",
            "line": " src/Editor.ts:2623"
        },
        {
            "message": "Missing item type\n{:UndoManager.redo}",
            "line": " src/Editor.ts:2634"
        },
        {
            "message": "Missing item type\nCleans up the entire editor.",
            "line": " src/Editor.ts:2645"
        },
        {
            "message": "Missing item type\nEnables automatic scrolling of the cursor into view when editor itself is inside scrollable element",
            "line": " src/Editor.ts:2654"
        },
        {
            "message": "Missing item type\nThe function to call to release a captured mouse.",
            "line": " src/Editor.ts:2896"
        },
        {
            "message": "Missing item type\nCached text coordinates following getDocumentPosition()",
            "line": " src/Editor.ts:3186"
        },
        {
            "message": "Missing item type\nReturns an array of strings of the rows between `firstRow` and `lastRow`.\nThis function is inclusive of `lastRow`.",
            "line": " src/EditorDocument.ts:206"
        },
        {
            "message": "Missing item type\nInserts the elements in `lines` into the document, starting at the row index given by `row`. This method also triggers the `'change'` event.",
            "line": " src/EditorDocument.ts:313"
        },
        {
            "message": "Missing item type\nInserts a new line into the document at the current row's `position`. This method also triggers the `'change'` event.",
            "line": " src/EditorDocument.ts:359"
        },
        {
            "message": "Missing item type\nRemoves the new line between `row` and the row immediately following it. This method also triggers the `'change'` event.",
            "line": " src/EditorDocument.ts:523"
        },
        {
            "message": "Missing item type\nReplaces a range in the document with the new `text`.",
            "line": " src/EditorDocument.ts:545"
        },
        {
            "message": "Missing item type\nApplies all the changes previously accumulated. These can be either `'includeText'`, `'insertLines'`, `'removeText'`, and `'removeLines'`.",
            "line": " src/EditorDocument.ts:575"
        },
        {
            "message": "Missing item type\nReverts any changes previously applied. These can be either `'includeText'`, `'insertLines'`, `'removeText'`, and `'removeLines'`.",
            "line": " src/EditorDocument.ts:594"
        },
        {
            "message": "Missing item type\nConverts an index position in a document to a `{row, column}` object.\n\nIndex refers to the \"absolute position\" of a character in the document. For example:\n\n```javascript\nvar x = 0; // 10 characters, plus one for newline\nvar y = -1;\n```\n\nHere, `y` is an index 15: 11 characters for the first row, and 5 characters until `y` in the second.",
            "line": " src/EditorDocument.ts:614"
        },
        {
            "message": "Missing item type\nConverts the `{row, column}` position in a document to the character's index.\n\nIndex refers to the \"absolute position\" of a character in the document. For example:\n\n```javascript\nvar x = 0; // 10 characters, plus one for newline\nvar y = -1;\n```\n\nHere, `y` is an index 15: 11 characters for the first row, and 5 characters until `y` in the second.",
            "line": " src/EditorDocument.ts:641"
        },
        {
            "message": "Missing item type\nCreates a new `HScrollBar`. `parent` is the owner of the scroll bar.",
            "line": " src/HScrollBar.ts:13"
        },
        {
            "message": "Missing item type\nReturns the height of the scroll bar.",
            "line": " src/HScrollBar.ts:46"
        },
        {
            "message": "Missing item type\nSets the width of the scroll bar, in pixels.",
            "line": " src/HScrollBar.ts:54"
        },
        {
            "message": "Missing item type\nSets the inner width of the scroll bar, in pixels.",
            "line": " src/HScrollBar.ts:62"
        },
        {
            "message": "Missing item type\nSets the scroll width of the scroll bar, in pixels.",
            "line": " src/HScrollBar.ts:71"
        },
        {
            "message": "Missing item type\nSets the scroll left of the scroll bar.",
            "line": " src/HScrollBar.ts:79"
        },
        {
            "message": "Missing item type\nA marker id that is being sneaked onto the Range.",
            "line": " src/Range.ts:52"
        },
        {
            "message": "Missing item type\nReturns a string containing the range's row and column information.",
            "line": " src/Range.ts:96"
        },
        {
            "message": "Missing item type\nReturns `true` if passed in `range` intersects with the one calling this method.",
            "line": " src/Range.ts:200"
        },
        {
            "message": "Missing item type\nReturns `true` if the caller's ending row point is the same as `row`, and if the caller's ending column is the same as `column`.",
            "line": " src/Range.ts:211"
        },
        {
            "message": "Missing item type\nReturns `true` if the caller's starting row point is the same as `row`, and if the caller's starting column is the same as `column`.",
            "line": " src/Range.ts:222"
        },
        {
            "message": "Missing item type\nSets the starting row and column for the range.",
            "line": " src/Range.ts:233"
        },
        {
            "message": "Missing item type\nSets the starting row and column for the range.",
            "line": " src/Range.ts:251"
        },
        {
            "message": "Missing item type\nReturns `true` if the `row` and `column` are within the given range.",
            "line": " src/Range.ts:269"
        },
        {
            "message": "Missing item type\nReturns `true` if the `row` and `column` are within the given range's starting points.",
            "line": " src/Range.ts:290"
        },
        {
            "message": "Missing item type\nReturns `true` if the `row` and `column` are within the given range's ending points.",
            "line": " src/Range.ts:310"
        },
        {
            "message": "Missing item type\nChecks the row and column points with the row and column points of the calling range.",
            "line": " src/Range.ts:331"
        },
        {
            "message": "Missing item type\nChecks the row and column points with the row and column points of the calling range.",
            "line": " src/Range.ts:372"
        },
        {
            "message": "Missing item type\nChecks the row and column points with the row and column points of the calling range.",
            "line": " src/Range.ts:401"
        },
        {
            "message": "Missing item type\nChecks the row and column points with the row and column points of the calling range.",
            "line": " src/Range.ts:429"
        },
        {
            "message": "Missing item type\nReturns the part of the current `EditorRange` that occurs within the boundaries of `firstRow` and `lastRow` as a new `EditorRange` object.",
            "line": " src/Range.ts:454"
        },
        {
            "message": "Missing item type\nChanges the row and column points for the calling range for both the starting and ending points.",
            "line": " src/Range.ts:476"
        },
        {
            "message": "Missing item type\nReturns `true` if the range spans across multiple lines.",
            "line": " src/Range.ts:501"
        },
        {
            "message": "Missing item type\nReturns a duplicate of the calling range.",
            "line": " src/Range.ts:509"
        },
        {
            "message": "Missing item type\nReturns a range containing the starting and ending rows of the original range, but with a column value of `0`.",
            "line": " src/Range.ts:518"
        },
        {
            "message": "Missing item type\nCreates and returns a new `EditorRange` based on the row and column of the given parameters.",
            "line": " src/Range.ts:537"
        },
        {
            "message": "Missing item type\nBatches changes (that force something to be redrawn) in the background.",
            "line": " src/RenderLoop.ts:3"
        },
        {
            "message": "Missing item type\nSets the search options via the `options` parameter.",
            "line": " src/Search.ts:62"
        },
        {
            "message": "Missing item type\n[Returns an object containing all the search options.]{: #Search.getOptions}",
            "line": " src/Search.ts:75"
        },
        {
            "message": "Missing item type\nSets the search options via the `options` parameter.",
            "line": " src/Search.ts:83"
        },
        {
            "message": "Missing item type\nSearches for `options.needle`. If found, this method returns the [[Range `Range`]] where the text first occurs. If `options.backwards` is `true`, the search goes backwards in the session.",
            "line": " src/Search.ts:92"
        },
        {
            "message": "Missing item type\nSearches for all occurances `options.needle`. If found, this method returns an array of [[Range `Range`s]] where the text first occurs. If `options.backwards` is `true`, the search goes backwards in the session.",
            "line": " src/Search.ts:119"
        },
        {
            "message": "Missing item type\nSearches for `options.needle` in `input`, and, if found, replaces it with `replacement`.",
            "line": " src/Search.ts:195"
        },
        {
            "message": "Missing item type\nCreates a new `Selection` object.",
            "line": " src/Selection.ts:58"
        },
        {
            "message": "Missing item type\nReturns `true` if the selection is empty.",
            "line": " src/Selection.ts:104"
        },
        {
            "message": "Missing item type\nReturns `true` if the selection is a multi-line.",
            "line": " src/Selection.ts:117"
        },
        {
            "message": "Missing item type\nReturns an object containing the `row` and `column` current position of the cursor.",
            "line": " src/Selection.ts:129"
        },
        {
            "message": "Missing item type\nSets the row and column position of the anchor. This function also emits the `'changeSelection'` event.",
            "line": " src/Selection.ts:137"
        },
        {
            "message": "Missing item type\nReturns an object containing the `row` and `column` of the calling selection anchor.",
            "line": " src/Selection.ts:151"
        },
        {
            "message": "Missing item type\nReturns an object containing the `row` and `column` of the calling selection lead.",
            "line": " src/Selection.ts:164"
        },
        {
            "message": "Missing item type\nShifts the selection up (or down, if [[Selection.isBackwards `isBackwards()`]] is true) the given number of columns.",
            "line": " src/Selection.ts:173"
        },
        {
            "message": "Missing item type\nReturns `true` if the selection is going backwards in the document.",
            "line": " src/Selection.ts:201"
        },
        {
            "message": "Missing item type\n[Returns the [[Range]] for the selected text.]{: #Selection.getRange}",
            "line": " src/Selection.ts:211"
        },
        {
            "message": "Missing item type\n[Empties the selection (by de-selecting it). This function also emits the `'changeSelection'` event.]{: #Selection.clearSelection}",
            "line": " src/Selection.ts:230"
        },
        {
            "message": "Missing item type\nSelects all the text in the document.",
            "line": " src/Selection.ts:240"
        },
        {
            "message": "Missing item type\nMoves the selection cursor to the indicated row and column.",
            "line": " src/Selection.ts:283"
        },
        {
            "message": "Missing item type\nMoves the selection cursor to the row and column indicated by `pos`.",
            "line": " src/Selection.ts:297"
        },
        {
            "message": "Missing item type\nMoves the selection cursor to the indicated row and column.",
            "line": " src/Selection.ts:310"
        },
        {
            "message": "Missing item type\nMoves the selection cursor to the row and column indicated by `pos`.",
            "line": " src/Selection.ts:321"
        },
        {
            "message": "Missing item type\nMoves the selection up one row.",
            "line": " src/Selection.ts:331"
        },
        {
            "message": "Missing item type\nMoves the selection down one row.",
            "line": " src/Selection.ts:339"
        },
        {
            "message": "Missing item type\nMoves the selection right one column.",
            "line": " src/Selection.ts:347"
        },
        {
            "message": "Missing item type\nMoves the selection left one column.",
            "line": " src/Selection.ts:356"
        },
        {
            "message": "Missing item type\nMoves the selection to the beginning of the current line.",
            "line": " src/Selection.ts:364"
        },
        {
            "message": "Missing item type\nMoves the selection to the end of the current line.",
            "line": " src/Selection.ts:372"
        },
        {
            "message": "Missing item type\nMoves the selection to the end of the file.",
            "line": " src/Selection.ts:380"
        },
        {
            "message": "Missing item type\nMoves the selection to the start of the file.",
            "line": " src/Selection.ts:388"
        },
        {
            "message": "Missing item type\nMoves the selection to the first word on the right.",
            "line": " src/Selection.ts:396"
        },
        {
            "message": "Missing item type\nMoves the selection to the first word on the left.",
            "line": " src/Selection.ts:404"
        },
        {
            "message": "Missing item type\nMoves the selection to highlight the entire word.",
            "line": " src/Selection.ts:412"
        },
        {
            "message": "Missing item type\nSelects an entire word boundary.",
            "line": " src/Selection.ts:425"
        },
        {
            "message": "Missing item type\nSelects a word, including its right whitespace.",
            "line": " src/Selection.ts:433"
        },
        {
            "message": "Missing item type\nSelects the entire line.",
            "line": " src/Selection.ts:464"
        },
        {
            "message": "Missing item type\nMoves the cursor up one row.",
            "line": " src/Selection.ts:471"
        },
        {
            "message": "Missing item type\nMoves the cursor down one row.",
            "line": " src/Selection.ts:479"
        },
        {
            "message": "Missing item type\nMoves the cursor left one column.",
            "line": " src/Selection.ts:487"
        },
        {
            "message": "Missing item type\nMoves the cursor right one column.",
            "line": " src/Selection.ts:512"
        },
        {
            "message": "Missing item type\nMoves the cursor to the start of the line.",
            "line": " src/Selection.ts:539"
        },
        {
            "message": "Missing item type\nMoves the cursor to the end of the line.",
            "line": " src/Selection.ts:565"
        },
        {
            "message": "Missing item type\nMoves the cursor to the end of the file.",
            "line": " src/Selection.ts:584"
        },
        {
            "message": "Missing item type\nMoves the cursor to the start of the file.",
            "line": " src/Selection.ts:594"
        },
        {
            "message": "Missing item type\nMoves the cursor to the word on the right.",
            "line": " src/Selection.ts:602"
        },
        {
            "message": "Missing item type\nMoves the cursor to the word on the left.",
            "line": " src/Selection.ts:648"
        },
        {
            "message": "Missing item type\nMoves the cursor to position indicated by the parameters. Negative numbers move the cursor backwards in the document.",
            "line": " src/Selection.ts:808"
        },
        {
            "message": "Missing item type\nMoves the selection to the position indicated by its `row` and `column`.",
            "line": " src/Selection.ts:840"
        },
        {
            "message": "Missing item type\nMoves the cursor to the row and column provided. [If `preventUpdateDesiredColumn` is `true`, then the cursor stays in the same column position as its original point.]{: #preventUpdateBoolDesc}",
            "line": " src/Selection.ts:850"
        },
        {
            "message": "Missing item type\nMoves the cursor to the screen position indicated by row and column. {:preventUpdateBoolDesc}",
            "line": " src/Selection.ts:872"
        },
        {
            "message": "Missing item type\nSaves the current cursor position and calls `func` that can change the cursor\npostion. The result is the range of the starting and eventual cursor position.\nWill reset the cursor position.",
            "line": " src/Selection.ts:914"
        },
        {
            "message": "Missing item type\nCreates a new token iterator object. The inital token index is set to the provided row and column coordinates.",
            "line": " src/TokenIterator.ts:39"
        },
        {
            "message": "Missing item type\nTokenizes all the items from the current point to the row prior in the document.",
            "line": " src/TokenIterator.ts:62"
        },
        {
            "message": "Missing item type\nTokenizes all the items from the current point until the next row in the document. If the current point is at the end of the file, this function returns `null`. Otherwise, it returns the tokenized string.",
            "line": " src/TokenIterator.ts:84"
        },
        {
            "message": "Missing item type\nReturns the current tokenized string.",
            "line": " src/TokenIterator.ts:108"
        },
        {
            "message": "Missing item type\nReturns the current row.",
            "line": " src/TokenIterator.ts:117"
        },
        {
            "message": "Missing item type\nReturns the current column.",
            "line": " src/TokenIterator.ts:126"
        },
        {
            "message": "Missing item type\nConstructs a new tokenizer based on the given rules and flags.",
            "line": " src/Tokenizer.ts:38"
        },
        {
            "message": "Missing item type\nReturns an object containing two properties: `tokens`, which contains all the tokens; and `state`, the current state.",
            "line": " src/Tokenizer.ts:224"
        },
        {
            "message": "Missing item type\nProvides a means for implementing your own undo manager. `options` has one property, `args`, an [[Array `Array`]], with two elements:\n\n- `args[0]` is an array of deltas\n- `args[1]` is the document to associate with",
            "line": " src/UndoManager.ts:68"
        },
        {
            "message": "Missing item type\nCreates a new `VScrollBar`. `parent` is the owner of the scroll bar.",
            "line": " src/VScrollBar.ts:14"
        },
        {
            "message": "Missing item type\nReturns the width of the scroll bar.",
            "line": " src/VScrollBar.ts:46"
        },
        {
            "message": "Missing item type\nSets the height of the scroll bar, in pixels.",
            "line": " src/VScrollBar.ts:54"
        },
        {
            "message": "Missing item type\nSets the inner height of the scroll bar, in pixels.",
            "line": " src/VScrollBar.ts:62"
        },
        {
            "message": "Missing item type\nSets the scroll height of the scroll bar, in pixels.",
            "line": " src/VScrollBar.ts:71"
        },
        {
            "message": "Missing item type\nSets the scroll top of the scroll bar.",
            "line": " src/VScrollBar.ts:79"
        },
        {
            "message": "Missing item type\nThe loaded theme object. This allows us to remove a theme.",
            "line": " src/VirtualRenderer.ts:96"
        },
        {
            "message": "Missing item type\nTriggers a partial update of the text, from the range given by the two parameters.",
            "line": " src/VirtualRenderer.ts:341"
        },
        {
            "message": "Missing item type\nTriggers a full update of the text, for all the rows.",
            "line": " src/VirtualRenderer.ts:413"
        },
        {
            "message": "Missing item type\nTriggers a full update of all the layers, for all the rows.",
            "line": " src/VirtualRenderer.ts:420"
        },
        {
            "message": "Missing item type\nUpdates the font size.",
            "line": " src/VirtualRenderer.ts:431"
        },
        {
            "message": "Missing item type\n[Triggers a resize of the editor.]{: #VirtualRenderer.onResize}",
            "line": " src/VirtualRenderer.ts:447"
        },
        {
            "message": "Missing item type\nAdjusts the wrap limit, which is the number of characters that can fit within the width of the edit area on screen.",
            "line": " src/VirtualRenderer.ts:553"
        },
        {
            "message": "Missing item type\nIdentifies whether you want to show invisible characters or not.",
            "line": " src/VirtualRenderer.ts:583"
        },
        {
            "message": "Missing item type\nReturns whether invisible characters are being shown or not.",
            "line": " src/VirtualRenderer.ts:591"
        },
        {
            "message": "Missing item type\nIdentifies whether you want to show the print margin or not.",
            "line": " src/VirtualRenderer.ts:607"
        },
        {
            "message": "Missing item type\nReturns whether the print margin is being shown or not.",
            "line": " src/VirtualRenderer.ts:616"
        },
        {
            "message": "Missing item type\nSets the column defining where the print margin should be.",
            "line": " src/VirtualRenderer.ts:624"
        },
        {
            "message": "Missing item type\nReturns the column number of where the print margin is.",
            "line": " src/VirtualRenderer.ts:632"
        },
        {
            "message": "Missing item type\nReturns `true` if the gutter is being shown.",
            "line": " src/VirtualRenderer.ts:640"
        },
        {
            "message": "Missing item type\nIdentifies whether you want to show the gutter or not.",
            "line": " src/VirtualRenderer.ts:648"
        },
        {
            "message": "Missing item type\nReturns the root element containing this renderer.",
            "line": " src/VirtualRenderer.ts:707"
        },
        {
            "message": "Missing item type\nReturns the element that the mouse events are attached to",
            "line": " src/VirtualRenderer.ts:716"
        },
        {
            "message": "Missing item type\nReturns the element to which the hidden text area is added.",
            "line": " src/VirtualRenderer.ts:725"
        },
        {
            "message": "Missing item type\n[Returns the index of the first visible row.]{: #VirtualRenderer.getFirstVisibleRow}",
            "line": " src/VirtualRenderer.ts:767"
        },
        {
            "message": "Missing item type\nReturns the index of the first fully visible row. \"Fully\" here means that the characters in the row are not truncated; that the top and the bottom of the row are on the screen.",
            "line": " src/VirtualRenderer.ts:776"
        },
        {
            "message": "Missing item type\nReturns the index of the last fully visible row. \"Fully\" here means that the characters in the row are not truncated; that the top and the bottom of the row are on the screen.",
            "line": " src/VirtualRenderer.ts:785"
        },
        {
            "message": "Missing item type\n[Returns the index of the last visible row.]{: #VirtualRenderer.getLastVisibleRow}",
            "line": " src/VirtualRenderer.ts:795"
        },
        {
            "message": "Missing item type\nSets the padding for all the layers.",
            "line": " src/VirtualRenderer.ts:804"
        },
        {
            "message": "Missing item type\nReturns whether the horizontal scrollbar is set to be always visible.",
            "line": " src/VirtualRenderer.ts:831"
        },
        {
            "message": "Missing item type\nIdentifies whether you want to show the horizontal scrollbar or not.",
            "line": " src/VirtualRenderer.ts:840"
        },
        {
            "message": "Missing item type\nReturns whether the vertical scrollbar is set to be always visible.",
            "line": " src/VirtualRenderer.ts:848"
        },
        {
            "message": "Missing item type\nIdentifies whether you want to show the vertical scrollbar or not.",
            "line": " src/VirtualRenderer.ts:856"
        },
        {
            "message": "Missing item type\nSchedules an update to all the front markers in the document.",
            "line": " src/VirtualRenderer.ts:1164"
        },
        {
            "message": "Missing item type\nSchedules an update to all the back markers in the document.",
            "line": " src/VirtualRenderer.ts:1173"
        },
        {
            "message": "Missing item type\nRedraw breakpoints.",
            "line": " src/VirtualRenderer.ts:1182"
        },
        {
            "message": "Missing item type\nSets annotations for the gutter.",
            "line": " src/VirtualRenderer.ts:1190"
        },
        {
            "message": "Missing item type\nUpdates the cursor icon.",
            "line": " src/VirtualRenderer.ts:1200"
        },
        {
            "message": "Missing item type\nHides the cursor icon.",
            "line": " src/VirtualRenderer.ts:1208"
        },
        {
            "message": "Missing item type\nShows the cursor icon.",
            "line": " src/VirtualRenderer.ts:1216"
        },
        {
            "message": "Missing item type\nScrolls the cursor into the first visibile area of the editor",
            "line": " src/VirtualRenderer.ts:1230"
        },
        {
            "message": "Missing item type\n{:EditSession.getScrollTop}",
            "line": " src/VirtualRenderer.ts:1277"
        },
        {
            "message": "Missing item type\n{:EditSession.getScrollLeft}",
            "line": " src/VirtualRenderer.ts:1286"
        },
        {
            "message": "Missing item type\nReturns the first visible row, regardless of whether it's fully visible or not.",
            "line": " src/VirtualRenderer.ts:1295"
        },
        {
            "message": "Missing item type\nReturns the last visible row, regardless of whether it's fully visible or not.",
            "line": " src/VirtualRenderer.ts:1304"
        },
        {
            "message": "Missing item type\nGracefully scrolls from the top of the editor to the row indicated.",
            "line": " src/VirtualRenderer.ts:1313"
        },
        {
            "message": "Missing item type\nGracefully scrolls the editor to the row indicated.",
            "line": " src/VirtualRenderer.ts:1352"
        },
        {
            "message": "Missing item type\nScrolls the editor to the y pixel indicated.",
            "line": " src/VirtualRenderer.ts:1417"
        },
        {
            "message": "Missing item type\nScrolls the editor across the x-axis to the pixel indicated.",
            "line": " src/VirtualRenderer.ts:1430"
        },
        {
            "message": "Missing item type\nScrolls the editor across both x- and y-axes.",
            "line": " src/VirtualRenderer.ts:1441"
        },
        {
            "message": "Missing item type\nScrolls the editor across both x- and y-axes.",
            "line": " src/VirtualRenderer.ts:1451"
        },
        {
            "message": "Missing item type\nReturns `true` if you can still scroll by either parameter; in other words, you haven't reached the end of the file or line.",
            "line": " src/VirtualRenderer.ts:1461"
        },
        {
            "message": "Missing item type\nReturns an object containing the `pageX` and `pageY` coordinates of the document position.",
            "line": " src/VirtualRenderer.ts:1502"
        },
        {
            "message": "Missing item type\nFocuses the current container.",
            "line": " src/VirtualRenderer.ts:1521"
        },
        {
            "message": "Missing item type\nBlurs the current container.",
            "line": " src/VirtualRenderer.ts:1529"
        },
        {
            "message": "Missing item type",
            "line": " src/VirtualRenderer.ts:1555"
        },
        {
            "message": "Missing item type\nHides the current composition.",
            "line": " src/VirtualRenderer.ts:1565"
        },
        {
            "message": "Missing item type\n[Adds a new class, `style`, to the editor.]{: #VirtualRenderer.setStyle}",
            "line": " src/VirtualRenderer.ts:1656"
        },
        {
            "message": "Missing item type\n[Removes the class `style` from the editor.]{: #VirtualRenderer.unsetStyle}",
            "line": " src/VirtualRenderer.ts:1665"
        },
        {
            "message": "Missing item type",
            "line": " src/VirtualRenderer.ts:1679"
        },
        {
            "message": "Missing item type\nDestroys the text and cursor layers for this renderer.",
            "line": " src/VirtualRenderer.ts:1686"
        },
        {
            "message": "Missing item type\nImplementation of the Completer interface.",
            "line": " src/autocomplete.ts:103"
        },
        {
            "message": "Missing item type\nImplementation of the Completer interface.",
            "line": " src/autocomplete.ts:142"
        },
        {
            "message": "Missing item type\nImplementation of the Completer interface.",
            "line": " src/autocomplete.ts:164"
        },
        {
            "message": "Missing item type\nImplementation of the Completer interface.",
            "line": " src/autocomplete.ts:181"
        },
        {
            "message": "Missing item type",
            "line": " src/config.ts:53"
        },
        {
            "message": "Missing item type\nA map from module name to an array of callbacks.",
            "line": " src/config.ts:92"
        },
        {
            "message": "Missing item type\nWho calls this function?",
            "line": " src/config.ts:157"
        },
        {
            "message": "Missing item type\nmerge overlapping ranges",
            "line": " src/range_list.ts:95"
        },
        {
            "message": "Missing item type\nThe User Interface element leverages the existing Tooltip for consistency.",
            "line": " src/typeInfoTip.ts:4"
        },
        {
            "message": "Missing item type\nGets the Position based on mouse x,y coordinates",
            "line": " src/typeInfoTip.ts:29"
        }
    ]
}