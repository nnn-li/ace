"use strict";
import Range from '../Range';
export default class EditorPosition {
    constructor(editor) {
        this.editor = editor;
    }
    getPositionChars(pos) {
        var doc = this.editor.getSession().getDocument();
        return EditorPosition.getChars(doc, pos);
    }
    getPositionFromChars(chars) {
        var doc = this.editor.getSession().getDocument();
        return EditorPosition.getPosition(doc, chars);
    }
    getCurrentPositionChars() {
        return this.getPositionChars(this.editor.getCursorPosition());
    }
    getCurrentLeftChar() {
        return this.getPositionLeftChar(this.editor.getCursorPosition());
    }
    getTextAtCursorPosition(cursor) {
        var range = new Range(cursor.row, cursor.column, cursor.row, cursor.column + 1);
        return this.editor.getSession().getDocument().getTextRange(range);
    }
    getPositionLeftChar(cursor) {
        var range = new Range(cursor.row, cursor.column, cursor.row, cursor.column - 1);
        return this.editor.getSession().getDocument().getTextRange(range);
    }
    static getPosition(doc, chars) {
        var i;
        var line;
        var lines = doc.getAllLines();
        var count = 0;
        var row = 0;
        for (i in lines) {
            line = lines[i];
            if (chars < (count + (line.length + 1))) {
                return { row: row, column: chars - count };
            }
            count += line.length + 1;
            row += 1;
        }
        return { row: row, column: chars - count };
    }
    static getChars(doc, pos) {
        return EditorPosition.getLinesChars(doc.getLines(0, pos.row - 1)) + pos.column;
    }
    static getLinesChars(lines) {
        var count = 0;
        lines.forEach(function (line) {
            return count += line.length + 1;
        });
        return count;
    }
    static getPositionChars(editor, pos) {
        var doc = editor.getSession().getDocument();
        return EditorPosition.getChars(doc, pos);
    }
}
//# sourceMappingURL=data:application/json;base64,