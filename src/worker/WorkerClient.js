"use strict";
import { qualifyURL } from '../lib/net';
import EventEmitterClass from '../lib/EventEmitterClass';
export default class WorkerClient {
    constructor(workerUrl) {
        this.callbacks = {};
        this.callbackId = 1;
        this.eventBus = new EventEmitterClass(this);
        this.sendDeltaQueue = this.sendDeltaQueue.bind(this);
        this.changeListener = this.changeListener.bind(this);
        this.onMessage = this.onMessage.bind(this);
        var workerUrl = qualifyURL(workerUrl);
        try {
            this.$worker = new Worker(workerUrl);
        }
        catch (e) {
            if (e instanceof window['DOMException']) {
                var blob = this.$workerBlob(workerUrl);
                var URL = window['URL'] || window['webkitURL'];
                var blobURL = URL.createObjectURL(blob);
                this.$worker = new Worker(blobURL);
                URL.revokeObjectURL(blobURL);
            }
            else {
                throw e;
            }
        }
        this.$worker.onmessage = this.onMessage;
    }
    init(scriptImports, moduleName, className) {
        this.$worker.postMessage({
            init: true,
            scriptImports: scriptImports,
            moduleName: moduleName,
            className: className
        });
    }
    onMessage(event) {
        var origin = event.origin;
        var source = event.source;
        var msg = event.data;
        switch (msg.type) {
            case "log":
                window.console && console.log && console.log.apply(console, msg.data);
                break;
            case "event":
                this.eventBus._signal(msg.name, { data: msg.data });
                break;
            case "call":
                var callback = this.callbacks[msg.id];
                if (callback) {
                    callback(msg.data);
                    delete this.callbacks[msg.id];
                }
                break;
        }
    }
    $normalizePath(path) {
        return qualifyURL(path);
    }
    terminate() {
        this.eventBus._signal("terminate", {});
        this.deltaQueue = void 0;
        this.$worker.terminate();
        this.$worker = void 0;
    }
    send(cmd, args) {
        this.$worker.postMessage({ command: cmd, args: args });
    }
    call(cmd, args, callback) {
        if (callback) {
            var id = this.callbackId++;
            this.callbacks[id] = callback;
            args.push(id);
        }
        this.send(cmd, args);
    }
    invoke(cmd, args) {
        var workerClient = this;
        return new Promise(function (resolve, reject) {
            workerClient.call(cmd, args, function (retval) {
                if (retval.err) {
                    reject(retval.err);
                }
                else {
                    resolve(retval.data);
                }
            });
        });
    }
    emit(event, data) {
        try {
            this.$worker.postMessage({ event: event, data: { data: data.data } });
        }
        catch (e) {
            console.error(e.stack);
        }
    }
    attachToDocument(doc) {
        if (this.$doc) {
            if (this.$doc === doc) {
                return;
            }
            else {
                this.$doc.off('change', this.changeListener);
            }
        }
        this.$doc = doc;
        this.call("setValue", [doc.getValue()]);
        doc.on('change', this.changeListener);
    }
    detachFromDocument() {
        if (this.$doc) {
            this.$doc.off('change', this.changeListener);
            this.$doc = null;
        }
    }
    changeListener(e, doc) {
        if (!this.deltaQueue) {
            this.deltaQueue = [e.data];
            setTimeout(this.sendDeltaQueue, 0);
        }
        else {
            this.deltaQueue.push(e.data);
        }
    }
    on(eventName, callback) {
        this.eventBus.on(eventName, callback, false);
    }
    off(eventName, callback) {
        this.eventBus.off(eventName, callback);
    }
    sendDeltaQueue() {
        var doc = this.$doc;
        var queue = this.deltaQueue;
        if (!queue)
            return;
        this.deltaQueue = void 0;
        if (queue.length > 20 && queue.length > doc.getLength() >> 1) {
            this.call("setValue", [doc.getValue()]);
        }
        else {
            this.emit("change", { data: queue });
        }
    }
    $workerBlob(workerUrl) {
        var script = "importScripts('" + qualifyURL(workerUrl) + "');";
        try {
            return new Blob([script], { "type": "application/javascript" });
        }
        catch (e) {
            var BlobBuilder = window['BlobBuilder'] || window['WebKitBlobBuilder'] || window['MozBlobBuilder'];
            var blobBuilder = new BlobBuilder();
            blobBuilder.append(script);
            return blobBuilder.getBlob("application/javascript");
        }
    }
}
//# sourceMappingURL=data:application/json;base64,