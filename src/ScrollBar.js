"use strict";
import { createElement } from "./lib/dom";
import { addListener, preventDefault } from "./lib/event";
import EventEmitterClass from "./lib/EventEmitterClass";
export default class ScrollBar {
    constructor(parent, classSuffix) {
        this.eventBus = new EventEmitterClass(this);
        this.element = createElement("div");
        this.element.className = "ace_scrollbar ace_scrollbar" + classSuffix;
        this.inner = createElement("div");
        this.inner.className = "ace_scrollbar-inner";
        this.element.appendChild(this.inner);
        parent.appendChild(this.element);
        this.setVisible(false);
        this.skipEvent = false;
        addListener(this.element, "mousedown", preventDefault);
    }
    on(eventName, callback) {
        this.eventBus.on(eventName, callback, false);
    }
    off(eventName, callback) {
        this.eventBus.off(eventName, callback);
    }
    setVisible(isVisible) {
        this.element.style.display = isVisible ? "" : "none";
        this.isVisible = isVisible;
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,