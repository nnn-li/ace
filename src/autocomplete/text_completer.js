"use strict";
import Range from "../Range";
function wordDistance(position, session) {
    var splitRegex = /[^a-zA-Z_0-9\$\-\u00C0-\u1FFF\u2C00-\uD7FF\w]+/;
    function getWordIndex() {
        var textBefore = session.getTextRange(Range.fromPoints({ row: 0, column: 0 }, position));
        return textBefore.split(splitRegex).length - 1;
    }
    var prefixPos = getWordIndex();
    var words = session.getValue().split(splitRegex);
    var wordScores = Object.create(null);
    var currentWord = words[prefixPos];
    words.forEach(function (word, index) {
        if (!word || word === currentWord)
            return;
        var distance = Math.abs(prefixPos - index);
        var score = words.length - distance;
        if (wordScores[word]) {
            wordScores[word] = Math.max(score, wordScores[word]);
        }
        else {
            wordScores[word] = score;
        }
    });
    return wordScores;
}
export default function getCompletions(editor, session, pos, prefix, callback) {
    var wordScore = wordDistance(pos, session);
    var wordList = Object.keys(wordScore);
    callback(null, wordList.map(function (word) {
        return {
            caption: word,
            value: word,
            score: wordScore[word],
            meta: "local"
        };
    }));
}
//# sourceMappingURL=data:application/json;base64,