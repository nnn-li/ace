"use strict";
import TextMode from "./TextMode";
import CssHighlightRules from "./CssHighlightRules";
import MatchingBraceOutdent from "./MatchingBraceOutdent";
import WorkerClient from "../worker/WorkerClient";
import CssBehaviour from "./behaviour/CssBehaviour";
import CStyleFoldMode from "./folding/CstyleFoldMode";
export default class CssMode extends TextMode {
    constructor(workerUrl, scriptImports) {
        super(workerUrl, scriptImports);
        this.$id = "ace/mode/css";
        this.blockComment = { start: "/*", end: "*/" };
        this.HighlightRules = CssHighlightRules;
        this.$outdent = new MatchingBraceOutdent();
        this.$behaviour = new CssBehaviour();
        this.foldingRules = new CStyleFoldMode();
    }
    getNextLineIndent(state, line, tab) {
        var indent = this.$getIndent(line);
        var tokens = this.getTokenizer().getLineTokens(line, state).tokens;
        if (tokens.length && tokens[tokens.length - 1].type == "comment") {
            return indent;
        }
        var match = line.match(/^.*\{\s*$/);
        if (match) {
            indent += tab;
        }
        return indent;
    }
    checkOutdent(state, line, text) {
        return this.$outdent.checkOutdent(line, text);
    }
    autoOutdent(state, session, row) {
        return this.$outdent.autoOutdent(session, row);
    }
    createWorker(session) {
        var workerUrl = this.workerUrl;
        var scriptImports = this.scriptImports;
        return new Promise(function (resolve, reject) {
            var worker = new WorkerClient(workerUrl);
            worker.on("initAfter", function () {
                worker.attachToDocument(session.getDocument());
                resolve(worker);
            });
            worker.on("initFail", function (message) {
                reject(new Error(`${message}`));
            });
            worker.on("errors", function (message) {
                session.setAnnotations(message.data);
            });
            worker.on("terminate", function () {
                worker.detachFromDocument();
                session.clearAnnotations();
            });
            worker.init(scriptImports, 'ace', 'CssWorker');
        });
    }
}
//# sourceMappingURL=data:application/json;base64,