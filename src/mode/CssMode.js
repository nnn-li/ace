"use strict";
import TextMode from "./TextMode";
import CssHighlightRules from "./CssHighlightRules";
import MatchingBraceOutdent from "./MatchingBraceOutdent";
import WorkerClient from "../worker/WorkerClient";
import CssBehaviour from "./behaviour/CssBehaviour";
import CStyleFoldMode from "./folding/CstyleFoldMode";
export default class CssMode extends TextMode {
    constructor(workerUrl, scriptImports) {
        super(workerUrl, scriptImports);
        this.$id = "ace/mode/css";
        this.blockComment = { start: "/*", end: "*/" };
        this.HighlightRules = CssHighlightRules;
        this.$outdent = new MatchingBraceOutdent();
        this.$behaviour = new CssBehaviour();
        this.foldingRules = new CStyleFoldMode();
    }
    getNextLineIndent(state, line, tab) {
        var indent = this.$getIndent(line);
        var tokens = this.getTokenizer().getLineTokens(line, state).tokens;
        if (tokens.length && tokens[tokens.length - 1].type == "comment") {
            return indent;
        }
        var match = line.match(/^.*\{\s*$/);
        if (match) {
            indent += tab;
        }
        return indent;
    }
    checkOutdent(state, line, text) {
        return this.$outdent.checkOutdent(line, text);
    }
    autoOutdent(state, session, row) {
        return this.$outdent.autoOutdent(session, row);
    }
    createWorker(session) {
        var workerUrl = this.workerUrl;
        var scriptImports = this.scriptImports;
        return new Promise(function (resolve, reject) {
            var worker = new WorkerClient(workerUrl);
            worker.on("initAfter", function () {
                worker.attachToDocument(session.getDocument());
                resolve(worker);
            });
            worker.on("initFail", function (message) {
                reject(new Error(`${message}`));
            });
            worker.on("errors", function (message) {
                session.setAnnotations(message.data);
            });
            worker.on("terminate", function () {
                worker.detachFromDocument();
                session.clearAnnotations();
            });
            worker.init(scriptImports, 'ace-workers.js', 'CssWorker');
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3NzTW9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNzc01vZGUudHMiXSwibmFtZXMiOlsiQ3NzTW9kZSIsIkNzc01vZGUuY29uc3RydWN0b3IiLCJDc3NNb2RlLmdldE5leHRMaW5lSW5kZW50IiwiQ3NzTW9kZS5jaGVja091dGRlbnQiLCJDc3NNb2RlLmF1dG9PdXRkZW50IiwiQ3NzTW9kZS5jcmVhdGVXb3JrZXIiXSwibWFwcGluZ3MiOiJBQW9EQSxZQUFZLENBQUM7T0FFTixRQUFRLE1BQU0sWUFBWTtPQUMxQixpQkFBaUIsTUFBTSxxQkFBcUI7T0FDNUMsb0JBQW9CLE1BQU0sd0JBQXdCO09BQ2xELFlBQVksTUFBTSx3QkFBd0I7T0FDMUMsWUFBWSxNQUFNLDBCQUEwQjtPQUM1QyxjQUFjLE1BQU0sMEJBQTBCO0FBUXJELHFDQUFxQyxRQUFRO0lBV3pDQSxZQUFZQSxTQUFpQkEsRUFBRUEsYUFBdUJBO1FBQ2xEQyxNQUFNQSxTQUFTQSxFQUFFQSxhQUFhQSxDQUFDQSxDQUFDQTtRQVhwQ0EsUUFBR0EsR0FBR0EsY0FBY0EsQ0FBQ0E7UUFFckJBLGlCQUFZQSxHQUFHQSxFQUFFQSxLQUFLQSxFQUFFQSxJQUFJQSxFQUFFQSxHQUFHQSxFQUFFQSxJQUFJQSxFQUFFQSxDQUFDQTtRQVV0Q0EsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsaUJBQWlCQSxDQUFDQTtRQUN4Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsb0JBQW9CQSxFQUFFQSxDQUFDQTtRQUMzQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsWUFBWUEsRUFBRUEsQ0FBQ0E7UUFDckNBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLGNBQWNBLEVBQUVBLENBQUNBO0lBQzdDQSxDQUFDQTtJQUdERCxpQkFBaUJBLENBQUNBLEtBQWFBLEVBQUVBLElBQVlBLEVBQUVBLEdBQVdBO1FBQ3RERSxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUduQ0EsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsRUFBRUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDbkVBLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLElBQUlBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLElBQUlBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO1lBQy9EQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUNsQkEsQ0FBQ0E7UUFFREEsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0E7UUFDcENBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBO1lBQ1JBLE1BQU1BLElBQUlBLEdBQUdBLENBQUNBO1FBQ2xCQSxDQUFDQTtRQUVEQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtJQUNsQkEsQ0FBQ0E7SUFFREYsWUFBWUEsQ0FBQ0EsS0FBYUEsRUFBRUEsSUFBWUEsRUFBRUEsSUFBWUE7UUFDbERHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO0lBQ2xEQSxDQUFDQTtJQUVESCxXQUFXQSxDQUFDQSxLQUFhQSxFQUFFQSxPQUFvQkEsRUFBRUEsR0FBV0E7UUFDeERJLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFdBQVdBLENBQUNBLE9BQU9BLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO0lBQ25EQSxDQUFDQTtJQUVESixZQUFZQSxDQUFDQSxPQUFvQkE7UUFFN0JLLElBQUlBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO1FBQy9CQSxJQUFJQSxhQUFhQSxHQUFHQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQTtRQUV2Q0EsTUFBTUEsQ0FBQ0EsSUFBSUEsT0FBT0EsQ0FBZUEsVUFBU0EsT0FBT0EsRUFBRUEsTUFBTUE7WUFDckQsSUFBSSxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFekMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUU7Z0JBQ25CLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztnQkFDL0MsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3BCLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBUyxPQUFPO2dCQUNsQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDcEMsQ0FBQyxDQUFDLENBQUM7WUFFSCxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxVQUFTLE9BQStCO2dCQUN4RCxPQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QyxDQUFDLENBQUMsQ0FBQztZQUVILE1BQU0sQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFO2dCQUNuQixNQUFNLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztnQkFDNUIsT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDL0IsQ0FBQyxDQUFDLENBQUM7WUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUM5RCxDQUFDLENBQUNBLENBQUNBO0lBQ1BBLENBQUNBO0FBQ0xMLENBQUNBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNiBEYXZpZCBHZW8gSG9sbWVzIDxkYXZpZC5nZW8uaG9sbWVzQGdtYWlsLmNvbT5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICogKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKiogKi9cbi8qICoqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKipcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgbGljZW5zZTpcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAsIEFqYXgub3JnIEIuVi5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAgICAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEFqYXgub3JnIEIuVi4gbm9yIHRoZVxuICogICAgICAgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiAqICAgICAgIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICogXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBBSkFYLk9SRyBCLlYuIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuICogTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICpcbiAqICoqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqICovXG5cInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IFRleHRNb2RlIGZyb20gXCIuL1RleHRNb2RlXCI7XG5pbXBvcnQgQ3NzSGlnaGxpZ2h0UnVsZXMgZnJvbSBcIi4vQ3NzSGlnaGxpZ2h0UnVsZXNcIjtcbmltcG9ydCBNYXRjaGluZ0JyYWNlT3V0ZGVudCBmcm9tIFwiLi9NYXRjaGluZ0JyYWNlT3V0ZGVudFwiO1xuaW1wb3J0IFdvcmtlckNsaWVudCBmcm9tIFwiLi4vd29ya2VyL1dvcmtlckNsaWVudFwiO1xuaW1wb3J0IENzc0JlaGF2aW91ciBmcm9tIFwiLi9iZWhhdmlvdXIvQ3NzQmVoYXZpb3VyXCI7XG5pbXBvcnQgQ1N0eWxlRm9sZE1vZGUgZnJvbSBcIi4vZm9sZGluZy9Dc3R5bGVGb2xkTW9kZVwiO1xuaW1wb3J0IEFubm90YXRpb24gZnJvbSBcIi4uL0Fubm90YXRpb25cIjtcbmltcG9ydCBFZGl0U2Vzc2lvbiBmcm9tIFwiLi4vRWRpdFNlc3Npb25cIjtcblxuLyoqXG4gKiBAY2xhc3MgQ3NzTW9kZVxuICogQGV4dGVuZHMgVGV4dE1vZGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3NzTW9kZSBleHRlbmRzIFRleHRNb2RlIHtcbiAgICAkaWQgPSBcImFjZS9tb2RlL2Nzc1wiO1xuICAgICRvdXRkZW50OiBNYXRjaGluZ0JyYWNlT3V0ZGVudDtcbiAgICBibG9ja0NvbW1lbnQgPSB7IHN0YXJ0OiBcIi8qXCIsIGVuZDogXCIqL1wiIH07XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgQ3NzTW9kZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB3b3JrZXJVcmwge3N0cmluZ31cbiAgICAgKiBAcGFyYW0gc2NyaXB0SW1wb3J0cyB7c3RyaW5nW119XG4gICAgICovXG4gICAgY29uc3RydWN0b3Iod29ya2VyVXJsOiBzdHJpbmcsIHNjcmlwdEltcG9ydHM6IHN0cmluZ1tdKSB7XG4gICAgICAgIHN1cGVyKHdvcmtlclVybCwgc2NyaXB0SW1wb3J0cyk7XG4gICAgICAgIHRoaXMuSGlnaGxpZ2h0UnVsZXMgPSBDc3NIaWdobGlnaHRSdWxlcztcbiAgICAgICAgdGhpcy4kb3V0ZGVudCA9IG5ldyBNYXRjaGluZ0JyYWNlT3V0ZGVudCgpO1xuICAgICAgICB0aGlzLiRiZWhhdmlvdXIgPSBuZXcgQ3NzQmVoYXZpb3VyKCk7XG4gICAgICAgIHRoaXMuZm9sZGluZ1J1bGVzID0gbmV3IENTdHlsZUZvbGRNb2RlKCk7XG4gICAgfVxuXG5cbiAgICBnZXROZXh0TGluZUluZGVudChzdGF0ZTogc3RyaW5nLCBsaW5lOiBzdHJpbmcsIHRhYjogc3RyaW5nKSB7XG4gICAgICAgIHZhciBpbmRlbnQgPSB0aGlzLiRnZXRJbmRlbnQobGluZSk7XG5cbiAgICAgICAgLy8gaWdub3JlIGJyYWNlcyBpbiBjb21tZW50c1xuICAgICAgICB2YXIgdG9rZW5zID0gdGhpcy5nZXRUb2tlbml6ZXIoKS5nZXRMaW5lVG9rZW5zKGxpbmUsIHN0YXRlKS50b2tlbnM7XG4gICAgICAgIGlmICh0b2tlbnMubGVuZ3RoICYmIHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0udHlwZSA9PSBcImNvbW1lbnRcIikge1xuICAgICAgICAgICAgcmV0dXJuIGluZGVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYXRjaCA9IGxpbmUubWF0Y2goL14uKlxce1xccyokLyk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgaW5kZW50ICs9IHRhYjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRlbnQ7XG4gICAgfVxuXG4gICAgY2hlY2tPdXRkZW50KHN0YXRlOiBzdHJpbmcsIGxpbmU6IHN0cmluZywgdGV4dDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLiRvdXRkZW50LmNoZWNrT3V0ZGVudChsaW5lLCB0ZXh0KTtcbiAgICB9XG5cbiAgICBhdXRvT3V0ZGVudChzdGF0ZTogc3RyaW5nLCBzZXNzaW9uOiBFZGl0U2Vzc2lvbiwgcm93OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy4kb3V0ZGVudC5hdXRvT3V0ZGVudChzZXNzaW9uLCByb3cpO1xuICAgIH1cblxuICAgIGNyZWF0ZVdvcmtlcihzZXNzaW9uOiBFZGl0U2Vzc2lvbik6IFByb21pc2U8V29ya2VyQ2xpZW50PiB7XG5cbiAgICAgICAgdmFyIHdvcmtlclVybCA9IHRoaXMud29ya2VyVXJsO1xuICAgICAgICB2YXIgc2NyaXB0SW1wb3J0cyA9IHRoaXMuc2NyaXB0SW1wb3J0cztcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8V29ya2VyQ2xpZW50PihmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB3b3JrZXIgPSBuZXcgV29ya2VyQ2xpZW50KHdvcmtlclVybCk7XG5cbiAgICAgICAgICAgIHdvcmtlci5vbihcImluaXRBZnRlclwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB3b3JrZXIuYXR0YWNoVG9Eb2N1bWVudChzZXNzaW9uLmdldERvY3VtZW50KCkpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUod29ya2VyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB3b3JrZXIub24oXCJpbml0RmFpbFwiLCBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgJHttZXNzYWdlfWApKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB3b3JrZXIub24oXCJlcnJvcnNcIiwgZnVuY3Rpb24obWVzc2FnZTogeyBkYXRhOiBBbm5vdGF0aW9uW10gfSkge1xuICAgICAgICAgICAgICAgIHNlc3Npb24uc2V0QW5ub3RhdGlvbnMobWVzc2FnZS5kYXRhKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB3b3JrZXIub24oXCJ0ZXJtaW5hdGVcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgd29ya2VyLmRldGFjaEZyb21Eb2N1bWVudCgpO1xuICAgICAgICAgICAgICAgIHNlc3Npb24uY2xlYXJBbm5vdGF0aW9ucygpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHdvcmtlci5pbml0KHNjcmlwdEltcG9ydHMsICdhY2Utd29ya2Vycy5qcycsICdDc3NXb3JrZXInKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19