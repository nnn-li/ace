"use strict";
import JavaScriptMode from "./JavaScriptMode";
import TypeScriptHighlightRules from "./TypeScriptHighlightRules";
import CstyleBehaviour from "./behaviour/CstyleBehaviour";
import CStyleFoldMode from "./folding/CstyleFoldMode";
import MatchingBraceOutdent from "./MatchingBraceOutdent";
import WorkerClient from "../worker/WorkerClient";
export default class TypeScriptMode extends JavaScriptMode {
    constructor(workerUrl, scriptImports) {
        super(workerUrl, scriptImports);
        this.$id = "ace/mode/typescript";
        this.HighlightRules = TypeScriptHighlightRules;
        this.$outdent = new MatchingBraceOutdent();
        this.$behaviour = new CstyleBehaviour();
        this.foldingRules = new CStyleFoldMode();
    }
    createWorker(session) {
        var workerUrl = this.workerUrl;
        var scriptImports = this.scriptImports;
        return new Promise(function (resolve, reject) {
            var worker = new WorkerClient(workerUrl);
            worker.on("initAfter", function (event) {
                worker.attachToDocument(session.getDocument());
                resolve(worker);
            });
            worker.on("initFail", function (message) {
                reject(new Error(`${message}`));
            });
            worker.on("terminate", function () {
                worker.detachFromDocument();
                session.clearAnnotations();
            });
            worker.on("compileErrors", function (event) {
                session.setAnnotations(event.data);
                session._emit("compileErrors", { data: event.data });
            });
            worker.on("compiled", function (event) {
                session._emit("compiled", { data: event.data });
            });
            worker.on("getFileNames", function (event) {
                session._emit("getFileNames", { data: event.data });
            });
            worker.init(scriptImports, 'ace-workers', 'TypeScriptWorker');
        });
    }
    ;
}
//# sourceMappingURL=data:application/json;base64,