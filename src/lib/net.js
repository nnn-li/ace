import { getDocumentHead } from './dom';
export function get(url, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            callback(xhr.responseText);
        }
    };
    xhr.send(null);
}
export function loadScript(src, callback, doc) {
    var head = getDocumentHead();
    var s = doc.createElement('script');
    s.src = src;
    head.appendChild(s);
    s.onload = s['onreadystatechange'] = function (_, isAbort) {
        if (isAbort || !s['readyState'] || s['readyState'] === "loaded" || s['readyState'] === "complete") {
            s = s.onload = s['onreadystatechange'] = null;
            if (!isAbort) {
                callback();
            }
        }
    };
}
;
export function qualifyURL(url) {
    var a = document.createElement('a');
    a.href = url;
    return a.href;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmV0LnRzIl0sIm5hbWVzIjpbImdldCIsImxvYWRTY3JpcHQiLCJxdWFsaWZ5VVJMIl0sIm1hcHBpbmdzIjoiT0FRTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE9BQU87QUFLdkMsb0JBQW9CLEdBQVcsRUFBRSxRQUF1QztJQUNwRUEsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsY0FBY0EsRUFBRUEsQ0FBQ0E7SUFDL0JBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLEdBQUdBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO0lBQzNCQSxHQUFHQSxDQUFDQSxrQkFBa0JBLEdBQUdBO1FBR3JCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9CLENBQUM7SUFDTCxDQUFDLENBQUNBO0lBQ0ZBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0FBQ25CQSxDQUFDQTtBQUtELDJCQUEyQixHQUFXLEVBQUUsUUFBbUIsRUFBRSxHQUFhO0lBRXRFQyxJQUFJQSxJQUFJQSxHQUFnQkEsZUFBZUEsRUFBRUEsQ0FBQ0E7SUFDMUNBLElBQUlBLENBQUNBLEdBQXNCQSxHQUFHQSxDQUFDQSxhQUFhQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtJQUV2REEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7SUFDWkEsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFcEJBLENBQUNBLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsR0FBR0EsVUFBU0EsQ0FBQ0EsRUFBRUEsT0FBaUJBO1FBQzlELEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssUUFBUSxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2hHLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLElBQUksQ0FBQztZQUM5QyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsUUFBUSxFQUFFLENBQUM7WUFDZixDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUMsQ0FBQ0E7QUFDTkEsQ0FBQ0E7QUFBQSxDQUFDO0FBTUYsMkJBQTJCLEdBQVc7SUFFbENDLElBQUlBLENBQUNBLEdBQXNCQSxRQUFRQSxDQUFDQSxhQUFhQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUN2REEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0E7SUFDYkEsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0E7QUFDbEJBLENBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBiYXNlZCBvbiBjb2RlIGZyb206XG4gKlxuICogQGxpY2Vuc2UgUmVxdWlyZUpTIHRleHQgMC4yNS4wIENvcHlyaWdodCAoYykgMjAxMC0yMDExLCBUaGUgRG9qbyBGb3VuZGF0aW9uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBBdmFpbGFibGUgdmlhIHRoZSBNSVQgb3IgbmV3IEJTRCBsaWNlbnNlLlxuICogc2VlOiBodHRwOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcyBmb3IgZGV0YWlsc1xuICovXG5cbmltcG9ydCB7IGdldERvY3VtZW50SGVhZCB9IGZyb20gJy4vZG9tJztcblxuLyoqXG4gKiBFeGVjdXRlcyBhICdHRVQnIEhUVFAgcmVxdWVzdCB3aXRoIGEgcmVzcG9uc2VUZXh0IGNhbGxiYWNrLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0KHVybDogc3RyaW5nLCBjYWxsYmFjazogKHJlc3BvbnNlVGV4dDogc3RyaW5nKSA9PiBhbnkpIHtcbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgeGhyLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBEbyBub3QgZXhwbGljaXRseSBoYW5kbGUgZXJyb3JzLCB0aG9zZSBzaG91bGQgYmVcbiAgICAgICAgLy8gdmlzaWJsZSB2aWEgY29uc29sZSBvdXRwdXQgaW4gdGhlIGJyb3dzZXIuXG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgY2FsbGJhY2soeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHhoci5zZW5kKG51bGwpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSA8c2NyaXB0PiB0YWcsIHNldHMgdGhlICdzcmMnIHByb3BlcnR5LCBhbmQgY2FsbHMgYmFjayB3aGVuIGxvYWRlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTY3JpcHQoc3JjOiBzdHJpbmcsIGNhbGxiYWNrOiAoKSA9PiBhbnksIGRvYzogRG9jdW1lbnQpOiB2b2lkIHtcbiAgICAvLyBUT0RPOiBUaGlzIGlzIGEgc3RhbmRhcmQgdHJpY2suIEFyZSB0aGVyZSBhbnkgYmVzdCBwcmFjdGljZXM/XG4gICAgdmFyIGhlYWQ6IEhUTUxFbGVtZW50ID0gZ2V0RG9jdW1lbnRIZWFkKCk7XG4gICAgdmFyIHM6IEhUTUxTY3JpcHRFbGVtZW50ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gICAgcy5zcmMgPSBzcmM7XG4gICAgaGVhZC5hcHBlbmRDaGlsZChzKTtcblxuICAgIHMub25sb2FkID0gc1snb25yZWFkeXN0YXRlY2hhbmdlJ10gPSBmdW5jdGlvbihfLCBpc0Fib3J0PzogYm9vbGVhbikge1xuICAgICAgICBpZiAoaXNBYm9ydCB8fCAhc1sncmVhZHlTdGF0ZSddIHx8IHNbJ3JlYWR5U3RhdGUnXSA9PT0gXCJsb2FkZWRcIiB8fCBzWydyZWFkeVN0YXRlJ10gPT09IFwiY29tcGxldGVcIikge1xuICAgICAgICAgICAgcyA9IHMub25sb2FkID0gc1snb25yZWFkeXN0YXRlY2hhbmdlJ10gPSBudWxsO1xuICAgICAgICAgICAgaWYgKCFpc0Fib3J0KSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYSB1cmwgaW50byBhIGZ1bGx5IHF1YWxpZmllZCBhYnNvbHV0ZSBVUkwuXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IHdvcmsgaW4gSUU2XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBxdWFsaWZ5VVJMKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAvLyBUT0RPOiBUaGlzIGlzIGEgc3RhbmRhcmQgdHJpY2suIEFyZSB0aGVyZSBhbnkgYmVzdCBwcmFjdGljZXM/XG4gICAgdmFyIGE6IEhUTUxBbmNob3JFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGEuaHJlZiA9IHVybDtcbiAgICByZXR1cm4gYS5ocmVmO1xufVxuIl19