"use strict";
export var ENABLE_ASSERTS = true;
export class AssertionError {
    constructor(message, args) {
        this.name = 'AssertionError';
        this.message = message;
    }
}
function doAssertFailure(defaultMessage, defaultArgs, givenMessage, givenArgs) {
    var message = 'Assertion failed';
    if (givenMessage) {
        message += ': ' + givenMessage;
        var args = givenArgs;
    }
    else if (defaultMessage) {
        message += ': ' + defaultMessage;
        args = defaultArgs;
    }
    throw new AssertionError('' + message, args || []);
}
export function assert(condition, message, args) {
    if (ENABLE_ASSERTS && !condition) {
        doAssertFailure('', null, message, Array.prototype.slice.call(arguments, 2));
    }
    return condition;
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFzc2VydHMudHMiXSwibmFtZXMiOlsiQXNzZXJ0aW9uRXJyb3IiLCJBc3NlcnRpb25FcnJvci5jb25zdHJ1Y3RvciIsImRvQXNzZXJ0RmFpbHVyZSIsImFzc2VydCJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsV0FBVyxjQUFjLEdBQUcsSUFBSSxDQUFDO0FBRWpDO0lBR0lBLFlBQVlBLE9BQU9BLEVBQUVBLElBQUlBO1FBRmxCQyxTQUFJQSxHQUFHQSxnQkFBZ0JBLENBQUNBO1FBRzNCQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxPQUFPQSxDQUFDQTtJQUMzQkEsQ0FBQ0E7QUFDTEQsQ0FBQ0E7QUFFRCx5QkFBeUIsY0FBc0IsRUFBRSxXQUFXLEVBQUUsWUFBb0IsRUFBRSxTQUFTO0lBQ3pGRSxJQUFJQSxPQUFPQSxHQUFHQSxrQkFBa0JBLENBQUNBO0lBQ2pDQSxFQUFFQSxDQUFDQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNmQSxPQUFPQSxJQUFJQSxJQUFJQSxHQUFHQSxZQUFZQSxDQUFDQTtRQUMvQkEsSUFBSUEsSUFBSUEsR0FBR0EsU0FBU0EsQ0FBQ0E7SUFDekJBLENBQUNBO0lBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RCQSxPQUFPQSxJQUFJQSxJQUFJQSxHQUFHQSxjQUFjQSxDQUFDQTtRQUNqQ0EsSUFBSUEsR0FBR0EsV0FBV0EsQ0FBQ0E7SUFDdkJBLENBQUNBO0lBS0RBLE1BQU1BLElBQUlBLGNBQWNBLENBQUNBLEVBQUVBLEdBQUdBLE9BQU9BLEVBQUVBLElBQUlBLElBQUlBLEVBQUVBLENBQUNBLENBQUNBO0FBQ3ZEQSxDQUFDQTtBQUVELHVCQUF1QixTQUFTLEVBQUUsT0FBUSxFQUFFLElBQUs7SUFDN0NDLEVBQUVBLENBQUNBLENBQUNBLGNBQWNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO1FBQy9CQSxlQUFlQSxDQUFDQSxFQUFFQSxFQUFFQSxJQUFJQSxFQUFFQSxPQUFPQSxFQUFFQSxLQUFLQSxDQUFDQSxTQUFTQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNqRkEsQ0FBQ0E7SUFDREEsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7QUFDckJBLENBQUNBO0FBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgdmFyIEVOQUJMRV9BU1NFUlRTID0gdHJ1ZTtcblxuZXhwb3J0IGNsYXNzIEFzc2VydGlvbkVycm9yIGltcGxlbWVudHMgRXJyb3Ige1xuICAgIHB1YmxpYyBuYW1lID0gJ0Fzc2VydGlvbkVycm9yJztcbiAgICBwdWJsaWMgbWVzc2FnZTtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBhcmdzKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkb0Fzc2VydEZhaWx1cmUoZGVmYXVsdE1lc3NhZ2U6IHN0cmluZywgZGVmYXVsdEFyZ3MsIGdpdmVuTWVzc2FnZTogc3RyaW5nLCBnaXZlbkFyZ3MpIHtcbiAgICB2YXIgbWVzc2FnZSA9ICdBc3NlcnRpb24gZmFpbGVkJztcbiAgICBpZiAoZ2l2ZW5NZXNzYWdlKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gJzogJyArIGdpdmVuTWVzc2FnZTtcbiAgICAgICAgdmFyIGFyZ3MgPSBnaXZlbkFyZ3M7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRlZmF1bHRNZXNzYWdlKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gJzogJyArIGRlZmF1bHRNZXNzYWdlO1xuICAgICAgICBhcmdzID0gZGVmYXVsdEFyZ3M7XG4gICAgfVxuICAgIC8vIFRoZSAnJyArIHdvcmtzIGFyb3VuZCBhbiBPcGVyYSAxMCBidWcgaW4gdGhlIHVuaXQgdGVzdHMuIFdpdGhvdXQgaXQsXG4gICAgLy8gYSBzdGFjayB0cmFjZSBpcyBhZGRlZCB0byB2YXIgbWVzc2FnZSBhYm92ZS4gV2l0aCB0aGlzLCBhIHN0YWNrIHRyYWNlIGlzXG4gICAgLy8gbm90IGFkZGVkIHVudGlsIHRoaXMgbGluZSAoaXQgY2F1c2VzIHRoZSBleHRyYSBnYXJiYWdlIHRvIGJlIGFkZGVkIGFmdGVyXG4gICAgLy8gdGhlIGFzc2VydGlvbiBtZXNzYWdlIGluc3RlYWQgb2YgaW4gdGhlIG1pZGRsZSBvZiBpdCkuXG4gICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKCcnICsgbWVzc2FnZSwgYXJncyB8fCBbXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlPywgYXJncz8pIHtcbiAgICBpZiAoRU5BQkxFX0FTU0VSVFMgJiYgIWNvbmRpdGlvbikge1xuICAgICAgICBkb0Fzc2VydEZhaWx1cmUoJycsIG51bGwsIG1lc3NhZ2UsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMikpO1xuICAgIH1cbiAgICByZXR1cm4gY29uZGl0aW9uO1xufTtcbiJdfQ==