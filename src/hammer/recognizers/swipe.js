import { ContinuousRecognizer } from './attribute';
import { PanRecognizer } from './pan';
import { DIRECTION_HORIZONTAL, DIRECTION_VERTICAL, INPUT_END } from '../hammer';
export class SwipeRecognizer extends ContinuousRecognizer {
    constructor(eventName, enabled) {
        super(eventName, enabled, 1);
        this.displacementThreshold = 10;
        this.speedThreshold = 0.65;
        this.direction = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
    }
    getTouchAction() {
        return PanRecognizer.prototype.getTouchAction.call(this);
    }
    attributeTest(input) {
        var speed;
        if (this.direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
            speed = input.velocity.norm();
        }
        else if (this.direction & DIRECTION_HORIZONTAL) {
            speed = Math.abs(input.velocity.x);
        }
        else if (this.direction & DIRECTION_VERTICAL) {
            speed = Math.abs(input.velocity.y);
        }
        var isParallel = (this.direction & input.direction) > 0;
        var isFarEnough = input.distance > this.displacementThreshold;
        var isFastEnough = speed > this.speedThreshold;
        var isEndEventType = (input.eventType & INPUT_END) > 0;
        return super.attributeTest(input) && isParallel && isFarEnough && isFastEnough && isEndEventType;
    }
    emit() {
        var direction = undefined;
        var event = new Event('swipe');
        if (direction) {
            this.manager.emit(this.eventName + direction, event);
        }
        this.manager.emit(this.eventName, event);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzd2lwZS50cyJdLCJuYW1lcyI6WyJTd2lwZVJlY29nbml6ZXIiLCJTd2lwZVJlY29nbml6ZXIuY29uc3RydWN0b3IiLCJTd2lwZVJlY29nbml6ZXIuZ2V0VG91Y2hBY3Rpb24iLCJTd2lwZVJlY29nbml6ZXIuYXR0cmlidXRlVGVzdCIsIlN3aXBlUmVjb2duaXplci5lbWl0Il0sIm1hcHBpbmdzIjoiT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sYUFBYTtPQUN6QyxFQUFDLGFBQWEsRUFBQyxNQUFNLE9BQU87T0FDNUIsRUFDUCxvQkFBb0IsRUFDcEIsa0JBQWtCLEVBRWxCLFNBQVMsRUFDUixNQUFNLFdBQVc7QUFRbEIscUNBQXFDLG9CQUFvQjtJQUtyREEsWUFBWUEsU0FBaUJBLEVBQUVBLE9BQWdCQTtRQUMzQ0MsTUFBTUEsU0FBU0EsRUFBRUEsT0FBT0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFMeEJBLDBCQUFxQkEsR0FBV0EsRUFBRUEsQ0FBQ0E7UUFDbkNBLG1CQUFjQSxHQUFXQSxJQUFJQSxDQUFDQTtRQUM5QkEsY0FBU0EsR0FBV0Esb0JBQW9CQSxHQUFHQSxrQkFBa0JBLENBQUNBO0lBSXRFQSxDQUFDQTtJQUVERCxjQUFjQTtRQUNWRSxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxTQUFTQSxDQUFDQSxjQUFjQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUM3REEsQ0FBQ0E7SUFFREYsYUFBYUEsQ0FBQ0EsS0FBcUJBO1FBQy9CRyxJQUFJQSxLQUFhQSxDQUFDQTtRQUVsQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsQ0FBQ0Esb0JBQW9CQSxHQUFHQSxrQkFBa0JBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQy9EQSxLQUFLQSxHQUFHQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtRQUNsQ0EsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0Esb0JBQW9CQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM3Q0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdkNBLENBQUNBO1FBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDM0NBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3ZDQSxDQUFDQTtRQUVEQSxJQUFJQSxVQUFVQSxHQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxLQUFLQSxDQUFDQSxTQUFTQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNqRUEsSUFBSUEsV0FBV0EsR0FBWUEsS0FBS0EsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EscUJBQXFCQSxDQUFDQTtRQUN2RUEsSUFBSUEsWUFBWUEsR0FBWUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0E7UUFDeERBLElBQUlBLGNBQWNBLEdBQVlBLENBQUNBLEtBQUtBLENBQUNBLFNBQVNBLEdBQUdBLFNBQVNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBRWhFQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxhQUFhQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxVQUFVQSxJQUFJQSxXQUFXQSxJQUFJQSxZQUFZQSxJQUFJQSxjQUFjQSxDQUFDQTtJQUNyR0EsQ0FBQ0E7SUFFREgsSUFBSUE7UUFDQUksSUFBSUEsU0FBU0EsR0FBR0EsU0FBU0EsQ0FBQ0E7UUFDMUJBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1FBQy9CQSxFQUFFQSxDQUFDQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNaQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxTQUFTQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUN6REEsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7SUFDN0NBLENBQUNBO0FBQ0xKLENBQUNBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbnRpbnVvdXNSZWNvZ25pemVyfSBmcm9tICcuL2F0dHJpYnV0ZSc7XG5pbXBvcnQge1BhblJlY29nbml6ZXJ9IGZyb20gJy4vcGFuJztcbmltcG9ydCB7XG5ESVJFQ1RJT05fSE9SSVpPTlRBTCxcbkRJUkVDVElPTl9WRVJUSUNBTCxcbklDb21wdXRlZEV2ZW50LFxuSU5QVVRfRU5EXG59IGZyb20gJy4uL2hhbW1lcic7XG5pbXBvcnQge30gZnJvbSAnLi4vdXRpbHMnO1xuLyoqXG4gKiBTd2lwZVxuICogUmVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIG1vdmluZyBmYXN0IGVub3VnaCBpbiB0aGUgYWxsb3dlZCBkaXJlY3Rpb24uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIENvbnRpbnVvdXNSZWNvZ25pemVyXG4gKi9cbmV4cG9ydCBjbGFzcyBTd2lwZVJlY29nbml6ZXIgZXh0ZW5kcyBDb250aW51b3VzUmVjb2duaXplciB7XG4gICAgcHJpdmF0ZSBkaXNwbGFjZW1lbnRUaHJlc2hvbGQ6IG51bWJlciA9IDEwO1xuICAgIHByaXZhdGUgc3BlZWRUaHJlc2hvbGQ6IG51bWJlciA9IDAuNjU7XG4gICAgcHJpdmF0ZSBkaXJlY3Rpb246IG51bWJlciA9IERJUkVDVElPTl9IT1JJWk9OVEFMIHwgRElSRUNUSU9OX1ZFUlRJQ0FMO1xuXG4gICAgY29uc3RydWN0b3IoZXZlbnROYW1lOiBzdHJpbmcsIGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIoZXZlbnROYW1lLCBlbmFibGVkLCAxKVxuICAgIH1cblxuICAgIGdldFRvdWNoQWN0aW9uKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIFBhblJlY29nbml6ZXIucHJvdG90eXBlLmdldFRvdWNoQWN0aW9uLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgYXR0cmlidXRlVGVzdChpbnB1dDogSUNvbXB1dGVkRXZlbnQpOiBib29sZWFuIHtcbiAgICAgICAgdmFyIHNwZWVkOiBudW1iZXI7XG5cbiAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uICYgKERJUkVDVElPTl9IT1JJWk9OVEFMIHwgRElSRUNUSU9OX1ZFUlRJQ0FMKSkge1xuICAgICAgICAgICAgc3BlZWQgPSBpbnB1dC52ZWxvY2l0eS5ub3JtKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkge1xuICAgICAgICAgICAgc3BlZWQgPSBNYXRoLmFicyhpbnB1dC52ZWxvY2l0eS54KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmRpcmVjdGlvbiAmIERJUkVDVElPTl9WRVJUSUNBTCkge1xuICAgICAgICAgICAgc3BlZWQgPSBNYXRoLmFicyhpbnB1dC52ZWxvY2l0eS55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc1BhcmFsbGVsOiBib29sZWFuID0gKHRoaXMuZGlyZWN0aW9uICYgaW5wdXQuZGlyZWN0aW9uKSA+IDA7XG4gICAgICAgIHZhciBpc0ZhckVub3VnaDogYm9vbGVhbiA9IGlucHV0LmRpc3RhbmNlID4gdGhpcy5kaXNwbGFjZW1lbnRUaHJlc2hvbGQ7XG4gICAgICAgIHZhciBpc0Zhc3RFbm91Z2g6IGJvb2xlYW4gPSBzcGVlZCA+IHRoaXMuc3BlZWRUaHJlc2hvbGQ7XG4gICAgICAgIHZhciBpc0VuZEV2ZW50VHlwZTogYm9vbGVhbiA9IChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9FTkQpID4gMDtcblxuICAgICAgICByZXR1cm4gc3VwZXIuYXR0cmlidXRlVGVzdChpbnB1dCkgJiYgaXNQYXJhbGxlbCAmJiBpc0ZhckVub3VnaCAmJiBpc0Zhc3RFbm91Z2ggJiYgaXNFbmRFdmVudFR5cGU7XG4gICAgfVxuXG4gICAgZW1pdCgpOiB2b2lkIHtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHVuZGVmaW5lZDsvL2hhbW1lci5kaXJlY3Rpb25TdHIoaW5wdXQuZGlyZWN0aW9uKTtcbiAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdzd2lwZScpO1xuICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLmV2ZW50TmFtZSArIGRpcmVjdGlvbiwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMuZXZlbnROYW1lLCBldmVudCk7XG4gICAgfVxufVxuIl19