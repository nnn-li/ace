"use strict";
import { decodeEventType, INPUT_CANCEL, INPUT_END, INPUT_MOVE, INPUT_START, Recognizer, STATE_BEGAN, STATE_CANCELLED, STATE_CHANGED, STATE_FAILED, STATE_RECOGNIZED } from '../hammer';
export class ContinuousRecognizer extends Recognizer {
    constructor(eventName, enabled, pointers) {
        super(eventName, enabled);
        this.pointers = pointers;
    }
    attributeTest(input) {
        switch (input.eventType) {
            case INPUT_START:
                {
                    return input.touchesLength === this.pointers;
                }
                break;
            case INPUT_MOVE:
                {
                    return input.touchesLength === this.pointers;
                }
                break;
            case INPUT_END:
                {
                    return input.touchesLength === this.pointers - 1;
                }
                break;
            case INPUT_CANCEL:
                {
                    return true;
                }
                break;
            default: {
                throw new Error(decodeEventType(input.eventType));
            }
        }
    }
    process(input) {
        var state = this.state;
        var eventType = input.eventType;
        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
        var isValid = this.attributeTest(input);
        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
            return state | STATE_CANCELLED;
        }
        else if (isRecognized || isValid) {
            if (eventType & INPUT_END) {
                return state | STATE_RECOGNIZED;
            }
            else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
            }
            else {
                return state | STATE_CHANGED;
            }
        }
        return STATE_FAILED;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXR0cmlidXRlLnRzIl0sIm5hbWVzIjpbIkNvbnRpbnVvdXNSZWNvZ25pemVyIiwiQ29udGludW91c1JlY29nbml6ZXIuY29uc3RydWN0b3IiLCJDb250aW51b3VzUmVjb2duaXplci5hdHRyaWJ1dGVUZXN0IiwiQ29udGludW91c1JlY29nbml6ZXIucHJvY2VzcyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO09BRU4sRUFDUCxlQUFlLEVBRWYsWUFBWSxFQUNaLFNBQVMsRUFDVCxVQUFVLEVBQ1YsV0FBVyxFQUNYLFVBQVUsRUFDVixXQUFXLEVBQ1gsZUFBZSxFQUNmLGFBQWEsRUFDYixZQUFZLEVBQ1osZ0JBQWdCLEVBQ2YsTUFBTSxXQUFXO0FBRWxCLDBDQUEwQyxVQUFVO0lBT2hEQSxZQUFZQSxTQUFpQkEsRUFBRUEsT0FBZ0JBLEVBQUVBLFFBQWdCQTtRQUM3REMsTUFBTUEsU0FBU0EsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFDMUJBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLFFBQVFBLENBQUNBO0lBQzdCQSxDQUFDQTtJQVFERCxhQUFhQSxDQUFDQSxLQUFxQkE7UUFDL0JFLE1BQU1BLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3RCQSxLQUFLQSxXQUFXQTtnQkFBRUEsQ0FBQ0E7b0JBQ2ZBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLGFBQWFBLEtBQUtBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO2dCQUNqREEsQ0FBQ0E7Z0JBQ0dBLEtBQUtBLENBQUNBO1lBQ1ZBLEtBQUtBLFVBQVVBO2dCQUFFQSxDQUFDQTtvQkFDZEEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsYUFBYUEsS0FBS0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7Z0JBQ2pEQSxDQUFDQTtnQkFDR0EsS0FBS0EsQ0FBQ0E7WUFDVkEsS0FBS0EsU0FBU0E7Z0JBQUVBLENBQUNBO29CQUNiQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxhQUFhQSxLQUFLQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDckRBLENBQUNBO2dCQUNHQSxLQUFLQSxDQUFDQTtZQUNWQSxLQUFLQSxZQUFZQTtnQkFBRUEsQ0FBQ0E7b0JBQ2hCQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtnQkFDaEJBLENBQUNBO2dCQUNHQSxLQUFLQSxDQUFDQTtZQUNWQSxTQUFTQSxDQUFDQTtnQkFDTkEsTUFBTUEsSUFBSUEsS0FBS0EsQ0FBQ0EsZUFBZUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdERBLENBQUNBO1FBQ0xBLENBQUNBO0lBQ0xBLENBQUNBO0lBUURGLE9BQU9BLENBQUNBLEtBQXFCQTtRQUV6QkcsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7UUFDdkJBLElBQUlBLFNBQVNBLEdBQUdBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBO1FBRWhDQSxJQUFJQSxZQUFZQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxXQUFXQSxHQUFHQSxhQUFhQSxDQUFDQSxDQUFDQTtRQUN6REEsSUFBSUEsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFHeENBLEVBQUVBLENBQUNBLENBQUNBLFlBQVlBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLFlBQVlBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3pEQSxNQUFNQSxDQUFDQSxLQUFLQSxHQUFHQSxlQUFlQSxDQUFDQTtRQUNuQ0EsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsWUFBWUEsSUFBSUEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDL0JBLEVBQUVBLENBQUNBLENBQUNBLFNBQVNBLEdBQUdBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO2dCQUN4QkEsTUFBTUEsQ0FBQ0EsS0FBS0EsR0FBR0EsZ0JBQWdCQSxDQUFDQTtZQUNwQ0EsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsR0FBR0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzlCQSxNQUFNQSxDQUFDQSxXQUFXQSxDQUFDQTtZQUN2QkEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ0ZBLE1BQU1BLENBQUNBLEtBQUtBLEdBQUdBLGFBQWFBLENBQUNBO1lBQ2pDQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUNEQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQTtJQUN4QkEsQ0FBQ0E7QUFDTEgsQ0FBQ0E7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQge1xuZGVjb2RlRXZlbnRUeXBlLFxuSUNvbXB1dGVkRXZlbnQsXG5JTlBVVF9DQU5DRUwsXG5JTlBVVF9FTkQsXG5JTlBVVF9NT1ZFLFxuSU5QVVRfU1RBUlQsXG5SZWNvZ25pemVyLFxuU1RBVEVfQkVHQU4sXG5TVEFURV9DQU5DRUxMRUQsXG5TVEFURV9DSEFOR0VELFxuU1RBVEVfRkFJTEVELFxuU1RBVEVfUkVDT0dOSVpFRFxufSBmcm9tICcuLi9oYW1tZXInO1xuXG5leHBvcnQgY2xhc3MgQ29udGludW91c1JlY29nbml6ZXIgZXh0ZW5kcyBSZWNvZ25pemVyIHtcbiAgICBwcml2YXRlIHBvaW50ZXJzOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhpcyByZWNvZ25pemVyIGlzIGp1c3QgdXNlZCBhcyBhIGJhc2UgZm9yIHRoZSBzaW1wbGUgYXR0cmlidXRlIHJlY29nbml6ZXJzLlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBleHRlbmRzIFJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihldmVudE5hbWU6IHN0cmluZywgZW5hYmxlZDogYm9vbGVhbiwgcG9pbnRlcnM6IG51bWJlcikge1xuICAgICAgICBzdXBlcihldmVudE5hbWUsIGVuYWJsZWQpO1xuICAgICAgICB0aGlzLnBvaW50ZXJzID0gcG9pbnRlcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBjaGVjayBpZiB0aGUgcmVjb2duaXplciByZWNlaXZlcyB2YWxpZCBpbnB1dCwgbGlrZSBpbnB1dC5kaXN0YW5jZSA+IDEwLlxuICAgICAqIEBtZW1iZXJvZiBDb250aW51b3VzUmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7SUNvbXB1dGVkRXZlbnR9IGlucHV0XG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gcmVjb2duaXplZFxuICAgICAqL1xuICAgIGF0dHJpYnV0ZVRlc3QoaW5wdXQ6IElDb21wdXRlZEV2ZW50KTogYm9vbGVhbiB7XG4gICAgICAgIHN3aXRjaCAoaW5wdXQuZXZlbnRUeXBlKSB7XG4gICAgICAgICAgICBjYXNlIElOUFVUX1NUQVJUOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0LnRvdWNoZXNMZW5ndGggPT09IHRoaXMucG9pbnRlcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIElOUFVUX01PVkU6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQudG91Y2hlc0xlbmd0aCA9PT0gdGhpcy5wb2ludGVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgSU5QVVRfRU5EOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0LnRvdWNoZXNMZW5ndGggPT09IHRoaXMucG9pbnRlcnMgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBJTlBVVF9DQU5DRUw6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZGVjb2RlRXZlbnRUeXBlKGlucHV0LmV2ZW50VHlwZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvY2VzcyB0aGUgaW5wdXQgYW5kIHJldHVybiB0aGUgc3RhdGUgZm9yIHRoZSByZWNvZ25pemVyXG4gICAgICogQG1lbWJlcm9mIENvbnRpbnVvdXNSZWNvZ25pemVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICogQHJldHVybiB7Kn0gU3RhdGVcbiAgICAgKi9cbiAgICBwcm9jZXNzKGlucHV0OiBJQ29tcHV0ZWRFdmVudCk6IG51bWJlciB7XG5cbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgdmFyIGV2ZW50VHlwZSA9IGlucHV0LmV2ZW50VHlwZTtcblxuICAgICAgICB2YXIgaXNSZWNvZ25pemVkID0gc3RhdGUgJiAoU1RBVEVfQkVHQU4gfCBTVEFURV9DSEFOR0VEKTtcbiAgICAgICAgdmFyIGlzVmFsaWQgPSB0aGlzLmF0dHJpYnV0ZVRlc3QoaW5wdXQpO1xuXG4gICAgICAgIC8vIG9uIGNhbmNlbCBpbnB1dCBhbmQgd2UndmUgcmVjb2duaXplZCBiZWZvcmUsIHJldHVybiBTVEFURV9DQU5DRUxMRURcbiAgICAgICAgaWYgKGlzUmVjb2duaXplZCAmJiAoZXZlbnRUeXBlICYgSU5QVVRfQ0FOQ0VMIHx8ICFpc1ZhbGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlIHwgU1RBVEVfQ0FOQ0VMTEVEO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUmVjb2duaXplZCB8fCBpc1ZhbGlkKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlIHwgU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCEoc3RhdGUgJiBTVEFURV9CRUdBTikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEVfQkVHQU47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9DSEFOR0VEO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XG4gICAgfVxufVxuIl19