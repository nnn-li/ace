import { INPUT_START, INPUT_CANCEL, INPUT_END, Recognizer, STATE_RECOGNIZED, STATE_FAILED, TOUCH_ACTION_AUTO } from '../hammer';
import { setTimeoutContext } from '../utils';
export class PressRecognizer extends Recognizer {
    constructor(eventName, enabled) {
        super(eventName ? eventName : 'press', enabled);
        this.pointers = 1;
        this.time = 500;
        this.threshold = 5;
        this._timer = null;
        this._input = null;
    }
    getTouchAction() {
        return [TOUCH_ACTION_AUTO];
    }
    process(input) {
        var validPointers = input.touchesLength === this.pointers;
        var validMovement = input.distance < this.threshold;
        var validTime = input.deltaTime > this.time;
        this._input = input;
        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
            this.reset();
        }
        else if (input.eventType & INPUT_START) {
            this.reset();
            this._timer = setTimeoutContext(function () {
                this.state = STATE_RECOGNIZED;
                this.tryEmit();
            }, this.time, this);
        }
        else if (input.eventType & INPUT_END) {
            return STATE_RECOGNIZED;
        }
        return STATE_FAILED;
    }
    reset() {
        clearTimeout(this._timer);
    }
    emit() {
        if (this.state !== STATE_RECOGNIZED) {
            return;
        }
        var event = new Event('press');
        this.manager.emit(this.eventName, event);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwcmVzcy50cyJdLCJuYW1lcyI6WyJQcmVzc1JlY29nbml6ZXIiLCJQcmVzc1JlY29nbml6ZXIuY29uc3RydWN0b3IiLCJQcmVzc1JlY29nbml6ZXIuZ2V0VG91Y2hBY3Rpb24iLCJQcmVzc1JlY29nbml6ZXIucHJvY2VzcyIsIlByZXNzUmVjb2duaXplci5yZXNldCIsIlByZXNzUmVjb2duaXplci5lbWl0Il0sIm1hcHBpbmdzIjoiT0FBTyxFQUVQLFdBQVcsRUFDWCxZQUFZLEVBQ1osU0FBUyxFQUNULFVBQVUsRUFDVixnQkFBZ0IsRUFDaEIsWUFBWSxFQUNaLGlCQUFpQixFQUNoQixNQUFNLFdBQVc7T0FDWCxFQUFDLGlCQUFpQixFQUFDLE1BQU0sVUFBVTtBQUUxQyxxQ0FBcUMsVUFBVTtJQVkzQ0EsWUFBWUEsU0FBaUJBLEVBQUVBLE9BQWdCQTtRQUMzQ0MsTUFBTUEsU0FBU0EsR0FBR0EsU0FBU0EsR0FBR0EsT0FBT0EsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFWNUNBLGFBQVFBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2JBLFNBQUlBLEdBQUdBLEdBQUdBLENBQUNBO1FBQ1hBLGNBQVNBLEdBQUdBLENBQUNBLENBQUNBO1FBVWxCQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUNuQkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDdkJBLENBQUNBO0lBRURELGNBQWNBO1FBQ1ZFLE1BQU1BLENBQUNBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0E7SUFDL0JBLENBQUNBO0lBRURGLE9BQU9BLENBQUNBLEtBQXFCQTtRQUN6QkcsSUFBSUEsYUFBYUEsR0FBR0EsS0FBS0EsQ0FBQ0EsYUFBYUEsS0FBS0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7UUFDMURBLElBQUlBLGFBQWFBLEdBQUdBLEtBQUtBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO1FBQ3BEQSxJQUFJQSxTQUFTQSxHQUFHQSxLQUFLQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUU1Q0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFJcEJBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLGFBQWFBLElBQUlBLENBQUNBLGFBQWFBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLFNBQVNBLEdBQUdBLENBQUNBLFNBQVNBLEdBQUdBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ25HQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUNqQkEsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsU0FBU0EsR0FBR0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDckNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1lBQ2JBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLGlCQUFpQkEsQ0FBQ0E7Z0JBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsZ0JBQWdCLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNuQixDQUFDLEVBQUVBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQ3hCQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxTQUFTQSxHQUFHQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNuQ0EsTUFBTUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQTtRQUM1QkEsQ0FBQ0E7UUFDREEsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7SUFDeEJBLENBQUNBO0lBRURILEtBQUtBO1FBQ0RJLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO0lBQzlCQSxDQUFDQTtJQUVESixJQUFJQTtRQUNBSyxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxLQUFLQSxnQkFBZ0JBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xDQSxNQUFNQSxDQUFDQTtRQUNYQSxDQUFDQTtRQUVEQSxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUMvQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7SUFDN0NBLENBQUNBO0FBQ0xMLENBQUNBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuSUNvbXB1dGVkRXZlbnQsXG5JTlBVVF9TVEFSVCxcbklOUFVUX0NBTkNFTCxcbklOUFVUX0VORCxcblJlY29nbml6ZXIsXG5TVEFURV9SRUNPR05JWkVELFxuU1RBVEVfRkFJTEVELFxuVE9VQ0hfQUNUSU9OX0FVVE9cbn0gZnJvbSAnLi4vaGFtbWVyJztcbmltcG9ydCB7c2V0VGltZW91dENvbnRleHR9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGNsYXNzIFByZXNzUmVjb2duaXplciBleHRlbmRzIFJlY29nbml6ZXIge1xuICAgIHByaXZhdGUgX3RpbWVyO1xuICAgIHByaXZhdGUgX2lucHV0O1xuICAgIHByaXZhdGUgcG9pbnRlcnMgPSAxO1xuICAgIHByaXZhdGUgdGltZSA9IDUwMDsgLy8gbWluaW1hbCB0aW1lIG9mIHRoZSBwb2ludGVyIHRvIGJlIHByZXNzZWRcbiAgICBwcml2YXRlIHRocmVzaG9sZCA9IDU7IC8vIGEgbWluaW1hbCBtb3ZlbWVudCBpcyBvaywgYnV0IGtlZXAgaXQgbG93XG4gICAgLyoqXG4gICAgICogUHJlc3NcbiAgICAgKiBSZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgZG93biBmb3IgeCBtcyB3aXRob3V0IGFueSBtb3ZlbWVudC5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAZXh0ZW5kcyBSZWNvZ25pemVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZXZlbnROYW1lOiBzdHJpbmcsIGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIoZXZlbnROYW1lID8gZXZlbnROYW1lIDogJ3ByZXNzJywgZW5hYmxlZCk7XG5cbiAgICAgICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9pbnB1dCA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0VG91Y2hBY3Rpb24oKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9BVVRPXTtcbiAgICB9XG5cbiAgICBwcm9jZXNzKGlucHV0OiBJQ29tcHV0ZWRFdmVudCk6IG51bWJlciB7XG4gICAgICAgIHZhciB2YWxpZFBvaW50ZXJzID0gaW5wdXQudG91Y2hlc0xlbmd0aCA9PT0gdGhpcy5wb2ludGVycztcbiAgICAgICAgdmFyIHZhbGlkTW92ZW1lbnQgPSBpbnB1dC5kaXN0YW5jZSA8IHRoaXMudGhyZXNob2xkO1xuICAgICAgICB2YXIgdmFsaWRUaW1lID0gaW5wdXQuZGVsdGFUaW1lID4gdGhpcy50aW1lO1xuXG4gICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG5cbiAgICAgICAgLy8gd2Ugb25seSBhbGxvdyBsaXR0bGUgbW92ZW1lbnRcbiAgICAgICAgLy8gYW5kIHdlJ3ZlIHJlYWNoZWQgYW4gZW5kIGV2ZW50LCBzbyBhIHRhcCBpcyBwb3NzaWJsZVxuICAgICAgICBpZiAoIXZhbGlkTW92ZW1lbnQgfHwgIXZhbGlkUG9pbnRlcnMgfHwgKGlucHV0LmV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpICYmICF2YWxpZFRpbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dENvbnRleHQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgICAgICAgICAgdGhpcy50cnlFbWl0KCk7XG4gICAgICAgICAgICB9LCB0aGlzLnRpbWUsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX0VORCkge1xuICAgICAgICAgICAgcmV0dXJuIFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9XG5cbiAgICByZXNldCgpOiB2b2lkIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTtcbiAgICB9XG5cbiAgICBlbWl0KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gU1RBVEVfUkVDT0dOSVpFRCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdwcmVzcycpO1xuICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLmV2ZW50TmFtZSwgZXZlbnQpO1xuICAgIH1cbn1cbiJdfQ==