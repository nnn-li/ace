import { copyObject, escapeRegExp, getMatchOffsets } from "./lib/lang";
import { mixin } from "./lib/oop";
import Range from "./Range";
export default class Search {
    constructor() {
        this.$options = {};
    }
    set(options) {
        mixin(this.$options, options);
        return this;
    }
    getOptions() {
        return copyObject(this.$options);
    }
    setOptions(options) {
        this.$options = options;
    }
    find(session) {
        var iterator = this.$matchIterator(session, this.$options);
        if (!iterator) {
            return void 0;
        }
        var firstRange = null;
        iterator.forEach(function (range, row, offset) {
            if (!range.start) {
                var column = range.offset + (offset || 0);
                firstRange = new Range(row, column, row, column + range.length);
            }
            else
                firstRange = range;
            return true;
        });
        return firstRange;
    }
    findAll(session) {
        var options = this.$options;
        if (!options.needle)
            return [];
        this.$assembleRegExp(options);
        var range = options.range;
        var lines = range
            ? session.getLines(range.start.row, range.end.row)
            : session.doc.getAllLines();
        var ranges = [];
        var re = options.re;
        if (options.$isMultiLine) {
            var len = re.length;
            var maxRow = lines.length - len;
            var prevRange;
            outer: for (var row = re.offset || 0; row <= maxRow; row++) {
                for (var j = 0; j < len; j++)
                    if (lines[row + j].search(re[j]) == -1)
                        continue outer;
                var startLine = lines[row];
                var line = lines[row + len - 1];
                var startIndex = startLine.length - startLine.match(re[0])[0].length;
                var endIndex = line.match(re[len - 1])[0].length;
                if (prevRange && prevRange.end.row === row &&
                    prevRange.end.column > startIndex) {
                    continue;
                }
                ranges.push(prevRange = new Range(row, startIndex, row + len - 1, endIndex));
                if (len > 2)
                    row = row + len - 2;
            }
        }
        else {
            for (var i = 0; i < lines.length; i++) {
                var matches = getMatchOffsets(lines[i], re);
                for (var j = 0; j < matches.length; j++) {
                    var match = matches[j];
                    ranges.push(new Range(i, match.offset, i, match.offset + match.length));
                }
            }
        }
        if (range) {
            var startColumn = range.start.column;
            var endColumn = range.start.column;
            var i = 0, j = ranges.length - 1;
            while (i < j && ranges[i].start.column < startColumn && ranges[i].start.row == range.start.row)
                i++;
            while (i < j && ranges[j].end.column > endColumn && ranges[j].end.row == range.end.row)
                j--;
            ranges = ranges.slice(i, j + 1);
            for (i = 0, j = ranges.length; i < j; i++) {
                ranges[i].start.row += range.start.row;
                ranges[i].end.row += range.start.row;
            }
        }
        return ranges;
    }
    replace(input, replacement) {
        var options = this.$options;
        var re = this.$assembleRegExp(options);
        if (options.$isMultiLine)
            return replacement;
        if (!re)
            return;
        var match = re.exec(input);
        if (!match || match[0].length != input.length)
            return null;
        replacement = input.replace(re, replacement);
        if (options.preserveCase) {
            var parts = replacement.split("");
            for (var i = Math.min(input.length, input.length); i--;) {
                var ch = input[i];
                if (ch && ch.toLowerCase() != ch)
                    parts[i] = parts[i].toUpperCase();
                else
                    parts[i] = parts[i].toLowerCase();
            }
            replacement = parts.join("");
        }
        return replacement;
    }
    $matchIterator(session, options) {
        var re = this.$assembleRegExp(options);
        if (!re)
            return false;
        var self = this, callback, backwards = options.backwards;
        if (options.$isMultiLine) {
            var len = re.length;
            var matchIterator = function (line, row, offset) {
                var startIndex = line.search(re[0]);
                if (startIndex == -1)
                    return;
                for (var i = 1; i < len; i++) {
                    line = session.getLine(row + i);
                    if (line.search(re[i]) == -1)
                        return;
                }
                var endIndex = line.match(re[len - 1])[0].length;
                var range = new Range(row, startIndex, row + len - 1, endIndex);
                if (re.offset == 1) {
                    range.start.row--;
                    range.start.column = Number.MAX_VALUE;
                }
                else if (offset)
                    range.start.column += offset;
                if (callback(range))
                    return true;
            };
        }
        else if (backwards) {
            var matchIterator = function (line, row, startIndex) {
                var matches = getMatchOffsets(line, re);
                for (var i = matches.length - 1; i >= 0; i--)
                    if (callback(matches[i], row, startIndex))
                        return true;
            };
        }
        else {
            var matchIterator = function (line, row, startIndex) {
                var matches = getMatchOffsets(line, re);
                for (var i = 0; i < matches.length; i++)
                    if (callback(matches[i], row, startIndex))
                        return true;
            };
        }
        return {
            forEach: function (_callback) {
                callback = _callback;
                self.$lineIterator(session, options).forEach(matchIterator);
            }
        };
    }
    $assembleRegExp(options, $disableFakeMultiline) {
        if (options.needle instanceof RegExp)
            return options.re = options.needle;
        var needle = options.needle;
        if (!options.needle)
            return options.re = false;
        if (!options.regExp)
            needle = escapeRegExp(needle);
        if (options.wholeWord)
            needle = "\\b" + needle + "\\b";
        var modifier = options.caseSensitive ? "g" : "gi";
        options.$isMultiLine = !$disableFakeMultiline && /[\n\r]/.test(needle);
        if (options.$isMultiLine)
            return options.re = this.$assembleMultilineRegExp(needle, modifier);
        try {
            var re = new RegExp(needle, modifier);
        }
        catch (e) {
            re = false;
        }
        return options.re = re;
    }
    $assembleMultilineRegExp(needle, modifier) {
        var parts = needle.replace(/\r\n|\r|\n/g, "$\n^").split("\n");
        var re = [];
        for (var i = 0; i < parts.length; i++) {
            try {
                re.push(new RegExp(parts[i], modifier));
            }
            catch (e) {
                return void 0;
            }
        }
        if (parts[0] == "") {
            re.shift();
            re['offset'] = 1;
        }
        else {
            re['offset'] = 0;
        }
        return re;
    }
    $lineIterator(session, options) {
        var backwards = options.backwards == true;
        var skipCurrent = options.skipCurrent != false;
        var range = options.range;
        var start = options.start;
        if (!start)
            start = range ? range[backwards ? "end" : "start"] : session.getSelection().getRange();
        if (start.start)
            start = start[skipCurrent != backwards ? "end" : "start"];
        var firstRow = range ? range.start.row : 0;
        var lastRow = range ? range.end.row : session.getLength() - 1;
        var forEach = backwards ? function (callback) {
            var row = start.row;
            var line = session.getLine(row).substring(0, start.column);
            if (callback(line, row))
                return;
            for (row--; row >= firstRow; row--)
                if (callback(session.getLine(row), row))
                    return;
            if (options.wrap == false)
                return;
            for (row = lastRow, firstRow = start.row; row >= firstRow; row--)
                if (callback(session.getLine(row), row))
                    return;
        } : function (callback) {
            var row = start.row;
            var line = session.getLine(row).substr(start.column);
            if (callback(line, row, start.column))
                return;
            for (row = row + 1; row <= lastRow; row++)
                if (callback(session.getLine(row), row))
                    return;
            if (options.wrap == false)
                return;
            for (row = firstRow, lastRow = start.row; row <= lastRow; row++)
                if (callback(session.getLine(row), row))
                    return;
        };
        return { forEach: forEach };
    }
}
//# sourceMappingURL=data:application/json;base64,