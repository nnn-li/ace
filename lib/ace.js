require("./lib/fixoldbrowsers");
var dom = require("./lib/dom");
var event = require("./lib/event");
var triton = require('./triton');
var Editor = require("./Editor");
var esm = require("./edit_session");
var undo = require("./undomanager");
var vrm = require("./virtual_renderer");
var wsm = require("./workspace/workspace");
var cfg = require('./config');
require("./worker/worker_client");
require("./keyboard/hash_handler");
require("./placeholder");
require("./multi_select");
require("./mode/folding/fold_mode");
require("./theme/textmate");
require("./ext/error_marker");
exports.config = cfg;
function edit(source, workspace) {
    var element;
    if (typeof source === 'string') {
        var id = source;
        element = document.getElementById(id);
        if (!element) {
            throw new Error("edit can't find div #" + id);
        }
    }
    else {
        element = source;
    }
    if (element && element['env'] && element['env'].editor instanceof Editor) {
        return element['env'].editor;
    }
    var value = "";
    if (element && /input|textarea/i.test(element.tagName)) {
        var oldNode = element;
        value = oldNode.value;
        element = document.createElement("pre");
        oldNode.parentNode.replaceChild(element, oldNode);
    }
    else {
        value = dom.getInnerText(element);
        element.innerHTML = '';
    }
    var editSession = createEditSession(value);
    var editor = new Editor(new vrm.VirtualRenderer(element));
    editor.setSession(editSession);
    var env = {
        document: editSession,
        editor: editor,
        onResize: editor.resize.bind(editor, null)
    };
    if (oldNode)
        env['textarea'] = oldNode;
    event.addListener(window, "resize", env.onResize);
    editor.on("destroy", function () {
        event.removeListener(window, "resize", env.onResize);
        env.editor.container['env'] = null;
    });
    editor.container['env'] = editor['env'] = env;
    return triton.wrap(editor, element, workspace, document);
}
exports.edit = edit;
;
function workspace() {
    return wsm.workspace();
}
exports.workspace = workspace;
;
function createEditSession(text, mode) {
    var doc = new esm.EditSession(text, mode);
    doc.setUndoManager(new undo.UndoManager());
    return doc;
}
exports.createEditSession = createEditSession;
;
exports.EditSession = esm.EditSession;
exports.UndoManager = undo.UndoManager;
//# sourceMappingURL=data:application/json;base64,