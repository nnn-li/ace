import { getInnerText } from "./lib/dom";
import { addListener, removeListener } from "./lib/event";
import { wrap } from './triton';
import Editor from "./Editor";
import { VirtualRenderer } from "./virtual_renderer";
import { workspace } from "./workspace/workspace";
export function edit(source, workspace) {
    var element;
    if (typeof source === 'string') {
        var id = source;
        element = document.getElementById(id);
        if (!element) {
            throw new Error("edit can't find div #" + id);
        }
    }
    else {
        element = source;
    }
    if (element && element['env'] && element['env'].editor instanceof Editor) {
        return element['env'].editor;
    }
    var value = "";
    if (element && /input|textarea/i.test(element.tagName)) {
        var oldNode = element;
        value = oldNode.value;
        element = document.createElement("pre");
        oldNode.parentNode.replaceChild(element, oldNode);
    }
    else {
        value = getInnerText(element);
        element.innerHTML = '';
    }
    var editSession = createEditSession(value);
    var editor = new Editor(new VirtualRenderer(element));
    editor.setSession(editSession);
    var env = {
        document: editSession,
        editor: editor,
        onResize: editor.resize.bind(editor, null)
    };
    if (oldNode)
        env['textarea'] = oldNode;
    addListener(window, "resize", env.onResize);
    editor.on("destroy", function () {
        removeListener(window, "resize", env.onResize);
        env.editor.container['env'] = null;
    });
    editor.container['env'] = editor['env'] = env;
    return wrap(editor, element, workspace, document);
}
;
export function workspace() {
    return workspace();
}
;
export function createEditSession(text, mode) {
    var doc = new EditSession(text, mode);
    doc.setUndoManager(new UndoManager());
    return doc;
}
;
export var EditSession = EditSession;
export var UndoManager = UndoManager;
//# sourceMappingURL=data:application/json;base64,