var async = require('./lib/async');
var dom = require('./lib/dom');
var event = require('./lib/event');
var eve = require('./lib/event_emitter');
var lang = require('./lib/lang');
var oop = require('./lib/oop');
var keys = require('./lib/keys');
var config = require('./config');
var unicode = require('./unicode');
var UndoManager = require('./undomanager');
var EditorRange = require('./range');
var Anchor = require('./anchor');
var Document = require('./document');
var net = require('./lib/net');
var mix = require('./lib/mix');
var EditorPosition = require('./mode/typescript/EditorPosition');
var CompletionService = require('./mode/typescript/CompletionService');
var DocumentPositionUtil = require('./mode/typescript/DocumentPositionUtil');
var HashHandler = require('./keyboard/hash_handler');
var autoComplete = require('./mode/typescript/autoComplete');
var useragent = require('./lib/useragent');
var workspace = require('./workspace/workspace');
var worker_client = require('./worker/worker_client');
var mirror = require('./worker/mirror');
var ace = require('./ace');
var triton = require('./triton');
var tooltip = require('./tooltip');
var os = require('./os');
var SearchHighlight = require('./search_highlight');
var BackgroundTokenizer = require('./background_tokenizer');
var Selection = require('./selection');
var text = require('./mode/text');
var languageTools = require('./ext/language_tools');
var textCompleter = require('./autocomplete/text_completer');
var twilight = require('./theme/twilight');
var thinkide = {
    async: async,
    dom: dom,
    event: event,
    eve: eve,
    lang: lang,
    oop: oop,
    keys: keys,
    config: config,
    unicode: unicode,
    UndoManager: UndoManager,
    EditorRange: EditorRange,
    Anchor: Anchor,
    Document: Document,
    net: net,
    EditorPosition: EditorPosition,
    CompletionService: CompletionService,
    DocumentPositionUtil: DocumentPositionUtil,
    SearchHighlight: SearchHighlight,
    Selection: Selection,
    BackgroundTokenizer: BackgroundTokenizer,
    autoComplete: autoComplete,
    useragent: useragent,
    mix: mix,
    HashHandler: HashHandler,
    workspace: workspace,
    os: os,
    worker_client: worker_client,
    mirror: mirror,
    ace: ace,
    triton: triton,
    tooltip: tooltip,
    text: text,
    languageTools: languageTools,
    textCompleter: textCompleter,
    twilight: twilight
};
module.exports = thinkide;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLElBQU8sS0FBSyxXQUFXLGFBQWEsQ0FBQyxDQUFDO0FBQ3RDLElBQU8sR0FBRyxXQUFXLFdBQVcsQ0FBQyxDQUFDO0FBQ2xDLElBQU8sS0FBSyxXQUFXLGFBQWEsQ0FBQyxDQUFDO0FBQ3RDLElBQU8sR0FBRyxXQUFXLHFCQUFxQixDQUFDLENBQUM7QUFDNUMsSUFBTyxJQUFJLFdBQVcsWUFBWSxDQUFDLENBQUM7QUFDcEMsSUFBTyxHQUFHLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFDbEMsSUFBTyxJQUFJLFdBQVcsWUFBWSxDQUFDLENBQUM7QUFDcEMsSUFBTyxNQUFNLFdBQVcsVUFBVSxDQUFDLENBQUM7QUFDcEMsSUFBTyxPQUFPLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFDdEMsSUFBTyxXQUFXLFdBQVcsZUFBZSxDQUFDLENBQUM7QUFDOUMsSUFBTyxXQUFXLFdBQVcsU0FBUyxDQUFDLENBQUM7QUFDeEMsSUFBTyxNQUFNLFdBQVcsVUFBVSxDQUFDLENBQUM7QUFDcEMsSUFBTyxRQUFRLFdBQVcsWUFBWSxDQUFDLENBQUM7QUFDeEMsSUFBTyxHQUFHLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFDbEMsSUFBTyxHQUFHLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFDbEMsSUFBTyxjQUFjLFdBQVcsa0NBQWtDLENBQUMsQ0FBQztBQUNwRSxJQUFPLGlCQUFpQixXQUFXLHFDQUFxQyxDQUFDLENBQUM7QUFDMUUsSUFBTyxvQkFBb0IsV0FBVyx3Q0FBd0MsQ0FBQyxDQUFDO0FBQ2hGLElBQU8sV0FBVyxXQUFXLHlCQUF5QixDQUFDLENBQUM7QUFDeEQsSUFBTyxZQUFZLFdBQVcsZ0NBQWdDLENBQUMsQ0FBQztBQUNoRSxJQUFPLFNBQVMsV0FBVyxpQkFBaUIsQ0FBQyxDQUFDO0FBQzlDLElBQU8sU0FBUyxXQUFXLHVCQUF1QixDQUFDLENBQUM7QUFDcEQsSUFBTyxhQUFhLFdBQVcsd0JBQXdCLENBQUMsQ0FBQztBQUV6RCxJQUFPLE1BQU0sV0FBVyxpQkFBaUIsQ0FBQyxDQUFDO0FBRzNDLElBQU8sR0FBRyxXQUFXLE9BQU8sQ0FBQyxDQUFDO0FBQzlCLElBQU8sTUFBTSxXQUFXLFVBQVUsQ0FBQyxDQUFDO0FBRXBDLElBQU8sT0FBTyxXQUFXLFdBQVcsQ0FBQyxDQUFDO0FBQ3RDLElBQU8sRUFBRSxXQUFXLE1BQU0sQ0FBQyxDQUFDO0FBQzVCLElBQU8sZUFBZSxXQUFXLG9CQUFvQixDQUFDLENBQUM7QUFDdkQsSUFBTyxtQkFBbUIsV0FBVyx3QkFBd0IsQ0FBQyxDQUFDO0FBQy9ELElBQU8sU0FBUyxXQUFXLGFBQWEsQ0FBQyxDQUFDO0FBQzFDLElBQU8sSUFBSSxXQUFXLGFBQWEsQ0FBQyxDQUFDO0FBQ3JDLElBQU8sYUFBYSxXQUFXLHNCQUFzQixDQUFDLENBQUM7QUFDdkQsSUFBTyxhQUFhLFdBQVcsK0JBQStCLENBQUMsQ0FBQztBQUdoRSxJQUFPLFFBQVEsV0FBVyxrQkFBa0IsQ0FBQyxDQUFDO0FBRzlDLElBQUksUUFBUSxHQUFHO0lBQ1gsS0FBSyxFQUFFLEtBQUs7SUFDWixHQUFHLEVBQUUsR0FBRztJQUNSLEtBQUssRUFBRSxLQUFLO0lBQ1osR0FBRyxFQUFFLEdBQUc7SUFDUixJQUFJLEVBQUUsSUFBSTtJQUNWLEdBQUcsRUFBRSxHQUFHO0lBQ1IsSUFBSSxFQUFFLElBQUk7SUFDVixNQUFNLEVBQUUsTUFBTTtJQUNkLE9BQU8sRUFBRSxPQUFPO0lBQ2hCLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLE1BQU0sRUFBRSxNQUFNO0lBQ2QsUUFBUSxFQUFFLFFBQVE7SUFDbEIsR0FBRyxFQUFFLEdBQUc7SUFDUixjQUFjLEVBQUUsY0FBYztJQUM5QixpQkFBaUIsRUFBRSxpQkFBaUI7SUFDcEMsb0JBQW9CLEVBQUUsb0JBQW9CO0lBQzFDLGVBQWUsRUFBRSxlQUFlO0lBQ2hDLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLG1CQUFtQixFQUFFLG1CQUFtQjtJQUN4QyxZQUFZLEVBQUUsWUFBWTtJQUMxQixTQUFTLEVBQUUsU0FBUztJQUNwQixHQUFHLEVBQUUsR0FBRztJQUNSLFdBQVcsRUFBRSxXQUFXO0lBQ3hCLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLEVBQUUsRUFBRSxFQUFFO0lBQ04sYUFBYSxFQUFFLGFBQWE7SUFFNUIsTUFBTSxFQUFFLE1BQU07SUFDZCxHQUFHLEVBQUUsR0FBRztJQUNSLE1BQU0sRUFBRSxNQUFNO0lBQ2QsT0FBTyxFQUFFLE9BQU87SUFDaEIsSUFBSSxFQUFFLElBQUk7SUFDVixhQUFhLEVBQUUsYUFBYTtJQUM1QixhQUFhLEVBQUUsYUFBYTtJQUU1QixRQUFRLEVBQUUsUUFBUTtDQUNyQixDQUFDO0FBQ0YsaUJBQVMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgcHVycG9zZSBvZiB0aGlzIGZpbGUgaXMgdG8gdHJpZ2dlciBhIGNhc2NhZGUgb2YgY29tcGlsaW5nIHRoZSBUeXBlU2NyaXB0IGZpbGVzIHRvIEphdmFTY3JpcHQuXG4gKiBcbiAqIEl0IGlzIGEgdGVtcG9yYXJ5IG1lYXN1cmUgdXRpbCB0aGUgdG9wLWxldmVsIGZpbGUsIGFjZS5qcywgYmVjb21lcyBUeXBlU2NyaXB0LlxuICovXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwaW5ncy9yZXF1aXJlLmQudHNcIiAvPlxuaW1wb3J0IGFzeW5jID0gcmVxdWlyZSgnLi9saWIvYXN5bmMnKTtcbmltcG9ydCBkb20gPSByZXF1aXJlKCcuL2xpYi9kb20nKTtcbmltcG9ydCBldmVudCA9IHJlcXVpcmUoJy4vbGliL2V2ZW50Jyk7XG5pbXBvcnQgZXZlID0gcmVxdWlyZSgnLi9saWIvZXZlbnRfZW1pdHRlcicpO1xuaW1wb3J0IGxhbmcgPSByZXF1aXJlKCcuL2xpYi9sYW5nJyk7XG5pbXBvcnQgb29wID0gcmVxdWlyZSgnLi9saWIvb29wJyk7XG5pbXBvcnQga2V5cyA9IHJlcXVpcmUoJy4vbGliL2tleXMnKTtcbmltcG9ydCBjb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZycpO1xuaW1wb3J0IHVuaWNvZGUgPSByZXF1aXJlKCcuL3VuaWNvZGUnKTtcbmltcG9ydCBVbmRvTWFuYWdlciA9IHJlcXVpcmUoJy4vdW5kb21hbmFnZXInKTtcbmltcG9ydCBFZGl0b3JSYW5nZSA9IHJlcXVpcmUoJy4vcmFuZ2UnKTtcbmltcG9ydCBBbmNob3IgPSByZXF1aXJlKCcuL2FuY2hvcicpO1xuaW1wb3J0IERvY3VtZW50ID0gcmVxdWlyZSgnLi9kb2N1bWVudCcpO1xuaW1wb3J0IG5ldCA9IHJlcXVpcmUoJy4vbGliL25ldCcpO1xuaW1wb3J0IG1peCA9IHJlcXVpcmUoJy4vbGliL21peCcpO1xuaW1wb3J0IEVkaXRvclBvc2l0aW9uID0gcmVxdWlyZSgnLi9tb2RlL3R5cGVzY3JpcHQvRWRpdG9yUG9zaXRpb24nKTtcbmltcG9ydCBDb21wbGV0aW9uU2VydmljZSA9IHJlcXVpcmUoJy4vbW9kZS90eXBlc2NyaXB0L0NvbXBsZXRpb25TZXJ2aWNlJyk7XG5pbXBvcnQgRG9jdW1lbnRQb3NpdGlvblV0aWwgPSByZXF1aXJlKCcuL21vZGUvdHlwZXNjcmlwdC9Eb2N1bWVudFBvc2l0aW9uVXRpbCcpO1xuaW1wb3J0IEhhc2hIYW5kbGVyID0gcmVxdWlyZSgnLi9rZXlib2FyZC9oYXNoX2hhbmRsZXInKTtcbmltcG9ydCBhdXRvQ29tcGxldGUgPSByZXF1aXJlKCcuL21vZGUvdHlwZXNjcmlwdC9hdXRvQ29tcGxldGUnKTtcbmltcG9ydCB1c2VyYWdlbnQgPSByZXF1aXJlKCcuL2xpYi91c2VyYWdlbnQnKTtcbmltcG9ydCB3b3Jrc3BhY2UgPSByZXF1aXJlKCcuL3dvcmtzcGFjZS93b3Jrc3BhY2UnKTtcbmltcG9ydCB3b3JrZXJfY2xpZW50ID0gcmVxdWlyZSgnLi93b3JrZXIvd29ya2VyX2NsaWVudCcpO1xuLy8gRklYTUU6IERpc2FibGVkIGZvciBub3c6IGltcG9ydCB3b3Jrc3BhY2Vfd29ya2VyID0gcmVxdWlyZSgnLi93b3Jrc3BhY2Uvd29ya3NwYWNlX3dvcmtlcicpO1xuaW1wb3J0IG1pcnJvciA9IHJlcXVpcmUoJy4vd29ya2VyL21pcnJvcicpO1xuaW1wb3J0IFB5dGhvbldvcmtlciA9IHJlcXVpcmUoJy4vbW9kZS9weXRob25fd29ya2VyJyk7XG5pbXBvcnQgVHlwZVNjcmlwdFdvcmtlciA9IHJlcXVpcmUoJy4vbW9kZS90eXBlc2NyaXB0X3dvcmtlcicpO1xuaW1wb3J0IGFjZSA9IHJlcXVpcmUoJy4vYWNlJyk7XG5pbXBvcnQgdHJpdG9uID0gcmVxdWlyZSgnLi90cml0b24nKTtcbmltcG9ydCBlZGl0b3IgPSByZXF1aXJlKCcuL0VkaXRvcicpO1xuaW1wb3J0IHRvb2x0aXAgPSByZXF1aXJlKCcuL3Rvb2x0aXAnKTtcbmltcG9ydCBvcyA9IHJlcXVpcmUoJy4vb3MnKTtcbmltcG9ydCBTZWFyY2hIaWdobGlnaHQgPSByZXF1aXJlKCcuL3NlYXJjaF9oaWdobGlnaHQnKTtcbmltcG9ydCBCYWNrZ3JvdW5kVG9rZW5pemVyID0gcmVxdWlyZSgnLi9iYWNrZ3JvdW5kX3Rva2VuaXplcicpO1xuaW1wb3J0IFNlbGVjdGlvbiA9IHJlcXVpcmUoJy4vc2VsZWN0aW9uJyk7XG5pbXBvcnQgdGV4dCA9IHJlcXVpcmUoJy4vbW9kZS90ZXh0Jyk7XG5pbXBvcnQgbGFuZ3VhZ2VUb29scyA9IHJlcXVpcmUoJy4vZXh0L2xhbmd1YWdlX3Rvb2xzJyk7XG5pbXBvcnQgdGV4dENvbXBsZXRlciA9IHJlcXVpcmUoJy4vYXV0b2NvbXBsZXRlL3RleHRfY29tcGxldGVyJyk7XG4vLyBJbXBvcnQgdGhlbWVzIGRlZmluZWQgaW4gVHlwZVNjcmlwdC5cbmltcG9ydCBtYXRoZG9vZGxlID0gcmVxdWlyZSgnLi90aGVtZS9tYXRoZG9vZGxlJylcbmltcG9ydCB0d2lsaWdodCA9IHJlcXVpcmUoJy4vdGhlbWUvdHdpbGlnaHQnKTtcblxuLy8gV2UgaGF2ZSB0byBtYWtlIHN1cmUgdGhlcmUgaXMgYSByZWZlcmVuY2UgdG8gZ2V0IGluY2x1c2lvbiBpbiB0aGUgYnVuZGxlZCBzY3JpcHRzLlxudmFyIHRoaW5raWRlID0ge1xuICAgIGFzeW5jOiBhc3luYyxcbiAgICBkb206IGRvbSxcbiAgICBldmVudDogZXZlbnQsXG4gICAgZXZlOiBldmUsXG4gICAgbGFuZzogbGFuZyxcbiAgICBvb3A6IG9vcCxcbiAgICBrZXlzOiBrZXlzLFxuICAgIGNvbmZpZzogY29uZmlnLFxuICAgIHVuaWNvZGU6IHVuaWNvZGUsXG4gICAgVW5kb01hbmFnZXI6IFVuZG9NYW5hZ2VyLFxuICAgIEVkaXRvclJhbmdlOiBFZGl0b3JSYW5nZSxcbiAgICBBbmNob3I6IEFuY2hvcixcbiAgICBEb2N1bWVudDogRG9jdW1lbnQsXG4gICAgbmV0OiBuZXQsXG4gICAgRWRpdG9yUG9zaXRpb246IEVkaXRvclBvc2l0aW9uLFxuICAgIENvbXBsZXRpb25TZXJ2aWNlOiBDb21wbGV0aW9uU2VydmljZSxcbiAgICBEb2N1bWVudFBvc2l0aW9uVXRpbDogRG9jdW1lbnRQb3NpdGlvblV0aWwsXG4gICAgU2VhcmNoSGlnaGxpZ2h0OiBTZWFyY2hIaWdobGlnaHQsXG4gICAgU2VsZWN0aW9uOiBTZWxlY3Rpb24sXG4gICAgQmFja2dyb3VuZFRva2VuaXplcjogQmFja2dyb3VuZFRva2VuaXplcixcbiAgICBhdXRvQ29tcGxldGU6IGF1dG9Db21wbGV0ZSxcbiAgICB1c2VyYWdlbnQ6IHVzZXJhZ2VudCxcbiAgICBtaXg6IG1peCxcbiAgICBIYXNoSGFuZGxlcjogSGFzaEhhbmRsZXIsXG4gICAgd29ya3NwYWNlOiB3b3Jrc3BhY2UsXG4gICAgb3M6IG9zLFxuICAgIHdvcmtlcl9jbGllbnQ6IHdvcmtlcl9jbGllbnQsXG4gICAgLy8gd29ya3NwYWNlX3dvcmtlcjogd29ya3NwYWNlX3dvcmtlcixcbiAgICBtaXJyb3I6IG1pcnJvcixcbiAgICBhY2U6IGFjZSxcbiAgICB0cml0b246IHRyaXRvbixcbiAgICB0b29sdGlwOiB0b29sdGlwLFxuICAgIHRleHQ6IHRleHQsXG4gICAgbGFuZ3VhZ2VUb29sczogbGFuZ3VhZ2VUb29scyxcbiAgICB0ZXh0Q29tcGxldGVyOiB0ZXh0Q29tcGxldGVyLFxuICAgIC8vIEluY2x1ZGluZyB0aGVtZXMgbWF5IG5vdCBiZSBuZWNlc3Nhcnk/XG4gICAgdHdpbGlnaHQ6IHR3aWxpZ2h0XG59O1xuZXhwb3J0ID0gdGhpbmtpZGU7Il19