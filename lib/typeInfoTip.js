var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ttm = require('./tooltip');
var TypeInfoTooltip = (function (_super) {
    __extends(TypeInfoTooltip, _super);
    function TypeInfoTooltip(parentElement) {
        _super.call(this, parentElement);
    }
    return TypeInfoTooltip;
})(ttm.Tooltip);
var typeInfoTip = function (doc, editor, workspace, fileNameProvider, rootElement) {
    var _tooltip = new TypeInfoTooltip(editor.container);
    var _mouseMoveTimer;
    function _onMouseMove(event) {
        _tooltip.hide();
        clearTimeout(_mouseMoveTimer);
        var elem = event.srcElement;
        if (elem['className'] === 'ace_content') {
            _mouseMoveTimer = setTimeout(function () { showInfo(); }, 800);
        }
        function showInfo() {
            function getDocumentPositionFromScreenOffset(x, y) {
                var r = editor.renderer;
                var offset = (x - r.$padding) / r.characterWidth;
                var correction = r.scrollTop ? 7 : 0;
                var row = Math.floor((y + r.scrollTop - correction) / r.lineHeight);
                var col = Math.round(offset);
                return editor.getSession().screenToDocumentPosition(row, col);
            }
            var documentPosition = getDocumentPositionFromScreenOffset(event.offsetX, event.offsetY);
            var fileName = fileNameProvider();
            if (workspace && typeof fileName === 'string') {
                workspace.getTypeAtDocumentPosition(fileName, documentPosition, function (err, typeInfo) {
                    if (!err) {
                        if (typeInfo) {
                            _tooltip.setHtml(tipHtml());
                            _tooltip.setPosition(event.x, event.y + 10);
                            _tooltip.show();
                        }
                        else {
                        }
                    }
                    else {
                    }
                    function tipHtml() {
                        var tip = "";
                        if (tip.length > 0) {
                            tip = "<article class='ace_dts'>" + tip + "</article>";
                        }
                        return tip;
                    }
                });
            }
        }
    }
    var that = {
        startUp: function () { rootElement.addEventListener("mousemove", _onMouseMove); },
        tearDown: function () { rootElement.removeEventListener("mousemove", _onMouseMove); }
    };
    return that;
};
module.exports = typeInfoTip;
//# sourceMappingURL=data:application/json;base64,