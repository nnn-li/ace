import Tooltip from './Tooltip';
class TypeInfoTooltip extends Tooltip {
    constructor(parentElement) {
        super(parentElement);
    }
}
export default function typeInfoTip(doc, editor, workspace, fileNameProvider, rootElement) {
    var _tooltip = new TypeInfoTooltip(editor.container);
    var _mouseMoveTimer;
    function _onMouseMove(event) {
        _tooltip.hide();
        clearTimeout(_mouseMoveTimer);
        var elem = event.srcElement;
        if (elem['className'] === 'ace_content') {
            _mouseMoveTimer = setTimeout(() => { showInfo(); }, 800);
        }
        function showInfo() {
            function getDocumentPositionFromScreenOffset(x, y) {
                var r = editor.renderer;
                var offset = (x - r.$padding) / r.characterWidth;
                var correction = r.scrollTop ? 7 : 0;
                var row = Math.floor((y + r.scrollTop - correction) / r.lineHeight);
                var col = Math.round(offset);
                return editor.getSession().screenToDocumentPosition(row, col);
            }
            var documentPosition = getDocumentPositionFromScreenOffset(event.offsetX, event.offsetY);
            var fileName = fileNameProvider();
            if (workspace && typeof fileName === 'string') {
                workspace.getTypeAtDocumentPosition(fileName, documentPosition, (err, typeInfo) => {
                    if (!err) {
                        if (typeInfo) {
                            _tooltip.setHtml(tipHtml());
                            _tooltip.setPosition(event.x, event.y + 10);
                            _tooltip.show();
                        }
                        else {
                        }
                    }
                    else {
                    }
                    function tipHtml() {
                        var tip = "";
                        if (tip.length > 0) {
                            tip = "<article class='ace_dts'>" + tip + "</article>";
                        }
                        return tip;
                    }
                });
            }
        }
    }
    var that = {
        startUp: () => { rootElement.addEventListener("mousemove", _onMouseMove); },
        tearDown: () => { rootElement.removeEventListener("mousemove", _onMouseMove); }
    };
    return that;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZUluZm9UaXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZUluZm9UaXAudHMiXSwibmFtZXMiOlsiVHlwZUluZm9Ub29sdGlwIiwiVHlwZUluZm9Ub29sdGlwLmNvbnN0cnVjdG9yIiwidHlwZUluZm9UaXAiLCJ0eXBlSW5mb1RpcC5fb25Nb3VzZU1vdmUiLCJ0eXBlSW5mb1RpcC5fb25Nb3VzZU1vdmUuc2hvd0luZm8iLCJ0eXBlSW5mb1RpcC5fb25Nb3VzZU1vdmUuc2hvd0luZm8uZ2V0RG9jdW1lbnRQb3NpdGlvbkZyb21TY3JlZW5PZmZzZXQiLCJ0eXBlSW5mb1RpcC5fb25Nb3VzZU1vdmUuc2hvd0luZm8udGlwSHRtbCJdLCJtYXBwaW5ncyI6Ik9BQU8sT0FBTyxNQUFNLFdBQVc7QUFNL0IsOEJBQThCLE9BQU87SUFDakNBLFlBQVlBLGFBQTBCQTtRQUNsQ0MsTUFBTUEsYUFBYUEsQ0FBQ0EsQ0FBQ0E7SUFDekJBLENBQUNBO0FBQ0xELENBQUNBO0FBRUQsb0NBQW9DLEdBQWEsRUFBRSxNQUFNLEVBQUUsU0FBb0IsRUFBRSxnQkFBOEIsRUFBRSxXQUF3QjtJQUVySUUsSUFBSUEsUUFBUUEsR0FBR0EsSUFBSUEsZUFBZUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7SUFFckRBLElBQUlBLGVBQXVCQSxDQUFDQTtJQUU1QkEsc0JBQXNCQSxLQUFpQkE7UUFDbkNDLFFBQVFBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO1FBQ2hCQSxZQUFZQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTtRQUM5QkEsSUFBSUEsSUFBSUEsR0FBWUEsS0FBS0EsQ0FBQ0EsVUFBVUEsQ0FBQ0E7UUFDckNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLEtBQUtBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBO1lBQ3RDQSxlQUFlQSxHQUFHQSxVQUFVQSxDQUFDQSxRQUFRQSxRQUFRQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUM3REEsQ0FBQ0E7UUFDREE7WUFNSUMsNkNBQTZDQSxDQUFTQSxFQUFFQSxDQUFTQTtnQkFDN0RDLElBQUlBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBO2dCQUV4QkEsSUFBSUEsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsY0FBY0EsQ0FBQ0E7Z0JBR2pEQSxJQUFJQSxVQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxTQUFTQSxHQUFHQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFFckNBLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLFNBQVNBLEdBQUdBLFVBQVVBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO2dCQUNwRUEsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzdCQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxVQUFVQSxFQUFFQSxDQUFDQSx3QkFBd0JBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO1lBQ2xFQSxDQUFDQTtZQUNERCxJQUFJQSxnQkFBZ0JBLEdBQUdBLG1DQUFtQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsT0FBT0EsRUFBRUEsS0FBS0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFDekZBLElBQUlBLFFBQVFBLEdBQUdBLGdCQUFnQkEsRUFBRUEsQ0FBQ0E7WUFDbENBLEVBQUVBLENBQUNBLENBQUNBLFNBQVNBLElBQUlBLE9BQU9BLFFBQVFBLEtBQUtBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO2dCQUM1Q0EsU0FBU0EsQ0FBQ0EseUJBQXlCQSxDQUFDQSxRQUFRQSxFQUFFQSxnQkFBZ0JBLEVBQUVBLENBQUNBLEdBQVFBLEVBQUVBLFFBQWlCQTtvQkFDeEZBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO3dCQUNQQSxFQUFFQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDWEEsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0EsQ0FBQUE7NEJBQzNCQSxRQUFRQSxDQUFDQSxXQUFXQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxDQUFDQTs0QkFDNUNBLFFBQVFBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO3dCQUNwQkEsQ0FBQ0E7d0JBQ0RBLElBQUlBLENBQUNBLENBQUNBO3dCQUVOQSxDQUFDQTtvQkFDTEEsQ0FBQ0E7b0JBQ0RBLElBQUlBLENBQUNBLENBQUNBO29CQUVOQSxDQUFDQTtvQkFDREE7d0JBQ0lFLElBQUlBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUNBO3dCQVdiQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFDakJBLEdBQUdBLEdBQUdBLDJCQUEyQkEsR0FBR0EsR0FBR0EsR0FBR0EsWUFBWUEsQ0FBQUE7d0JBQzFEQSxDQUFDQTt3QkFDREEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7b0JBQ2ZBLENBQUNBO2dCQUNMRixDQUFDQSxDQUFDQSxDQUFDQTtZQUNQQSxDQUFDQTtRQUNMQSxDQUFDQTtJQUNMRCxDQUFDQTtJQUVERCxJQUFJQSxJQUFJQSxHQUFHQTtRQUNQQSxPQUFPQSxFQUFFQSxRQUFRQSxXQUFXQSxDQUFDQSxnQkFBZ0JBLENBQUNBLFdBQVdBLEVBQUVBLFlBQVlBLENBQUNBLENBQUFBLENBQUNBLENBQUNBO1FBQzFFQSxRQUFRQSxFQUFFQSxRQUFRQSxXQUFXQSxDQUFDQSxtQkFBbUJBLENBQUNBLFdBQVdBLEVBQUVBLFlBQVlBLENBQUNBLENBQUFBLENBQUNBLENBQUNBO0tBQ2pGQSxDQUFDQTtJQUNGQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtBQUNoQkEsQ0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVG9vbHRpcCBmcm9tICcuL1Rvb2x0aXAnO1xuaW1wb3J0IHtXb3Jrc3BhY2V9IGZyb20gJy4vd29ya3NwYWNlL3dvcmtzcGFjZSc7XG5cbi8qKlxuICogVGhlIFVzZXIgSW50ZXJmYWNlIGVsZW1lbnQgbGV2ZXJhZ2VzIHRoZSBleGlzdGluZyBUb29sdGlwIGZvciBjb25zaXN0ZW5jeS5cbiAqL1xuY2xhc3MgVHlwZUluZm9Ub29sdGlwIGV4dGVuZHMgVG9vbHRpcCB7XG4gICAgY29uc3RydWN0b3IocGFyZW50RWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIocGFyZW50RWxlbWVudCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0eXBlSW5mb1RpcChkb2M6IERvY3VtZW50LCBlZGl0b3IsIHdvcmtzcGFjZTogV29ya3NwYWNlLCBmaWxlTmFtZVByb3ZpZGVyOiAoKSA9PiBzdHJpbmcsIHJvb3RFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuXG4gICAgdmFyIF90b29sdGlwID0gbmV3IFR5cGVJbmZvVG9vbHRpcChlZGl0b3IuY29udGFpbmVyKTtcblxuICAgIHZhciBfbW91c2VNb3ZlVGltZXI6IG51bWJlcjtcblxuICAgIGZ1bmN0aW9uIF9vbk1vdXNlTW92ZShldmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBfdG9vbHRpcC5oaWRlKCk7XG4gICAgICAgIGNsZWFyVGltZW91dChfbW91c2VNb3ZlVGltZXIpO1xuICAgICAgICB2YXIgZWxlbTogRWxlbWVudCA9IGV2ZW50LnNyY0VsZW1lbnQ7XG4gICAgICAgIGlmIChlbGVtWydjbGFzc05hbWUnXSA9PT0gJ2FjZV9jb250ZW50Jykge1xuICAgICAgICAgICAgX21vdXNlTW92ZVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7IHNob3dJbmZvKCk7IH0sIDgwMCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2hvd0luZm8oKSB7XG4gICAgICAgICAgICAvLyBUT0RPIGlmIChtb2RlICE9PSBcInR5cGVzY3JpcHRcIikgcmV0dXJuO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldHMgdGhlIFBvc2l0aW9uIGJhc2VkIG9uIG1vdXNlIHgseSBjb29yZGluYXRlc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXREb2N1bWVudFBvc2l0aW9uRnJvbVNjcmVlbk9mZnNldCh4OiBudW1iZXIsIHk6IG51bWJlcik6IHsgcm93OiBudW1iZXI7IGNvbHVtbjogbnVtYmVyIH0ge1xuICAgICAgICAgICAgICAgIHZhciByID0gZWRpdG9yLnJlbmRlcmVyO1xuICAgICAgICAgICAgICAgIC8vIHZhciBvZmZzZXQgPSAoeCArIHIuc2Nyb2xsTGVmdCAtIHIuJHBhZGRpbmcpIC8gci5jaGFyYWN0ZXJXaWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gKHggLSByLiRwYWRkaW5nKSAvIHIuY2hhcmFjdGVyV2lkdGg7XG5cbiAgICAgICAgICAgICAgICAvLyBAQlVHOiBRdWlja2ZpeCBmb3Igc3RyYW5nZSBpc3N1ZSB3aXRoIHRvcFxuICAgICAgICAgICAgICAgIHZhciBjb3JyZWN0aW9uID0gci5zY3JvbGxUb3AgPyA3IDogMDtcblxuICAgICAgICAgICAgICAgIHZhciByb3cgPSBNYXRoLmZsb29yKCh5ICsgci5zY3JvbGxUb3AgLSBjb3JyZWN0aW9uKSAvIHIubGluZUhlaWdodCk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbCA9IE1hdGgucm91bmQob2Zmc2V0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWRpdG9yLmdldFNlc3Npb24oKS5zY3JlZW5Ub0RvY3VtZW50UG9zaXRpb24ocm93LCBjb2wpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRvY3VtZW50UG9zaXRpb24gPSBnZXREb2N1bWVudFBvc2l0aW9uRnJvbVNjcmVlbk9mZnNldChldmVudC5vZmZzZXRYLCBldmVudC5vZmZzZXRZKTtcbiAgICAgICAgICAgIHZhciBmaWxlTmFtZSA9IGZpbGVOYW1lUHJvdmlkZXIoKTtcbiAgICAgICAgICAgIGlmICh3b3Jrc3BhY2UgJiYgdHlwZW9mIGZpbGVOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHdvcmtzcGFjZS5nZXRUeXBlQXREb2N1bWVudFBvc2l0aW9uKGZpbGVOYW1lLCBkb2N1bWVudFBvc2l0aW9uLCAoZXJyOiBhbnksIHR5cGVJbmZvOiB0cy5UeXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZUluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdG9vbHRpcC5zZXRIdG1sKHRpcEh0bWwoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdG9vbHRpcC5zZXRQb3NpdGlvbihldmVudC54LCBldmVudC55ICsgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90b29sdGlwLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGhpbmcgdG8gc2VlIGhlcmUuIE1vdmUgYWxvbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBSZXBvcnQgdGhlIGVycm9yLlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRpcEh0bWwoKTogc3RyaW5nIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aXAgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGRlc2NyaXB0aW9uIGlzIHRoZSB0eXBlIGluZm9ybWF0aW9uIGZyb20gdGhlIHNvdXJjZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIEZJWE1FOiBSZXN0b3JlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZUluZm8uZGVzY3JpcHRpb24gJiYgcmVzdWx0cy5kZXNjcmlwdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlwICs9IFwiPGgxPlwiICsgdHlwZUluZm8uZnVsbFN5bWJvbE5hbWUgKyBcIjwvaDE+PHNlY3Rpb24+PGgyPlR5cGU8L2gyPjxwPjxjb2RlPlwiICsgcmVzdWx0cy5kZXNjcmlwdGlvbiArIFwiPC9jb2RlPjwvcD48L3NlY3Rpb24+XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdHMuZG9jQ29tbWVudCAmJiByZXN1bHRzLmRvY0NvbW1lbnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZG9jQ29tbWVudCBpcyBleHBlY3RlZCB0byBiZSBhIGxpc3Qgb2Ygc2VjdGlvbiBlbGVtZW50cy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlwICs9IFwiPHNlY3Rpb24+PGgyPkRlc2NyaXB0aW9uPC9oMj5cIiArIHJlc3VsdHMuZG9jQ29tbWVudCArIFwiPC9zZWN0aW9uPlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGlwLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXAgPSBcIjxhcnRpY2xlIGNsYXNzPSdhY2VfZHRzJz5cIiArIHRpcCArIFwiPC9hcnRpY2xlPlwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGlwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdGhhdCA9IHtcbiAgICAgICAgc3RhcnRVcDogKCkgPT4geyByb290RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIF9vbk1vdXNlTW92ZSkgfSxcbiAgICAgICAgdGVhckRvd246ICgpID0+IHsgcm9vdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBfb25Nb3VzZU1vdmUpIH1cbiAgICB9O1xuICAgIHJldHVybiB0aGF0O1xufSJdfQ==