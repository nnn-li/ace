var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var attribute = require('./attribute');
var hammer = require('../hammer');
var PinchRecognizer = (function (_super) {
    __extends(PinchRecognizer, _super);
    function PinchRecognizer(eventName, enabled) {
        _super.call(this, eventName, enabled, 2);
        this.threshold = 2;
        this.scale = 1;
    }
    PinchRecognizer.prototype.getTouchAction = function () {
        return [hammer.TOUCH_ACTION_NONE];
    };
    PinchRecognizer.prototype.attributeTest = function (input) {
        var isBegan = (this.state & hammer.STATE_BEGAN) > 0;
        this.scale = input.scale;
        return _super.prototype.attributeTest.call(this, input) && (Math.abs(this.scale - 1) > this.threshold || isBegan);
    };
    PinchRecognizer.prototype.emit = function () {
        if (this.scale !== 1) {
            var inOut = this.scale < 1 ? 'in' : 'out';
            var event = new Event('pinch');
            this.manager.emit(this.eventName + inOut, event);
        }
    };
    return PinchRecognizer;
})(attribute.ContinuousRecognizer);
exports.PinchRecognizer = PinchRecognizer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGluY2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGFtbWVyL3JlY29nbml6ZXJzL3BpbmNoLnRzIl0sIm5hbWVzIjpbIlBpbmNoUmVjb2duaXplciIsIlBpbmNoUmVjb2duaXplci5jb25zdHJ1Y3RvciIsIlBpbmNoUmVjb2duaXplci5nZXRUb3VjaEFjdGlvbiIsIlBpbmNoUmVjb2duaXplci5hdHRyaWJ1dGVUZXN0IiwiUGluY2hSZWNvZ25pemVyLmVtaXQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBTyxTQUFTLFdBQVcsYUFBYSxDQUFDLENBQUM7QUFDMUMsSUFBTyxNQUFNLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFRckM7SUFBcUNBLG1DQUE4QkE7SUFHL0RBLHlCQUFZQSxTQUFpQkEsRUFBRUEsT0FBZ0JBO1FBQzNDQyxrQkFBTUEsU0FBU0EsRUFBRUEsT0FBT0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFIekJBLGNBQVNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2RBLFVBQUtBLEdBQUdBLENBQUNBLENBQUNBO0lBR2xCQSxDQUFDQTtJQUNERCx3Q0FBY0EsR0FBZEE7UUFDSUUsTUFBTUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQTtJQUN0Q0EsQ0FBQ0E7SUFDREYsdUNBQWFBLEdBQWJBLFVBQWNBLEtBQTRCQTtRQUN0Q0csSUFBSUEsT0FBT0EsR0FBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDN0RBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLEtBQUtBLENBQUNBLEtBQUtBLENBQUNBO1FBQ3pCQSxNQUFNQSxDQUFDQSxnQkFBS0EsQ0FBQ0EsYUFBYUEsWUFBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsSUFBSUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7SUFDaEdBLENBQUNBO0lBQ0RILDhCQUFJQSxHQUFKQTtRQUNJSSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNuQkEsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFDMUNBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1lBQy9CQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxLQUFLQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUNyREEsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFDTEosc0JBQUNBO0FBQURBLENBQUNBLEFBckJELEVBQXFDLFNBQVMsQ0FBQyxvQkFBb0IsRUFxQmxFO0FBckJZLHVCQUFlLGtCQXFCM0IsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhdHRyaWJ1dGUgPSByZXF1aXJlKCcuL2F0dHJpYnV0ZScpO1xuaW1wb3J0IGhhbW1lciA9IHJlcXVpcmUoJy4uL2hhbW1lcicpO1xuaW1wb3J0IHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbi8qKlxuICogUGluY2hcbiAqIFJlY29nbml6ZWQgd2hlbiB0d28gb3IgbW9yZSBwb2ludGVycyBhcmUgbW92aW5nIHRvd2FyZCAoem9vbS1pbikgb3IgYXdheSBmcm9tIGVhY2ggb3RoZXIgKHpvb20tb3V0KS5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgQ29udGludW91c1JlY29nbml6ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFBpbmNoUmVjb2duaXplciBleHRlbmRzIGF0dHJpYnV0ZS5Db250aW51b3VzUmVjb2duaXplciB7XG4gICAgcHJpdmF0ZSB0aHJlc2hvbGQgPSAyO1xuICAgIHByaXZhdGUgc2NhbGUgPSAxO1xuICAgIGNvbnN0cnVjdG9yKGV2ZW50TmFtZTogc3RyaW5nLCBlbmFibGVkOiBib29sZWFuKSB7XG4gICAgICAgIHN1cGVyKGV2ZW50TmFtZSwgZW5hYmxlZCwgMik7XG4gICAgfVxuICAgIGdldFRvdWNoQWN0aW9uKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIFtoYW1tZXIuVE9VQ0hfQUNUSU9OX05PTkVdO1xuICAgIH1cbiAgICBhdHRyaWJ1dGVUZXN0KGlucHV0OiBoYW1tZXIuSUNvbXB1dGVkRXZlbnQpOiBib29sZWFuIHtcbiAgICAgICAgdmFyIGlzQmVnYW46IGJvb2xlYW4gPSAodGhpcy5zdGF0ZSAmIGhhbW1lci5TVEFURV9CRUdBTikgPiAwO1xuICAgICAgICB0aGlzLnNjYWxlID0gaW5wdXQuc2NhbGU7XG4gICAgICAgIHJldHVybiBzdXBlci5hdHRyaWJ1dGVUZXN0KGlucHV0KSAmJiAoTWF0aC5hYnModGhpcy5zY2FsZSAtIDEpID4gdGhpcy50aHJlc2hvbGQgfHwgaXNCZWdhbik7XG4gICAgfVxuICAgIGVtaXQoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnNjYWxlICE9PSAxKSB7XG4gICAgICAgICAgICB2YXIgaW5PdXQgPSB0aGlzLnNjYWxlIDwgMSA/ICdpbicgOiAnb3V0JztcbiAgICAgICAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgncGluY2gnKTtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMuZXZlbnROYW1lICsgaW5PdXQsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==