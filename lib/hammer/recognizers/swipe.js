import { ContinuousRecognizer } from './attribute';
import { PanRecognizer } from './pan';
import { DIRECTION_HORIZONTAL, DIRECTION_VERTICAL, INPUT_END } from '../hammer';
export class SwipeRecognizer extends ContinuousRecognizer {
    constructor(eventName, enabled) {
        super(eventName, enabled, 1);
        this.displacementThreshold = 10;
        this.speedThreshold = 0.65;
        this.direction = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
    }
    getTouchAction() {
        return PanRecognizer.prototype.getTouchAction.call(this);
    }
    attributeTest(input) {
        var speed;
        if (this.direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
            speed = input.velocity.norm();
        }
        else if (this.direction & DIRECTION_HORIZONTAL) {
            speed = Math.abs(input.velocity.x);
        }
        else if (this.direction & DIRECTION_VERTICAL) {
            speed = Math.abs(input.velocity.y);
        }
        var isParallel = (this.direction & input.direction) > 0;
        var isFarEnough = input.distance > this.displacementThreshold;
        var isFastEnough = speed > this.speedThreshold;
        var isEndEventType = (input.eventType & INPUT_END) > 0;
        return super.attributeTest(input) && isParallel && isFarEnough && isFastEnough && isEndEventType;
    }
    emit() {
        var direction = undefined;
        var event = new Event('swipe');
        if (direction) {
            this.manager.emit(this.eventName + direction, event);
        }
        this.manager.emit(this.eventName, event);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGFtbWVyL3JlY29nbml6ZXJzL3N3aXBlLnRzIl0sIm5hbWVzIjpbIlN3aXBlUmVjb2duaXplciIsIlN3aXBlUmVjb2duaXplci5jb25zdHJ1Y3RvciIsIlN3aXBlUmVjb2duaXplci5nZXRUb3VjaEFjdGlvbiIsIlN3aXBlUmVjb2duaXplci5hdHRyaWJ1dGVUZXN0IiwiU3dpcGVSZWNvZ25pemVyLmVtaXQiXSwibWFwcGluZ3MiOiJPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxhQUFhO09BQ3pDLEVBQUMsYUFBYSxFQUFDLE1BQU0sT0FBTztPQUM1QixFQUNQLG9CQUFvQixFQUNwQixrQkFBa0IsRUFFbEIsU0FBUyxFQUNSLE1BQU0sV0FBVztBQVFsQixxQ0FBcUMsb0JBQW9CO0lBS3JEQSxZQUFZQSxTQUFpQkEsRUFBRUEsT0FBZ0JBO1FBQzNDQyxNQUFNQSxTQUFTQSxFQUFFQSxPQUFPQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUx4QkEsMEJBQXFCQSxHQUFXQSxFQUFFQSxDQUFDQTtRQUNuQ0EsbUJBQWNBLEdBQVdBLElBQUlBLENBQUNBO1FBQzlCQSxjQUFTQSxHQUFXQSxvQkFBb0JBLEdBQUdBLGtCQUFrQkEsQ0FBQ0E7SUFJdEVBLENBQUNBO0lBRURELGNBQWNBO1FBQ1ZFLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBLFNBQVNBLENBQUNBLGNBQWNBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0lBQzdEQSxDQUFDQTtJQUVERixhQUFhQSxDQUFDQSxLQUFxQkE7UUFDL0JHLElBQUlBLEtBQWFBLENBQUNBO1FBRWxCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxDQUFDQSxvQkFBb0JBLEdBQUdBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDL0RBLEtBQUtBLEdBQUdBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO1FBQ2xDQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxvQkFBb0JBLENBQUNBLENBQUNBLENBQUNBO1lBQzdDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN2Q0EsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0Esa0JBQWtCQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMzQ0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdkNBLENBQUNBO1FBRURBLElBQUlBLFVBQVVBLEdBQVlBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2pFQSxJQUFJQSxXQUFXQSxHQUFZQSxLQUFLQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBO1FBQ3ZFQSxJQUFJQSxZQUFZQSxHQUFZQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQTtRQUN4REEsSUFBSUEsY0FBY0EsR0FBWUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsU0FBU0EsR0FBR0EsU0FBU0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFFaEVBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLGFBQWFBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLFVBQVVBLElBQUlBLFdBQVdBLElBQUlBLFlBQVlBLElBQUlBLGNBQWNBLENBQUNBO0lBQ3JHQSxDQUFDQTtJQUVESCxJQUFJQTtRQUNBSSxJQUFJQSxTQUFTQSxHQUFHQSxTQUFTQSxDQUFDQTtRQUMxQkEsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsS0FBS0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLEVBQUVBLENBQUNBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1pBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLFNBQVNBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO1FBQ3pEQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtJQUM3Q0EsQ0FBQ0E7QUFDTEosQ0FBQ0E7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29udGludW91c1JlY29nbml6ZXJ9IGZyb20gJy4vYXR0cmlidXRlJztcbmltcG9ydCB7UGFuUmVjb2duaXplcn0gZnJvbSAnLi9wYW4nO1xuaW1wb3J0IHtcbkRJUkVDVElPTl9IT1JJWk9OVEFMLFxuRElSRUNUSU9OX1ZFUlRJQ0FMLFxuSUNvbXB1dGVkRXZlbnQsXG5JTlBVVF9FTkRcbn0gZnJvbSAnLi4vaGFtbWVyJztcbmltcG9ydCB7fSBmcm9tICcuLi91dGlscyc7XG4vKipcbiAqIFN3aXBlXG4gKiBSZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgbW92aW5nIGZhc3QgZW5vdWdoIGluIHRoZSBhbGxvd2VkIGRpcmVjdGlvbi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgQ29udGludW91c1JlY29nbml6ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFN3aXBlUmVjb2duaXplciBleHRlbmRzIENvbnRpbnVvdXNSZWNvZ25pemVyIHtcbiAgICBwcml2YXRlIGRpc3BsYWNlbWVudFRocmVzaG9sZDogbnVtYmVyID0gMTA7XG4gICAgcHJpdmF0ZSBzcGVlZFRocmVzaG9sZDogbnVtYmVyID0gMC42NTtcbiAgICBwcml2YXRlIGRpcmVjdGlvbjogbnVtYmVyID0gRElSRUNUSU9OX0hPUklaT05UQUwgfCBESVJFQ1RJT05fVkVSVElDQUw7XG5cbiAgICBjb25zdHJ1Y3RvcihldmVudE5hbWU6IHN0cmluZywgZW5hYmxlZDogYm9vbGVhbikge1xuICAgICAgICBzdXBlcihldmVudE5hbWUsIGVuYWJsZWQsIDEpXG4gICAgfVxuXG4gICAgZ2V0VG91Y2hBY3Rpb24oKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gUGFuUmVjb2duaXplci5wcm90b3R5cGUuZ2V0VG91Y2hBY3Rpb24uY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICBhdHRyaWJ1dGVUZXN0KGlucHV0OiBJQ29tcHV0ZWRFdmVudCk6IGJvb2xlYW4ge1xuICAgICAgICB2YXIgc3BlZWQ6IG51bWJlcjtcblxuICAgICAgICBpZiAodGhpcy5kaXJlY3Rpb24gJiAoRElSRUNUSU9OX0hPUklaT05UQUwgfCBESVJFQ1RJT05fVkVSVElDQUwpKSB7XG4gICAgICAgICAgICBzcGVlZCA9IGlucHV0LnZlbG9jaXR5Lm5vcm0oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMKSB7XG4gICAgICAgICAgICBzcGVlZCA9IE1hdGguYWJzKGlucHV0LnZlbG9jaXR5LngpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGlyZWN0aW9uICYgRElSRUNUSU9OX1ZFUlRJQ0FMKSB7XG4gICAgICAgICAgICBzcGVlZCA9IE1hdGguYWJzKGlucHV0LnZlbG9jaXR5LnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzUGFyYWxsZWw6IGJvb2xlYW4gPSAodGhpcy5kaXJlY3Rpb24gJiBpbnB1dC5kaXJlY3Rpb24pID4gMDtcbiAgICAgICAgdmFyIGlzRmFyRW5vdWdoOiBib29sZWFuID0gaW5wdXQuZGlzdGFuY2UgPiB0aGlzLmRpc3BsYWNlbWVudFRocmVzaG9sZDtcbiAgICAgICAgdmFyIGlzRmFzdEVub3VnaDogYm9vbGVhbiA9IHNwZWVkID4gdGhpcy5zcGVlZFRocmVzaG9sZDtcbiAgICAgICAgdmFyIGlzRW5kRXZlbnRUeXBlOiBib29sZWFuID0gKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX0VORCkgPiAwO1xuXG4gICAgICAgIHJldHVybiBzdXBlci5hdHRyaWJ1dGVUZXN0KGlucHV0KSAmJiBpc1BhcmFsbGVsICYmIGlzRmFyRW5vdWdoICYmIGlzRmFzdEVub3VnaCAmJiBpc0VuZEV2ZW50VHlwZTtcbiAgICB9XG5cbiAgICBlbWl0KCk6IHZvaWQge1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gdW5kZWZpbmVkOy8vaGFtbWVyLmRpcmVjdGlvblN0cihpbnB1dC5kaXJlY3Rpb24pO1xuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ3N3aXBlJyk7XG4gICAgICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMuZXZlbnROYW1lICsgZGlyZWN0aW9uLCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5ldmVudE5hbWUsIGV2ZW50KTtcbiAgICB9XG59XG4iXX0=