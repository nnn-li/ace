var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var attribute = require('./attribute');
var pan = require('./pan');
var hammer = require('../hammer');
var SwipeRecognizer = (function (_super) {
    __extends(SwipeRecognizer, _super);
    function SwipeRecognizer(eventName, enabled) {
        _super.call(this, eventName, enabled, 1);
        this.displacementThreshold = 10;
        this.speedThreshold = 0.65;
        this.direction = hammer.DIRECTION_HORIZONTAL | hammer.DIRECTION_VERTICAL;
    }
    SwipeRecognizer.prototype.getTouchAction = function () {
        return pan.PanRecognizer.prototype.getTouchAction.call(this);
    };
    SwipeRecognizer.prototype.attributeTest = function (input) {
        var speed;
        if (this.direction & (hammer.DIRECTION_HORIZONTAL | hammer.DIRECTION_VERTICAL)) {
            speed = input.velocity.norm();
        }
        else if (this.direction & hammer.DIRECTION_HORIZONTAL) {
            speed = Math.abs(input.velocity.x);
        }
        else if (this.direction & hammer.DIRECTION_VERTICAL) {
            speed = Math.abs(input.velocity.y);
        }
        var isParallel = (this.direction & input.direction) > 0;
        var isFarEnough = input.distance > this.displacementThreshold;
        var isFastEnough = speed > this.speedThreshold;
        var isEndEventType = (input.eventType & hammer.INPUT_END) > 0;
        return _super.prototype.attributeTest.call(this, input) && isParallel && isFarEnough && isFastEnough && isEndEventType;
    };
    SwipeRecognizer.prototype.emit = function () {
        var direction = undefined;
        var event = new Event('swipe');
        if (direction) {
            this.manager.emit(this.eventName + direction, event);
        }
        this.manager.emit(this.eventName, event);
    };
    return SwipeRecognizer;
})(attribute.ContinuousRecognizer);
exports.SwipeRecognizer = SwipeRecognizer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGFtbWVyL3JlY29nbml6ZXJzL3N3aXBlLnRzIl0sIm5hbWVzIjpbIlN3aXBlUmVjb2duaXplciIsIlN3aXBlUmVjb2duaXplci5jb25zdHJ1Y3RvciIsIlN3aXBlUmVjb2duaXplci5nZXRUb3VjaEFjdGlvbiIsIlN3aXBlUmVjb2duaXplci5hdHRyaWJ1dGVUZXN0IiwiU3dpcGVSZWNvZ25pemVyLmVtaXQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBTyxTQUFTLFdBQVcsYUFBYSxDQUFDLENBQUM7QUFDMUMsSUFBTyxHQUFHLFdBQVcsT0FBTyxDQUFDLENBQUM7QUFDOUIsSUFBTyxNQUFNLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFRckM7SUFBcUNBLG1DQUE4QkE7SUFLL0RBLHlCQUFZQSxTQUFpQkEsRUFBRUEsT0FBZ0JBO1FBQzNDQyxrQkFBTUEsU0FBU0EsRUFBRUEsT0FBT0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7UUFMeEJBLDBCQUFxQkEsR0FBV0EsRUFBRUEsQ0FBQ0E7UUFDbkNBLG1CQUFjQSxHQUFXQSxJQUFJQSxDQUFDQTtRQUM5QkEsY0FBU0EsR0FBV0EsTUFBTUEsQ0FBQ0Esb0JBQW9CQSxHQUFHQSxNQUFNQSxDQUFDQSxrQkFBa0JBLENBQUNBO0lBSXBGQSxDQUFDQTtJQUVERCx3Q0FBY0EsR0FBZEE7UUFDSUUsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDakVBLENBQUNBO0lBRURGLHVDQUFhQSxHQUFiQSxVQUFjQSxLQUE0QkE7UUFDdENHLElBQUlBLEtBQWFBLENBQUNBO1FBRWxCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxvQkFBb0JBLEdBQUdBLE1BQU1BLENBQUNBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDN0VBLEtBQUtBLEdBQUdBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO1FBQ2xDQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxNQUFNQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBLENBQUNBO1lBQ3BEQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN2Q0EsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsTUFBTUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNsREEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdkNBLENBQUNBO1FBRURBLElBQUlBLFVBQVVBLEdBQVlBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2pFQSxJQUFJQSxXQUFXQSxHQUFZQSxLQUFLQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBO1FBQ3ZFQSxJQUFJQSxZQUFZQSxHQUFZQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQTtRQUN4REEsSUFBSUEsY0FBY0EsR0FBWUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsU0FBU0EsR0FBR0EsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFFdkVBLE1BQU1BLENBQUNBLGdCQUFLQSxDQUFDQSxhQUFhQSxZQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxVQUFVQSxJQUFJQSxXQUFXQSxJQUFJQSxZQUFZQSxJQUFJQSxjQUFjQSxDQUFDQTtJQUNyR0EsQ0FBQ0E7SUFFREgsOEJBQUlBLEdBQUpBO1FBQ0lJLElBQUlBLFNBQVNBLEdBQUdBLFNBQVNBLENBQUNBO1FBQzFCQSxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUMvQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDWkEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsU0FBU0EsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDekRBLENBQUNBO1FBQ0RBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO0lBQzdDQSxDQUFDQTtJQUNMSixzQkFBQ0E7QUFBREEsQ0FBQ0EsQUExQ0QsRUFBcUMsU0FBUyxDQUFDLG9CQUFvQixFQTBDbEU7QUExQ1ksdUJBQWUsa0JBMEMzQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF0dHJpYnV0ZSA9IHJlcXVpcmUoJy4vYXR0cmlidXRlJyk7XG5pbXBvcnQgcGFuID0gcmVxdWlyZSgnLi9wYW4nKTtcbmltcG9ydCBoYW1tZXIgPSByZXF1aXJlKCcuLi9oYW1tZXInKTtcbmltcG9ydCB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG4vKipcbiAqIFN3aXBlXG4gKiBSZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgbW92aW5nIGZhc3QgZW5vdWdoIGluIHRoZSBhbGxvd2VkIGRpcmVjdGlvbi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgQ29udGludW91c1JlY29nbml6ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFN3aXBlUmVjb2duaXplciBleHRlbmRzIGF0dHJpYnV0ZS5Db250aW51b3VzUmVjb2duaXplciB7XG4gICAgcHJpdmF0ZSBkaXNwbGFjZW1lbnRUaHJlc2hvbGQ6IG51bWJlciA9IDEwO1xuICAgIHByaXZhdGUgc3BlZWRUaHJlc2hvbGQ6IG51bWJlciA9IDAuNjU7XG4gICAgcHJpdmF0ZSBkaXJlY3Rpb246IG51bWJlciA9IGhhbW1lci5ESVJFQ1RJT05fSE9SSVpPTlRBTCB8IGhhbW1lci5ESVJFQ1RJT05fVkVSVElDQUw7XG5cbiAgICBjb25zdHJ1Y3RvcihldmVudE5hbWU6IHN0cmluZywgZW5hYmxlZDogYm9vbGVhbikge1xuICAgICAgICBzdXBlcihldmVudE5hbWUsIGVuYWJsZWQsIDEpXG4gICAgfVxuXG4gICAgZ2V0VG91Y2hBY3Rpb24oKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gcGFuLlBhblJlY29nbml6ZXIucHJvdG90eXBlLmdldFRvdWNoQWN0aW9uLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgYXR0cmlidXRlVGVzdChpbnB1dDogaGFtbWVyLklDb21wdXRlZEV2ZW50KTogYm9vbGVhbiB7XG4gICAgICAgIHZhciBzcGVlZDogbnVtYmVyO1xuXG4gICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiAmIChoYW1tZXIuRElSRUNUSU9OX0hPUklaT05UQUwgfCBoYW1tZXIuRElSRUNUSU9OX1ZFUlRJQ0FMKSkge1xuICAgICAgICAgICAgc3BlZWQgPSBpbnB1dC52ZWxvY2l0eS5ub3JtKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kaXJlY3Rpb24gJiBoYW1tZXIuRElSRUNUSU9OX0hPUklaT05UQUwpIHtcbiAgICAgICAgICAgIHNwZWVkID0gTWF0aC5hYnMoaW5wdXQudmVsb2NpdHkueCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kaXJlY3Rpb24gJiBoYW1tZXIuRElSRUNUSU9OX1ZFUlRJQ0FMKSB7XG4gICAgICAgICAgICBzcGVlZCA9IE1hdGguYWJzKGlucHV0LnZlbG9jaXR5LnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzUGFyYWxsZWw6IGJvb2xlYW4gPSAodGhpcy5kaXJlY3Rpb24gJiBpbnB1dC5kaXJlY3Rpb24pID4gMDtcbiAgICAgICAgdmFyIGlzRmFyRW5vdWdoOiBib29sZWFuID0gaW5wdXQuZGlzdGFuY2UgPiB0aGlzLmRpc3BsYWNlbWVudFRocmVzaG9sZDtcbiAgICAgICAgdmFyIGlzRmFzdEVub3VnaDogYm9vbGVhbiA9IHNwZWVkID4gdGhpcy5zcGVlZFRocmVzaG9sZDtcbiAgICAgICAgdmFyIGlzRW5kRXZlbnRUeXBlOiBib29sZWFuID0gKGlucHV0LmV2ZW50VHlwZSAmIGhhbW1lci5JTlBVVF9FTkQpID4gMDtcblxuICAgICAgICByZXR1cm4gc3VwZXIuYXR0cmlidXRlVGVzdChpbnB1dCkgJiYgaXNQYXJhbGxlbCAmJiBpc0ZhckVub3VnaCAmJiBpc0Zhc3RFbm91Z2ggJiYgaXNFbmRFdmVudFR5cGU7XG4gICAgfVxuXG4gICAgZW1pdCgpOiB2b2lkIHtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHVuZGVmaW5lZDsvL2hhbW1lci5kaXJlY3Rpb25TdHIoaW5wdXQuZGlyZWN0aW9uKTtcbiAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdzd2lwZScpO1xuICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLmV2ZW50TmFtZSArIGRpcmVjdGlvbiwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMuZXZlbnROYW1lLCBldmVudCk7XG4gICAgfVxufVxuIl19