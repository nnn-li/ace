import { decodeEventType, INPUT_CANCEL, INPUT_END, INPUT_MOVE, INPUT_START, Recognizer, STATE_BEGAN, STATE_CANCELLED, STATE_CHANGED, STATE_FAILED, STATE_RECOGNIZED } from '../hammer';
export class ContinuousRecognizer extends Recognizer {
    constructor(eventName, enabled, pointers) {
        super(eventName, enabled);
        this.pointers = pointers;
    }
    attributeTest(input) {
        switch (input.eventType) {
            case INPUT_START:
                {
                    return input.touchesLength === this.pointers;
                }
                break;
            case INPUT_MOVE:
                {
                    return input.touchesLength === this.pointers;
                }
                break;
            case INPUT_END:
                {
                    return input.touchesLength === this.pointers - 1;
                }
                break;
            case INPUT_CANCEL:
                {
                    return true;
                }
                break;
            default: {
                throw new Error(decodeEventType(input.eventType));
            }
        }
    }
    process(input) {
        var state = this.state;
        var eventType = input.eventType;
        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
        var isValid = this.attributeTest(input);
        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
            return state | STATE_CANCELLED;
        }
        else if (isRecognized || isValid) {
            if (eventType & INPUT_END) {
                return state | STATE_RECOGNIZED;
            }
            else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
            }
            else {
                return state | STATE_CHANGED;
            }
        }
        return STATE_FAILED;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2hhbW1lci9yZWNvZ25pemVycy9hdHRyaWJ1dGUudHMiXSwibmFtZXMiOlsiQ29udGludW91c1JlY29nbml6ZXIiLCJDb250aW51b3VzUmVjb2duaXplci5jb25zdHJ1Y3RvciIsIkNvbnRpbnVvdXNSZWNvZ25pemVyLmF0dHJpYnV0ZVRlc3QiLCJDb250aW51b3VzUmVjb2duaXplci5wcm9jZXNzIl0sIm1hcHBpbmdzIjoiT0FBTyxFQUNQLGVBQWUsRUFFZixZQUFZLEVBQ1osU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsVUFBVSxFQUNWLFdBQVcsRUFDWCxlQUFlLEVBQ2YsYUFBYSxFQUNiLFlBQVksRUFDWixnQkFBZ0IsRUFDZixNQUFNLFdBQVc7QUFFbEIsMENBQTBDLFVBQVU7SUFPaERBLFlBQVlBLFNBQWlCQSxFQUFFQSxPQUFnQkEsRUFBRUEsUUFBZ0JBO1FBQzdEQyxNQUFNQSxTQUFTQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUMxQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsUUFBUUEsQ0FBQ0E7SUFDN0JBLENBQUNBO0lBUURELGFBQWFBLENBQUNBLEtBQXFCQTtRQUMvQkUsTUFBTUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdEJBLEtBQUtBLFdBQVdBO2dCQUFFQSxDQUFDQTtvQkFDZkEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsYUFBYUEsS0FBS0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7Z0JBQ2pEQSxDQUFDQTtnQkFDR0EsS0FBS0EsQ0FBQ0E7WUFDVkEsS0FBS0EsVUFBVUE7Z0JBQUVBLENBQUNBO29CQUNkQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxhQUFhQSxLQUFLQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQTtnQkFDakRBLENBQUNBO2dCQUNHQSxLQUFLQSxDQUFDQTtZQUNWQSxLQUFLQSxTQUFTQTtnQkFBRUEsQ0FBQ0E7b0JBQ2JBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLGFBQWFBLEtBQUtBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLENBQUNBLENBQUNBO2dCQUNyREEsQ0FBQ0E7Z0JBQ0dBLEtBQUtBLENBQUNBO1lBQ1ZBLEtBQUtBLFlBQVlBO2dCQUFFQSxDQUFDQTtvQkFDaEJBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO2dCQUNoQkEsQ0FBQ0E7Z0JBQ0dBLEtBQUtBLENBQUNBO1lBQ1ZBLFNBQVNBLENBQUNBO2dCQUNOQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSxlQUFlQSxDQUFDQSxLQUFLQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN0REEsQ0FBQ0E7UUFDTEEsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFRREYsT0FBT0EsQ0FBQ0EsS0FBcUJBO1FBRXpCRyxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQTtRQUN2QkEsSUFBSUEsU0FBU0EsR0FBR0EsS0FBS0EsQ0FBQ0EsU0FBU0EsQ0FBQ0E7UUFFaENBLElBQUlBLFlBQVlBLEdBQUdBLEtBQUtBLEdBQUdBLENBQUNBLFdBQVdBLEdBQUdBLGFBQWFBLENBQUNBLENBQUNBO1FBQ3pEQSxJQUFJQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUd4Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsWUFBWUEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsWUFBWUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDekRBLE1BQU1BLENBQUNBLEtBQUtBLEdBQUdBLGVBQWVBLENBQUNBO1FBQ25DQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxZQUFZQSxJQUFJQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMvQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsU0FBU0EsR0FBR0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3hCQSxNQUFNQSxDQUFDQSxLQUFLQSxHQUFHQSxnQkFBZ0JBLENBQUNBO1lBQ3BDQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDOUJBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBO1lBQ3ZCQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDRkEsTUFBTUEsQ0FBQ0EsS0FBS0EsR0FBR0EsYUFBYUEsQ0FBQ0E7WUFDakNBLENBQUNBO1FBQ0xBLENBQUNBO1FBQ0RBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBO0lBQ3hCQSxDQUFDQTtBQUNMSCxDQUFDQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbmRlY29kZUV2ZW50VHlwZSxcbklDb21wdXRlZEV2ZW50LFxuSU5QVVRfQ0FOQ0VMLFxuSU5QVVRfRU5ELFxuSU5QVVRfTU9WRSxcbklOUFVUX1NUQVJULFxuUmVjb2duaXplcixcblNUQVRFX0JFR0FOLFxuU1RBVEVfQ0FOQ0VMTEVELFxuU1RBVEVfQ0hBTkdFRCxcblNUQVRFX0ZBSUxFRCxcblNUQVRFX1JFQ09HTklaRURcbn0gZnJvbSAnLi4vaGFtbWVyJztcblxuZXhwb3J0IGNsYXNzIENvbnRpbnVvdXNSZWNvZ25pemVyIGV4dGVuZHMgUmVjb2duaXplciB7XG4gICAgcHJpdmF0ZSBwb2ludGVyczogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoaXMgcmVjb2duaXplciBpcyBqdXN0IHVzZWQgYXMgYSBiYXNlIGZvciB0aGUgc2ltcGxlIGF0dHJpYnV0ZSByZWNvZ25pemVycy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAZXh0ZW5kcyBSZWNvZ25pemVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZXZlbnROYW1lOiBzdHJpbmcsIGVuYWJsZWQ6IGJvb2xlYW4sIHBvaW50ZXJzOiBudW1iZXIpIHtcbiAgICAgICAgc3VwZXIoZXZlbnROYW1lLCBlbmFibGVkKTtcbiAgICAgICAgdGhpcy5wb2ludGVycyA9IHBvaW50ZXJzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gY2hlY2sgaWYgdGhlIHJlY29nbml6ZXIgcmVjZWl2ZXMgdmFsaWQgaW5wdXQsIGxpa2UgaW5wdXQuZGlzdGFuY2UgPiAxMC5cbiAgICAgKiBAbWVtYmVyb2YgQ29udGludW91c1JlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge0lDb21wdXRlZEV2ZW50fSBpbnB1dFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSByZWNvZ25pemVkXG4gICAgICovXG4gICAgYXR0cmlidXRlVGVzdChpbnB1dDogSUNvbXB1dGVkRXZlbnQpOiBib29sZWFuIHtcbiAgICAgICAgc3dpdGNoIChpbnB1dC5ldmVudFR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgSU5QVVRfU1RBUlQ6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQudG91Y2hlc0xlbmd0aCA9PT0gdGhpcy5wb2ludGVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgSU5QVVRfTU9WRToge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dC50b3VjaGVzTGVuZ3RoID09PSB0aGlzLnBvaW50ZXJzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBJTlBVVF9FTkQ6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQudG91Y2hlc0xlbmd0aCA9PT0gdGhpcy5wb2ludGVycyAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIElOUFVUX0NBTkNFTDoge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihkZWNvZGVFdmVudFR5cGUoaW5wdXQuZXZlbnRUeXBlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIHRoZSBpbnB1dCBhbmQgcmV0dXJuIHRoZSBzdGF0ZSBmb3IgdGhlIHJlY29nbml6ZXJcbiAgICAgKiBAbWVtYmVyb2YgQ29udGludW91c1JlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKiBAcmV0dXJucyB7Kn0gU3RhdGVcbiAgICAgKi9cbiAgICBwcm9jZXNzKGlucHV0OiBJQ29tcHV0ZWRFdmVudCk6IG51bWJlciB7XG5cbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgdmFyIGV2ZW50VHlwZSA9IGlucHV0LmV2ZW50VHlwZTtcblxuICAgICAgICB2YXIgaXNSZWNvZ25pemVkID0gc3RhdGUgJiAoU1RBVEVfQkVHQU4gfCBTVEFURV9DSEFOR0VEKTtcbiAgICAgICAgdmFyIGlzVmFsaWQgPSB0aGlzLmF0dHJpYnV0ZVRlc3QoaW5wdXQpO1xuXG4gICAgICAgIC8vIG9uIGNhbmNlbCBpbnB1dCBhbmQgd2UndmUgcmVjb2duaXplZCBiZWZvcmUsIHJldHVybiBTVEFURV9DQU5DRUxMRURcbiAgICAgICAgaWYgKGlzUmVjb2duaXplZCAmJiAoZXZlbnRUeXBlICYgSU5QVVRfQ0FOQ0VMIHx8ICFpc1ZhbGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlIHwgU1RBVEVfQ0FOQ0VMTEVEO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUmVjb2duaXplZCB8fCBpc1ZhbGlkKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlIHwgU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCEoc3RhdGUgJiBTVEFURV9CRUdBTikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEVfQkVHQU47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9DSEFOR0VEO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XG4gICAgfVxufVxuIl19