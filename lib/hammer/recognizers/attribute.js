import { decodeEventType, INPUT_CANCEL, INPUT_END, INPUT_MOVE, INPUT_START, Recognizer, STATE_BEGAN, STATE_CANCELLED, STATE_CHANGED, STATE_FAILED, STATE_RECOGNIZED } from '../hammer';
export class ContinuousRecognizer extends Recognizer {
    constructor(eventName, enabled, pointers) {
        super(eventName, enabled);
        this.pointers = pointers;
    }
    attributeTest(input) {
        switch (input.eventType) {
            case INPUT_START:
                {
                    return input.touchesLength === this.pointers;
                }
                break;
            case INPUT_MOVE:
                {
                    return input.touchesLength === this.pointers;
                }
                break;
            case INPUT_END:
                {
                    return input.touchesLength === this.pointers - 1;
                }
                break;
            case INPUT_CANCEL:
                {
                    return true;
                }
                break;
            default: {
                throw new Error(decodeEventType(input.eventType));
            }
        }
    }
    process(input) {
        var state = this.state;
        var eventType = input.eventType;
        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
        var isValid = this.attributeTest(input);
        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
            return state | STATE_CANCELLED;
        }
        else if (isRecognized || isValid) {
            if (eventType & INPUT_END) {
                return state | STATE_RECOGNIZED;
            }
            else if (!(state & STATE_BEGAN)) {
                return STATE_BEGAN;
            }
            else {
                return state | STATE_CHANGED;
            }
        }
        return STATE_FAILED;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2hhbW1lci9yZWNvZ25pemVycy9hdHRyaWJ1dGUudHMiXSwibmFtZXMiOlsiQ29udGludW91c1JlY29nbml6ZXIiLCJDb250aW51b3VzUmVjb2duaXplci5jb25zdHJ1Y3RvciIsIkNvbnRpbnVvdXNSZWNvZ25pemVyLmF0dHJpYnV0ZVRlc3QiLCJDb250aW51b3VzUmVjb2duaXplci5wcm9jZXNzIl0sIm1hcHBpbmdzIjoiT0FBTyxFQUNQLGVBQWUsRUFFZixZQUFZLEVBQ1osU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsVUFBVSxFQUNWLFdBQVcsRUFDWCxlQUFlLEVBQ2YsYUFBYSxFQUNiLFlBQVksRUFDWixnQkFBZ0IsRUFDZixNQUFNLFdBQVc7QUFFbEIsMENBQTBDLFVBQVU7SUFPaERBLFlBQVlBLFNBQWlCQSxFQUFFQSxPQUFnQkEsRUFBRUEsUUFBZ0JBO1FBQzdEQyxNQUFNQSxTQUFTQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUMxQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsUUFBUUEsQ0FBQ0E7SUFDN0JBLENBQUNBO0lBUURELGFBQWFBLENBQUNBLEtBQXFCQTtRQUMvQkUsTUFBTUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdEJBLEtBQUtBLFdBQVdBO2dCQUFFQSxDQUFDQTtvQkFDZkEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsYUFBYUEsS0FBS0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7Z0JBQ2pEQSxDQUFDQTtnQkFDR0EsS0FBS0EsQ0FBQ0E7WUFDVkEsS0FBS0EsVUFBVUE7Z0JBQUVBLENBQUNBO29CQUNkQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxhQUFhQSxLQUFLQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQTtnQkFDakRBLENBQUNBO2dCQUNHQSxLQUFLQSxDQUFDQTtZQUNWQSxLQUFLQSxTQUFTQTtnQkFBRUEsQ0FBQ0E7b0JBQ2JBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLGFBQWFBLEtBQUtBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLENBQUNBLENBQUNBO2dCQUNyREEsQ0FBQ0E7Z0JBQ0dBLEtBQUtBLENBQUNBO1lBQ1ZBLEtBQUtBLFlBQVlBO2dCQUFFQSxDQUFDQTtvQkFDaEJBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO2dCQUNoQkEsQ0FBQ0E7Z0JBQ0dBLEtBQUtBLENBQUNBO1lBQ1ZBLFNBQVNBLENBQUNBO2dCQUNOQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSxlQUFlQSxDQUFDQSxLQUFLQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN0REEsQ0FBQ0E7UUFDTEEsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFRREYsT0FBT0EsQ0FBQ0EsS0FBcUJBO1FBRXpCRyxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQTtRQUN2QkEsSUFBSUEsU0FBU0EsR0FBR0EsS0FBS0EsQ0FBQ0EsU0FBU0EsQ0FBQ0E7UUFFaENBLElBQUlBLFlBQVlBLEdBQUdBLEtBQUtBLEdBQUdBLENBQUNBLFdBQVdBLEdBQUdBLGFBQWFBLENBQUNBLENBQUNBO1FBQ3pEQSxJQUFJQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUd4Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsWUFBWUEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsWUFBWUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDekRBLE1BQU1BLENBQUNBLEtBQUtBLEdBQUdBLGVBQWVBLENBQUNBO1FBQ25DQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxZQUFZQSxJQUFJQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMvQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsU0FBU0EsR0FBR0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3hCQSxNQUFNQSxDQUFDQSxLQUFLQSxHQUFHQSxnQkFBZ0JBLENBQUNBO1lBQ3BDQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxHQUFHQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDOUJBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBO1lBQ3ZCQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDRkEsTUFBTUEsQ0FBQ0EsS0FBS0EsR0FBR0EsYUFBYUEsQ0FBQ0E7WUFDakNBLENBQUNBO1FBQ0xBLENBQUNBO1FBQ0RBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBO0lBQ3hCQSxDQUFDQTtBQUNMSCxDQUFDQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbmRlY29kZUV2ZW50VHlwZSxcbklDb21wdXRlZEV2ZW50LFxuSU5QVVRfQ0FOQ0VMLFxuSU5QVVRfRU5ELFxuSU5QVVRfTU9WRSxcbklOUFVUX1NUQVJULFxuUmVjb2duaXplcixcblNUQVRFX0JFR0FOLFxuU1RBVEVfQ0FOQ0VMTEVELFxuU1RBVEVfQ0hBTkdFRCxcblNUQVRFX0ZBSUxFRCxcblNUQVRFX1JFQ09HTklaRURcbn0gZnJvbSAnLi4vaGFtbWVyJztcblxuZXhwb3J0IGNsYXNzIENvbnRpbnVvdXNSZWNvZ25pemVyIGV4dGVuZHMgUmVjb2duaXplciB7XG4gICAgcHJpdmF0ZSBwb2ludGVyczogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoaXMgcmVjb2duaXplciBpcyBqdXN0IHVzZWQgYXMgYSBiYXNlIGZvciB0aGUgc2ltcGxlIGF0dHJpYnV0ZSByZWNvZ25pemVycy5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAZXh0ZW5kcyBSZWNvZ25pemVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZXZlbnROYW1lOiBzdHJpbmcsIGVuYWJsZWQ6IGJvb2xlYW4sIHBvaW50ZXJzOiBudW1iZXIpIHtcbiAgICAgICAgc3VwZXIoZXZlbnROYW1lLCBlbmFibGVkKTtcbiAgICAgICAgdGhpcy5wb2ludGVycyA9IHBvaW50ZXJzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gY2hlY2sgaWYgdGhlIHJlY29nbml6ZXIgcmVjZWl2ZXMgdmFsaWQgaW5wdXQsIGxpa2UgaW5wdXQuZGlzdGFuY2UgPiAxMC5cbiAgICAgKiBAbWVtYmVyb2YgQ29udGludW91c1JlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge0lDb21wdXRlZEV2ZW50fSBpbnB1dFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHJlY29nbml6ZWRcbiAgICAgKi9cbiAgICBhdHRyaWJ1dGVUZXN0KGlucHV0OiBJQ29tcHV0ZWRFdmVudCk6IGJvb2xlYW4ge1xuICAgICAgICBzd2l0Y2ggKGlucHV0LmV2ZW50VHlwZSkge1xuICAgICAgICAgICAgY2FzZSBJTlBVVF9TVEFSVDoge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dC50b3VjaGVzTGVuZ3RoID09PSB0aGlzLnBvaW50ZXJzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBJTlBVVF9NT1ZFOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0LnRvdWNoZXNMZW5ndGggPT09IHRoaXMucG9pbnRlcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIElOUFVUX0VORDoge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dC50b3VjaGVzTGVuZ3RoID09PSB0aGlzLnBvaW50ZXJzIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgSU5QVVRfQ0FOQ0VMOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGRlY29kZUV2ZW50VHlwZShpbnB1dC5ldmVudFR5cGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgdGhlIGlucHV0IGFuZCByZXR1cm4gdGhlIHN0YXRlIGZvciB0aGUgcmVjb2duaXplclxuICAgICAqIEBtZW1iZXJvZiBDb250aW51b3VzUmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqIEByZXR1cm4geyp9IFN0YXRlXG4gICAgICovXG4gICAgcHJvY2VzcyhpbnB1dDogSUNvbXB1dGVkRXZlbnQpOiBudW1iZXIge1xuXG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHZhciBldmVudFR5cGUgPSBpbnB1dC5ldmVudFR5cGU7XG5cbiAgICAgICAgdmFyIGlzUmVjb2duaXplZCA9IHN0YXRlICYgKFNUQVRFX0JFR0FOIHwgU1RBVEVfQ0hBTkdFRCk7XG4gICAgICAgIHZhciBpc1ZhbGlkID0gdGhpcy5hdHRyaWJ1dGVUZXN0KGlucHV0KTtcblxuICAgICAgICAvLyBvbiBjYW5jZWwgaW5wdXQgYW5kIHdlJ3ZlIHJlY29nbml6ZWQgYmVmb3JlLCByZXR1cm4gU1RBVEVfQ0FOQ0VMTEVEXG4gICAgICAgIGlmIChpc1JlY29nbml6ZWQgJiYgKGV2ZW50VHlwZSAmIElOUFVUX0NBTkNFTCB8fCAhaXNWYWxpZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZSB8IFNUQVRFX0NBTkNFTExFRDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1JlY29nbml6ZWQgfHwgaXNWYWxpZCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX0VORCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZSB8IFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghKHN0YXRlICYgU1RBVEVfQkVHQU4pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNUQVRFX0JFR0FOO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlIHwgU1RBVEVfQ0hBTkdFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xuICAgIH1cbn1cbiJdfQ==