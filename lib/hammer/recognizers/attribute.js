var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var hammer = require('../hammer');
var ContinuousRecognizer = (function (_super) {
    __extends(ContinuousRecognizer, _super);
    function ContinuousRecognizer(eventName, enabled, pointers) {
        _super.call(this, eventName, enabled);
        this.pointers = pointers;
    }
    ContinuousRecognizer.prototype.attributeTest = function (input) {
        switch (input.eventType) {
            case hammer.INPUT_START:
                {
                    return input.touchesLength === this.pointers;
                }
                break;
            case hammer.INPUT_MOVE:
                {
                    return input.touchesLength === this.pointers;
                }
                break;
            case hammer.INPUT_END:
                {
                    return input.touchesLength === this.pointers - 1;
                }
                break;
            case hammer.INPUT_CANCEL:
                {
                    return true;
                }
                break;
            default: {
                throw new Error(hammer.decodeEventType(input.eventType));
            }
        }
    };
    ContinuousRecognizer.prototype.process = function (input) {
        var state = this.state;
        var eventType = input.eventType;
        var isRecognized = state & (hammer.STATE_BEGAN | hammer.STATE_CHANGED);
        var isValid = this.attributeTest(input);
        if (isRecognized && (eventType & hammer.INPUT_CANCEL || !isValid)) {
            return state | hammer.STATE_CANCELLED;
        }
        else if (isRecognized || isValid) {
            if (eventType & hammer.INPUT_END) {
                return state | hammer.STATE_RECOGNIZED;
            }
            else if (!(state & hammer.STATE_BEGAN)) {
                return hammer.STATE_BEGAN;
            }
            else {
                return state | hammer.STATE_CHANGED;
            }
        }
        return hammer.STATE_FAILED;
    };
    return ContinuousRecognizer;
})(hammer.Recognizer);
exports.ContinuousRecognizer = ContinuousRecognizer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2hhbW1lci9yZWNvZ25pemVycy9hdHRyaWJ1dGUudHMiXSwibmFtZXMiOlsiQ29udGludW91c1JlY29nbml6ZXIiLCJDb250aW51b3VzUmVjb2duaXplci5jb25zdHJ1Y3RvciIsIkNvbnRpbnVvdXNSZWNvZ25pemVyLmF0dHJpYnV0ZVRlc3QiLCJDb250aW51b3VzUmVjb2duaXplci5wcm9jZXNzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQU8sTUFBTSxXQUFXLFdBQVcsQ0FBQyxDQUFDO0FBR3JDO0lBQTBDQSx3Q0FBaUJBO0lBT3pEQSw4QkFBWUEsU0FBaUJBLEVBQUVBLE9BQWdCQSxFQUFFQSxRQUFnQkE7UUFDN0RDLGtCQUFNQSxTQUFTQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUMxQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsUUFBUUEsQ0FBQ0E7SUFDN0JBLENBQUNBO0lBUURELDRDQUFhQSxHQUFiQSxVQUFjQSxLQUE0QkE7UUFDeENFLE1BQU1BLENBQUFBLENBQUNBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3ZCQSxLQUFLQSxNQUFNQSxDQUFDQSxXQUFXQTtnQkFBRUEsQ0FBQ0E7b0JBQ3hCQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxhQUFhQSxLQUFLQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQTtnQkFDL0NBLENBQUNBO2dCQUNEQSxLQUFLQSxDQUFDQTtZQUNOQSxLQUFLQSxNQUFNQSxDQUFDQSxVQUFVQTtnQkFBRUEsQ0FBQ0E7b0JBQ3ZCQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxhQUFhQSxLQUFLQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQTtnQkFDL0NBLENBQUNBO2dCQUNEQSxLQUFLQSxDQUFDQTtZQUNOQSxLQUFLQSxNQUFNQSxDQUFDQSxTQUFTQTtnQkFBRUEsQ0FBQ0E7b0JBQ3RCQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxhQUFhQSxLQUFLQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDbkRBLENBQUNBO2dCQUNEQSxLQUFLQSxDQUFDQTtZQUNOQSxLQUFLQSxNQUFNQSxDQUFDQSxZQUFZQTtnQkFBRUEsQ0FBQ0E7b0JBQ3pCQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtnQkFDZEEsQ0FBQ0E7Z0JBQ0RBLEtBQUtBLENBQUNBO1lBQ05BLFNBQVVBLENBQUNBO2dCQUNUQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxlQUFlQSxDQUFDQSxLQUFLQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMzREEsQ0FBQ0E7UUFDSEEsQ0FBQ0E7SUFDSEEsQ0FBQ0E7SUFRREYsc0NBQU9BLEdBQVBBLFVBQVFBLEtBQTRCQTtRQUVsQ0csSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7UUFDdkJBLElBQUlBLFNBQVNBLEdBQUdBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBO1FBRWhDQSxJQUFJQSxZQUFZQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxXQUFXQSxHQUFHQSxNQUFNQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtRQUN2RUEsSUFBSUEsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFHeENBLEVBQUVBLENBQUNBLENBQUNBLFlBQVlBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLE1BQU1BLENBQUNBLFlBQVlBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xFQSxNQUFNQSxDQUFDQSxLQUFLQSxHQUFHQSxNQUFNQSxDQUFDQSxlQUFlQSxDQUFDQTtRQUN4Q0EsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsWUFBWUEsSUFBSUEsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakNBLEVBQUVBLENBQUNBLENBQUNBLFNBQVNBLEdBQUdBLE1BQU1BLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO2dCQUNqQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsR0FBR0EsTUFBTUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQTtZQUN6Q0EsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsR0FBR0EsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3ZDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxXQUFXQSxDQUFDQTtZQUM1QkEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ0pBLE1BQU1BLENBQUNBLEtBQUtBLEdBQUdBLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBO1lBQ3RDQSxDQUFDQTtRQUNIQSxDQUFDQTtRQUNEQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQTtJQUM3QkEsQ0FBQ0E7SUFDSEgsMkJBQUNBO0FBQURBLENBQUNBLEFBekVELEVBQTBDLE1BQU0sQ0FBQyxVQUFVLEVBeUUxRDtBQXpFWSw0QkFBb0IsdUJBeUVoQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGhhbW1lciA9IHJlcXVpcmUoJy4uL2hhbW1lcicpO1xuaW1wb3J0IHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuZXhwb3J0IGNsYXNzIENvbnRpbnVvdXNSZWNvZ25pemVyIGV4dGVuZHMgaGFtbWVyLlJlY29nbml6ZXIge1xuICBwcml2YXRlIHBvaW50ZXJzOiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGlzIHJlY29nbml6ZXIgaXMganVzdCB1c2VkIGFzIGEgYmFzZSBmb3IgdGhlIHNpbXBsZSBhdHRyaWJ1dGUgcmVjb2duaXplcnMuXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAZXh0ZW5kcyBSZWNvZ25pemVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcihldmVudE5hbWU6IHN0cmluZywgZW5hYmxlZDogYm9vbGVhbiwgcG9pbnRlcnM6IG51bWJlcikge1xuICAgICAgc3VwZXIoZXZlbnROYW1lLCBlbmFibGVkKTtcbiAgICAgIHRoaXMucG9pbnRlcnMgPSBwb2ludGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGNoZWNrIGlmIHRoZSByZWNvZ25pemVyIHJlY2VpdmVzIHZhbGlkIGlucHV0LCBsaWtlIGlucHV0LmRpc3RhbmNlID4gMTAuXG4gICAqIEBtZW1iZXJvZiBDb250aW51b3VzUmVjb2duaXplclxuICAgKiBAcGFyYW0ge0lDb21wdXRlZEV2ZW50fSBpbnB1dFxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gcmVjb2duaXplZFxuICAgKi9cbiAgYXR0cmlidXRlVGVzdChpbnB1dDogaGFtbWVyLklDb21wdXRlZEV2ZW50KTogYm9vbGVhbiB7XG4gICAgc3dpdGNoKGlucHV0LmV2ZW50VHlwZSkge1xuICAgICAgY2FzZSBoYW1tZXIuSU5QVVRfU1RBUlQ6IHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnRvdWNoZXNMZW5ndGggPT09IHRoaXMucG9pbnRlcnM7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgaGFtbWVyLklOUFVUX01PVkU6IHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnRvdWNoZXNMZW5ndGggPT09IHRoaXMucG9pbnRlcnM7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgaGFtbWVyLklOUFVUX0VORDoge1xuICAgICAgICByZXR1cm4gaW5wdXQudG91Y2hlc0xlbmd0aCA9PT0gdGhpcy5wb2ludGVycyAtIDE7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICAgIGNhc2UgaGFtbWVyLklOUFVUX0NBTkNFTDoge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdCA6IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGhhbW1lci5kZWNvZGVFdmVudFR5cGUoaW5wdXQuZXZlbnRUeXBlKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgdGhlIGlucHV0IGFuZCByZXR1cm4gdGhlIHN0YXRlIGZvciB0aGUgcmVjb2duaXplclxuICAgKiBAbWVtYmVyb2YgQ29udGludW91c1JlY29nbml6ZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAqIEByZXR1cm5zIHsqfSBTdGF0ZVxuICAgKi9cbiAgcHJvY2VzcyhpbnB1dDogaGFtbWVyLklDb21wdXRlZEV2ZW50KTogbnVtYmVyIHtcblxuICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgdmFyIGV2ZW50VHlwZSA9IGlucHV0LmV2ZW50VHlwZTtcblxuICAgIHZhciBpc1JlY29nbml6ZWQgPSBzdGF0ZSAmIChoYW1tZXIuU1RBVEVfQkVHQU4gfCBoYW1tZXIuU1RBVEVfQ0hBTkdFRCk7XG4gICAgdmFyIGlzVmFsaWQgPSB0aGlzLmF0dHJpYnV0ZVRlc3QoaW5wdXQpO1xuXG4gICAgLy8gb24gY2FuY2VsIGlucHV0IGFuZCB3ZSd2ZSByZWNvZ25pemVkIGJlZm9yZSwgcmV0dXJuIFNUQVRFX0NBTkNFTExFRFxuICAgIGlmIChpc1JlY29nbml6ZWQgJiYgKGV2ZW50VHlwZSAmIGhhbW1lci5JTlBVVF9DQU5DRUwgfHwgIWlzVmFsaWQpKSB7XG4gICAgICByZXR1cm4gc3RhdGUgfCBoYW1tZXIuU1RBVEVfQ0FOQ0VMTEVEO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1JlY29nbml6ZWQgfHwgaXNWYWxpZCkge1xuICAgICAgaWYgKGV2ZW50VHlwZSAmIGhhbW1lci5JTlBVVF9FTkQpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlIHwgaGFtbWVyLlNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghKHN0YXRlICYgaGFtbWVyLlNUQVRFX0JFR0FOKSkge1xuICAgICAgICByZXR1cm4gaGFtbWVyLlNUQVRFX0JFR0FOO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBzdGF0ZSB8IGhhbW1lci5TVEFURV9DSEFOR0VEO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGFtbWVyLlNUQVRFX0ZBSUxFRDtcbiAgfVxufVxuIl19