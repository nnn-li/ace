var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var hammer = require('../hammer');
var utils = require('../utils');
var PressRecognizer = (function (_super) {
    __extends(PressRecognizer, _super);
    function PressRecognizer(eventName, enabled) {
        _super.call(this, eventName ? eventName : 'press', enabled);
        this.pointers = 1;
        this.time = 500;
        this.threshold = 5;
        this._timer = null;
        this._input = null;
    }
    PressRecognizer.prototype.getTouchAction = function () {
        return [hammer.TOUCH_ACTION_AUTO];
    };
    PressRecognizer.prototype.process = function (input) {
        var validPointers = input.touchesLength === this.pointers;
        var validMovement = input.distance < this.threshold;
        var validTime = input.deltaTime > this.time;
        this._input = input;
        if (!validMovement || !validPointers || (input.eventType & (hammer.INPUT_END | hammer.INPUT_CANCEL) && !validTime)) {
            this.reset();
        }
        else if (input.eventType & hammer.INPUT_START) {
            this.reset();
            this._timer = utils.setTimeoutContext(function () {
                this.state = hammer.STATE_RECOGNIZED;
                this.tryEmit();
            }, this.time, this);
        }
        else if (input.eventType & hammer.INPUT_END) {
            return hammer.STATE_RECOGNIZED;
        }
        return hammer.STATE_FAILED;
    };
    PressRecognizer.prototype.reset = function () {
        clearTimeout(this._timer);
    };
    PressRecognizer.prototype.emit = function () {
        if (this.state !== hammer.STATE_RECOGNIZED) {
            return;
        }
        var event = new Event('press');
        this.manager.emit(this.eventName, event);
    };
    return PressRecognizer;
})(hammer.Recognizer);
exports.PressRecognizer = PressRecognizer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGFtbWVyL3JlY29nbml6ZXJzL3ByZXNzLnRzIl0sIm5hbWVzIjpbIlByZXNzUmVjb2duaXplciIsIlByZXNzUmVjb2duaXplci5jb25zdHJ1Y3RvciIsIlByZXNzUmVjb2duaXplci5nZXRUb3VjaEFjdGlvbiIsIlByZXNzUmVjb2duaXplci5wcm9jZXNzIiwiUHJlc3NSZWNvZ25pemVyLnJlc2V0IiwiUHJlc3NSZWNvZ25pemVyLmVtaXQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBTyxNQUFNLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFDckMsSUFBTyxLQUFLLFdBQVcsVUFBVSxDQUFDLENBQUM7QUFFbkM7SUFBcUNBLG1DQUFpQkE7SUFZbERBLHlCQUFZQSxTQUFpQkEsRUFBRUEsT0FBZ0JBO1FBQzNDQyxrQkFBTUEsU0FBU0EsR0FBR0EsU0FBU0EsR0FBR0EsT0FBT0EsRUFBRUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFWNUNBLGFBQVFBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2JBLFNBQUlBLEdBQUdBLEdBQUdBLENBQUNBO1FBQ1hBLGNBQVNBLEdBQUdBLENBQUNBLENBQUNBO1FBVWxCQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUNuQkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDdkJBLENBQUNBO0lBRURELHdDQUFjQSxHQUFkQTtRQUNJRSxNQUFNQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBO0lBQ3RDQSxDQUFDQTtJQUVERixpQ0FBT0EsR0FBUEEsVUFBUUEsS0FBNEJBO1FBQ2hDRyxJQUFJQSxhQUFhQSxHQUFHQSxLQUFLQSxDQUFDQSxhQUFhQSxLQUFLQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQTtRQUMxREEsSUFBSUEsYUFBYUEsR0FBR0EsS0FBS0EsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7UUFDcERBLElBQUlBLFNBQVNBLEdBQUdBLEtBQUtBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBO1FBRTVDQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUlwQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsYUFBYUEsSUFBSUEsQ0FBQ0EsYUFBYUEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsU0FBU0EsR0FBR0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsU0FBU0EsR0FBR0EsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakhBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLENBQUNBO1FBQ2pCQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxTQUFTQSxHQUFHQSxNQUFNQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM1Q0EsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7WUFDYkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsS0FBS0EsQ0FBQ0EsaUJBQWlCQSxDQUFDQTtnQkFDbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ3JDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNuQixDQUFDLEVBQUVBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQ3hCQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxTQUFTQSxHQUFHQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMxQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQTtRQUNuQ0EsQ0FBQ0E7UUFDREEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7SUFDL0JBLENBQUNBO0lBRURILCtCQUFLQSxHQUFMQTtRQUNJSSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtJQUM5QkEsQ0FBQ0E7SUFFREosOEJBQUlBLEdBQUpBO1FBQ0lLLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEtBQUtBLE1BQU1BLENBQUNBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDekNBLE1BQU1BLENBQUNBO1FBQ1hBLENBQUNBO1FBRURBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1FBQy9CQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtJQUM3Q0EsQ0FBQ0E7SUFDTEwsc0JBQUNBO0FBQURBLENBQUNBLEFBNURELEVBQXFDLE1BQU0sQ0FBQyxVQUFVLEVBNERyRDtBQTVEWSx1QkFBZSxrQkE0RDNCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaGFtbWVyID0gcmVxdWlyZSgnLi4vaGFtbWVyJyk7XG5pbXBvcnQgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5leHBvcnQgY2xhc3MgUHJlc3NSZWNvZ25pemVyIGV4dGVuZHMgaGFtbWVyLlJlY29nbml6ZXIge1xuICAgIHByaXZhdGUgX3RpbWVyO1xuICAgIHByaXZhdGUgX2lucHV0O1xuICAgIHByaXZhdGUgcG9pbnRlcnMgPSAxO1xuICAgIHByaXZhdGUgdGltZSA9IDUwMDsgLy8gbWluaW1hbCB0aW1lIG9mIHRoZSBwb2ludGVyIHRvIGJlIHByZXNzZWRcbiAgICBwcml2YXRlIHRocmVzaG9sZCA9IDU7IC8vIGEgbWluaW1hbCBtb3ZlbWVudCBpcyBvaywgYnV0IGtlZXAgaXQgbG93XG4gICAgLyoqXG4gICAgICogUHJlc3NcbiAgICAgKiBSZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgZG93biBmb3IgeCBtcyB3aXRob3V0IGFueSBtb3ZlbWVudC5cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAZXh0ZW5kcyBSZWNvZ25pemVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZXZlbnROYW1lOiBzdHJpbmcsIGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgc3VwZXIoZXZlbnROYW1lID8gZXZlbnROYW1lIDogJ3ByZXNzJywgZW5hYmxlZCk7XG5cbiAgICAgICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9pbnB1dCA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0VG91Y2hBY3Rpb24oKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gW2hhbW1lci5UT1VDSF9BQ1RJT05fQVVUT107XG4gICAgfVxuXG4gICAgcHJvY2VzcyhpbnB1dDogaGFtbWVyLklDb21wdXRlZEV2ZW50KTogbnVtYmVyIHtcbiAgICAgICAgdmFyIHZhbGlkUG9pbnRlcnMgPSBpbnB1dC50b3VjaGVzTGVuZ3RoID09PSB0aGlzLnBvaW50ZXJzO1xuICAgICAgICB2YXIgdmFsaWRNb3ZlbWVudCA9IGlucHV0LmRpc3RhbmNlIDwgdGhpcy50aHJlc2hvbGQ7XG4gICAgICAgIHZhciB2YWxpZFRpbWUgPSBpbnB1dC5kZWx0YVRpbWUgPiB0aGlzLnRpbWU7XG5cbiAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcblxuICAgICAgICAvLyB3ZSBvbmx5IGFsbG93IGxpdHRsZSBtb3ZlbWVudFxuICAgICAgICAvLyBhbmQgd2UndmUgcmVhY2hlZCBhbiBlbmQgZXZlbnQsIHNvIGEgdGFwIGlzIHBvc3NpYmxlXG4gICAgICAgIGlmICghdmFsaWRNb3ZlbWVudCB8fCAhdmFsaWRQb2ludGVycyB8fCAoaW5wdXQuZXZlbnRUeXBlICYgKGhhbW1lci5JTlBVVF9FTkQgfCBoYW1tZXIuSU5QVVRfQ0FOQ0VMKSAmJiAhdmFsaWRUaW1lKSkge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlucHV0LmV2ZW50VHlwZSAmIGhhbW1lci5JTlBVVF9TVEFSVCkge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSB1dGlscy5zZXRUaW1lb3V0Q29udGV4dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gaGFtbWVyLlNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgICAgICAgICAgdGhpcy50cnlFbWl0KCk7XG4gICAgICAgICAgICB9LCB0aGlzLnRpbWUsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlucHV0LmV2ZW50VHlwZSAmIGhhbW1lci5JTlBVVF9FTkQpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW1tZXIuU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFtbWVyLlNUQVRFX0ZBSUxFRDtcbiAgICB9XG5cbiAgICByZXNldCgpOiB2b2lkIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTtcbiAgICB9XG5cbiAgICBlbWl0KCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gaGFtbWVyLlNUQVRFX1JFQ09HTklaRUQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgncHJlc3MnKTtcbiAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5ldmVudE5hbWUsIGV2ZW50KTtcbiAgICB9XG59XG4iXX0=