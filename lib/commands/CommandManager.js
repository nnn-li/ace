import { applyMixins } from "../lib/mix";
import HashHandler from "../keyboard/HashHandler";
import EventEmitterClass from "../lib/event_emitter";
export default class CommandManager extends EventEmitterClass {
    constructor(platform, commands) {
        super();
        this.hashHandler = new HashHandler(commands, platform);
        this.setDefaultHandler("exec", function (e) {
            return e.command.exec(e.editor, e.args || {});
        });
    }
    get platform() {
        return this.hashHandler.platform;
    }
    get commands() {
        return this.hashHandler.commands;
    }
    get commandKeyBinding() {
        return this.hashHandler.commandKeyBinding;
    }
    bindKey(key, command) {
        return this.hashHandler.bindKey(key, command);
    }
    bindKeys(keyList) {
        return this.hashHandler.bindKeys(keyList);
    }
    addCommand(command) {
        this.hashHandler.addCommand(command);
    }
    removeCommand(commandName) {
        this.hashHandler.removeCommand(commandName);
    }
    findKeyCommand(hashId, keyString) {
        return this.hashHandler.findKeyCommand(hashId, keyString);
    }
    parseKeys(keys) {
        return this.hashHandler.parseKeys(keys);
    }
    addCommands(commands) {
        this.hashHandler.addCommands(commands);
    }
    removeCommands(commands) {
        this.hashHandler.removeCommands(commands);
    }
    handleKeyboard(data, hashId, keyString, keyCode) {
        return this.hashHandler.handleKeyboard(data, hashId, keyString, keyCode);
    }
    exec(command, editor, args) {
        if (typeof command === 'string') {
            command = this.hashHandler.commands[command];
        }
        if (!command) {
            return false;
        }
        if (editor && editor.$readOnly && !command.readOnly) {
            return false;
        }
        var e = { editor: editor, command: command, args: args };
        var retvalue = this._emit("exec", e);
        this._signal("afterExec", e);
        return retvalue === false ? false : true;
    }
    toggleRecording(editor) {
        if (this.$inReplay)
            return;
        editor && editor._emit("changeStatus");
        if (this.recording) {
            this.macro.pop();
            this.off("exec", this.$addCommandToMacro);
            if (!this.macro.length)
                this.macro = this.oldMacro;
            return this.recording = false;
        }
        if (!this.$addCommandToMacro) {
            this.$addCommandToMacro = function (e) {
                this.macro.push([e.command, e.args]);
            }.bind(this);
        }
        this.oldMacro = this.macro;
        this.macro = [];
        this.on("exec", this.$addCommandToMacro);
        return this.recording = true;
    }
    replay(editor) {
        if (this.$inReplay || !this.macro)
            return;
        if (this.recording)
            return this.toggleRecording(editor);
        try {
            this.$inReplay = true;
            this.macro.forEach(function (x) {
                if (typeof x == "string")
                    this.exec(x, editor);
                else
                    this.exec(x[0], editor, x[1]);
            }, this);
        }
        finally {
            this.$inReplay = false;
        }
    }
    trimMacro(m) {
        return m.map(function (x) {
            if (typeof x[0] != "string")
                x[0] = x[0].name;
            if (!x[1])
                x = x[0];
            return x;
        });
    }
}
applyMixins(CommandManager, [HashHandler]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZE1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbWFuZHMvQ29tbWFuZE1hbmFnZXIudHMiXSwibmFtZXMiOlsiQ29tbWFuZE1hbmFnZXIiLCJDb21tYW5kTWFuYWdlci5jb25zdHJ1Y3RvciIsIkNvbW1hbmRNYW5hZ2VyLnBsYXRmb3JtIiwiQ29tbWFuZE1hbmFnZXIuY29tbWFuZHMiLCJDb21tYW5kTWFuYWdlci5jb21tYW5kS2V5QmluZGluZyIsIkNvbW1hbmRNYW5hZ2VyLmJpbmRLZXkiLCJDb21tYW5kTWFuYWdlci5iaW5kS2V5cyIsIkNvbW1hbmRNYW5hZ2VyLmFkZENvbW1hbmQiLCJDb21tYW5kTWFuYWdlci5yZW1vdmVDb21tYW5kIiwiQ29tbWFuZE1hbmFnZXIuZmluZEtleUNvbW1hbmQiLCJDb21tYW5kTWFuYWdlci5wYXJzZUtleXMiLCJDb21tYW5kTWFuYWdlci5hZGRDb21tYW5kcyIsIkNvbW1hbmRNYW5hZ2VyLnJlbW92ZUNvbW1hbmRzIiwiQ29tbWFuZE1hbmFnZXIuaGFuZGxlS2V5Ym9hcmQiLCJDb21tYW5kTWFuYWdlci5leGVjIiwiQ29tbWFuZE1hbmFnZXIudG9nZ2xlUmVjb3JkaW5nIiwiQ29tbWFuZE1hbmFnZXIucmVwbGF5IiwiQ29tbWFuZE1hbmFnZXIudHJpbU1hY3JvIl0sIm1hcHBpbmdzIjoiT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLFlBQVk7T0FDL0IsV0FBVyxNQUFNLHlCQUF5QjtPQUMxQyxpQkFBaUIsTUFBTSxzQkFBc0I7QUFJcEQsNENBQTRDLGlCQUFpQjtJQWF6REEsWUFBWUEsUUFBZ0JBLEVBQUVBLFFBQW1CQTtRQUM3Q0MsT0FBT0EsQ0FBQ0E7UUFDUkEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsSUFBSUEsV0FBV0EsQ0FBQ0EsUUFBUUEsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQUE7UUFDdERBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsTUFBTUEsRUFB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QUNBLE9BQU9BLENBQUNBLFVBQVNBLENBQUNBO2dCQUN6QixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxRQUFRLENBQUM7b0JBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUN6QixJQUFJO29CQUNBLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxDQUFDLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQ2JBLENBQUNBO2dCQUFTQSxDQUFDQTtZQUNQQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUMzQkEsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFFRGhCLFNBQVNBLENBQUNBLENBQUNBO1FBQ1BpQixNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxVQUFTQSxDQUFDQTtZQUNuQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUM7Z0JBQ3hCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3JCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNOLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDYixNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2IsQ0FBQyxDQUFDQSxDQUFDQTtJQUNQQSxDQUFDQTtBQUNMakIsQ0FBQ0E7QUFFRCxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXBwbHlNaXhpbnN9IGZyb20gXCIuLi9saWIvbWl4XCI7XG5pbXBvcnQgSGFzaEhhbmRsZXIgZnJvbSBcIi4uL2tleWJvYXJkL0hhc2hIYW5kbGVyXCI7XG5pbXBvcnQgRXZlbnRFbWl0dGVyQ2xhc3MgZnJvbSBcIi4uL2xpYi9ldmVudF9lbWl0dGVyXCI7XG5pbXBvcnQgQ29tbWFuZCBmcm9tICcuL0NvbW1hbmQnO1xuaW1wb3J0IEVkaXRvciBmcm9tICcuLi9FZGl0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tYW5kTWFuYWdlciBleHRlbmRzIEV2ZW50RW1pdHRlckNsYXNzIGltcGxlbWVudHMgSGFzaEhhbmRsZXIge1xuICAgIHByaXZhdGUgaGFzaEhhbmRsZXI6IEhhc2hIYW5kbGVyO1xuICAgIHByaXZhdGUgJGluUmVwbGF5OiBib29sZWFuO1xuICAgIHByaXZhdGUgcmVjb3JkaW5nOiBib29sZWFuO1xuICAgIHByaXZhdGUgbWFjcm86IGFueVtdW107XG4gICAgcHJpdmF0ZSBvbGRNYWNybztcbiAgICBwcml2YXRlICRhZGRDb21tYW5kVG9NYWNybzogKGV2ZW50LCBjbTogQ29tbWFuZE1hbmFnZXIpID0+IGFueTtcbiAgICBfYnVpbGRLZXlIYXNoXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGxhdGZvcm0gSWRlbnRpZmllciBmb3IgdGhlIHBsYXRmb3JtOyBtdXN0IGJlIGVpdGhlciBgJ21hYydgIG9yIGAnd2luJ2BcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBjb21tYW5kcyBBIGxpc3Qgb2YgY29tbWFuZHNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwbGF0Zm9ybTogc3RyaW5nLCBjb21tYW5kczogQ29tbWFuZFtdKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaGFzaEhhbmRsZXIgPSBuZXcgSGFzaEhhbmRsZXIoY29tbWFuZHMsIHBsYXRmb3JtKVxuICAgICAgICB0aGlzLnNldERlZmF1bHRIYW5kbGVyKFwiZXhlY1wiLCBmdW5jdGlvbihlOiB7IGNvbW1hbmQ6IENvbW1hbmQ7IGVkaXRvcjogRWRpdG9yOyBhcmdzIH0pIHtcbiAgICAgICAgICAgIHJldHVybiBlLmNvbW1hbmQuZXhlYyhlLmVkaXRvciwgZS5hcmdzIHx8IHt9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0IHBsYXRmb3JtKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc2hIYW5kbGVyLnBsYXRmb3JtO1xuICAgIH1cblxuICAgIGdldCBjb21tYW5kcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaEhhbmRsZXIuY29tbWFuZHM7XG4gICAgfVxuXG4gICAgZ2V0IGNvbW1hbmRLZXlCaW5kaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNoSGFuZGxlci5jb21tYW5kS2V5QmluZGluZztcbiAgICB9XG5cbiAgICBiaW5kS2V5KGtleTogc3RyaW5nLCBjb21tYW5kOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaEhhbmRsZXIuYmluZEtleShrZXksIGNvbW1hbmQpO1xuICAgIH1cblxuICAgIGJpbmRLZXlzKGtleUxpc3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaEhhbmRsZXIuYmluZEtleXMoa2V5TGlzdCk7XG4gICAgfVxuXG4gICAgYWRkQ29tbWFuZChjb21tYW5kOiBDb21tYW5kKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaGFzaEhhbmRsZXIuYWRkQ29tbWFuZChjb21tYW5kKTtcbiAgICB9XG5cbiAgICByZW1vdmVDb21tYW5kKGNvbW1hbmROYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5oYXNoSGFuZGxlci5yZW1vdmVDb21tYW5kKGNvbW1hbmROYW1lKTtcbiAgICB9XG5cbiAgICBmaW5kS2V5Q29tbWFuZChoYXNoSWQ6IG51bWJlciwga2V5U3RyaW5nOiBzdHJpbmcpOiBDb21tYW5kIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaEhhbmRsZXIuZmluZEtleUNvbW1hbmQoaGFzaElkLCBrZXlTdHJpbmcpO1xuICAgIH1cblxuICAgIHBhcnNlS2V5cyhrZXlzOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaEhhbmRsZXIucGFyc2VLZXlzKGtleXMpO1xuICAgIH1cblxuICAgIGFkZENvbW1hbmRzKGNvbW1hbmRzKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaGFzaEhhbmRsZXIuYWRkQ29tbWFuZHMoY29tbWFuZHMpO1xuICAgIH1cblxuICAgIHJlbW92ZUNvbW1hbmRzKGNvbW1hbmRzKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaGFzaEhhbmRsZXIucmVtb3ZlQ29tbWFuZHMoY29tbWFuZHMpO1xuICAgIH1cblxuICAgIGhhbmRsZUtleWJvYXJkKGRhdGEsIGhhc2hJZDogbnVtYmVyLCBrZXlTdHJpbmc6IHN0cmluZywga2V5Q29kZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNoSGFuZGxlci5oYW5kbGVLZXlib2FyZChkYXRhLCBoYXNoSWQsIGtleVN0cmluZywga2V5Q29kZSk7XG4gICAgfVxuXG4gICAgZXhlYyhjb21tYW5kOiBhbnksIGVkaXRvcj86IEVkaXRvciwgYXJncz8pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb21tYW5kID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29tbWFuZCA9IHRoaXMuaGFzaEhhbmRsZXIuY29tbWFuZHNbY29tbWFuZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbW1hbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlZGl0b3IgJiYgZWRpdG9yLiRyZWFkT25seSAmJiAhY29tbWFuZC5yZWFkT25seSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGUgPSB7IGVkaXRvcjogZWRpdG9yLCBjb21tYW5kOiBjb21tYW5kLCBhcmdzOiBhcmdzIH07XG4gICAgICAgIHZhciByZXR2YWx1ZSA9IHRoaXMuX2VtaXQoXCJleGVjXCIsIGUpO1xuICAgICAgICB0aGlzLl9zaWduYWwoXCJhZnRlckV4ZWNcIiwgZSk7XG5cbiAgICAgICAgcmV0dXJuIHJldHZhbHVlID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcbiAgICB9XG5cbiAgICB0b2dnbGVSZWNvcmRpbmcoZWRpdG9yOiBFZGl0b3IpIHtcbiAgICAgICAgaWYgKHRoaXMuJGluUmVwbGF5KVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGVkaXRvciAmJiBlZGl0b3IuX2VtaXQoXCJjaGFuZ2VTdGF0dXNcIik7XG4gICAgICAgIGlmICh0aGlzLnJlY29yZGluZykge1xuICAgICAgICAgICAgdGhpcy5tYWNyby5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMub2ZmKFwiZXhlY1wiLCB0aGlzLiRhZGRDb21tYW5kVG9NYWNybyk7XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5tYWNyby5sZW5ndGgpXG4gICAgICAgICAgICAgICAgdGhpcy5tYWNybyA9IHRoaXMub2xkTWFjcm87XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlY29yZGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy4kYWRkQ29tbWFuZFRvTWFjcm8pIHtcbiAgICAgICAgICAgIHRoaXMuJGFkZENvbW1hbmRUb01hY3JvID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubWFjcm8ucHVzaChbZS5jb21tYW5kLCBlLmFyZ3NdKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub2xkTWFjcm8gPSB0aGlzLm1hY3JvO1xuICAgICAgICB0aGlzLm1hY3JvID0gW107XG4gICAgICAgIHRoaXMub24oXCJleGVjXCIsIHRoaXMuJGFkZENvbW1hbmRUb01hY3JvKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVjb3JkaW5nID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXBsYXkoZWRpdG9yOiBFZGl0b3IpIHtcbiAgICAgICAgaWYgKHRoaXMuJGluUmVwbGF5IHx8ICF0aGlzLm1hY3JvKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLnJlY29yZGluZylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvZ2dsZVJlY29yZGluZyhlZGl0b3IpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLiRpblJlcGxheSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm1hY3JvLmZvckVhY2goZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgeCA9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4ZWMoeCwgZWRpdG9yKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXhlYyh4WzBdLCBlZGl0b3IsIHhbMV0pO1xuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLiRpblJlcGxheSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHJpbU1hY3JvKG0pIHtcbiAgICAgICAgcmV0dXJuIG0ubWFwKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgeFswXSAhPSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgIHhbMF0gPSB4WzBdLm5hbWU7XG4gICAgICAgICAgICBpZiAoIXhbMV0pXG4gICAgICAgICAgICAgICAgeCA9IHhbMF07XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5hcHBseU1peGlucyhDb21tYW5kTWFuYWdlciwgW0hhc2hIYW5kbGVyXSk7XG4iXX0=