class CommandManager extends eem.EventEmitterClass {
    constructor(platform, commands) {
        super();
        this.hashHandler = new hhm.HashHandler();
        hhm.HashHandler.call(this, commands, platform);
        this.byName = this.hashHandler.commands;
        this.setDefaultHandler("exec", function (e) {
            return e.command.exec(e.editor, e.args || {});
        });
    }
    get commands() {
        return this.hashHandler.commands;
    }
    get commandKeyBinding() {
        return this.hashHandler.commandKeyBinding;
    }
    bindKey(key, command) {
        return this.hashHandler.bindKey(key, command);
    }
    bindKeys(keyList) {
        return this.hashHandler.bindKeys(keyList);
    }
    addCommand(command) {
        this.hashHandler.addCommand(command);
    }
    removeCommand(commandName) {
        this.hashHandler.removeCommand(commandName);
    }
    findKeyCommand(hashId, keyString) {
        return this.hashHandler.findKeyCommand(hashId, keyString);
    }
    parseKeys(keys) {
        return this.hashHandler.parseKeys(keys);
    }
    addCommands(commands) {
        this.hashHandler.addCommands(commands);
    }
    removeCommands(commands) {
        this.hashHandler.removeCommands(commands);
    }
    handleKeyboard(data, hashId, keyString, keyCode) {
        return this.hashHandler.handleKeyboard(data, hashId, keyString, keyCode);
    }
    exec(command, editor, args) {
        if (typeof command === 'string') {
            command = this.hashHandler.commands[command];
        }
        if (!command) {
            return false;
        }
        if (editor && editor.$readOnly && !command.readOnly) {
            return false;
        }
        var e = { editor: editor, command: command, args: args };
        var retvalue = this._emit("exec", e);
        this._signal("afterExec", e);
        return retvalue === false ? false : true;
    }
    toggleRecording(editor) {
        if (this.$inReplay)
            return;
        editor && editor._emit("changeStatus");
        if (this.recording) {
            this.macro.pop();
            this.removeEventListener("exec", this.$addCommandToMacro);
            if (!this.macro.length)
                this.macro = this.oldMacro;
            return this.recording = false;
        }
        if (!this.$addCommandToMacro) {
            this.$addCommandToMacro = function (e) {
                this.macro.push([e.command, e.args]);
            }.bind(this);
        }
        this.oldMacro = this.macro;
        this.macro = [];
        this.on("exec", this.$addCommandToMacro);
        return this.recording = true;
    }
    replay(editor) {
        if (this.$inReplay || !this.macro)
            return;
        if (this.recording)
            return this.toggleRecording(editor);
        try {
            this.$inReplay = true;
            this.macro.forEach(function (x) {
                if (typeof x == "string")
                    this.exec(x, editor);
                else
                    this.exec(x[0], editor, x[1]);
            }, this);
        }
        finally {
            this.$inReplay = false;
        }
    }
    trimMacro(m) {
        return m.map(function (x) {
            if (typeof x[0] != "string")
                x[0] = x[0].name;
            if (!x[1])
                x = x[0];
            return x;
        });
    }
}
mix.applyMixins(CommandManager, [hhm.HashHandler]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZE1hbmFnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbWFuZHMvQ29tbWFuZE1hbmFnZXIudHMiXSwibmFtZXMiOlsiQ29tbWFuZE1hbmFnZXIiLCJDb21tYW5kTWFuYWdlci5jb25zdHJ1Y3RvciIsIkNvbW1hbmRNYW5hZ2VyLmNvbW1hbmRzIiwiQ29tbWFuZE1hbmFnZXIuY29tbWFuZEtleUJpbmRpbmciLCJDb21tYW5kTWFuYWdlci5iaW5kS2V5IiwiQ29tbWFuZE1hbmFnZXIuYmluZEtleXMiLCJDb21tYW5kTWFuYWdlci5hZGRDb21tYW5kIiwiQ29tbWFuZE1hbmFnZXIucmVtb3ZlQ29tbWFuZCIsIkNvbW1hbmRNYW5hZ2VyLmZpbmRLZXlDb21tYW5kIiwiQ29tbWFuZE1hbmFnZXIucGFyc2VLZXlzIiwiQ29tbWFuZE1hbmFnZXIuYWRkQ29tbWFuZHMiLCJDb21tYW5kTWFuYWdlci5yZW1vdmVDb21tYW5kcyIsIkNvbW1hbmRNYW5hZ2VyLmhhbmRsZUtleWJvYXJkIiwiQ29tbWFuZE1hbmFnZXIuZXhlYyIsIkNvbW1hbmRNYW5hZ2VyLnRvZ2dsZVJlY29yZGluZyIsIkNvbW1hbmRNYW5hZ2VyLnJlcGxheSIsIkNvbW1hbmRNYW5hZ2VyLnRyaW1NYWNybyJdLCJtYXBwaW5ncyI6IkFBT0EsNkJBQTZCLEdBQUcsQ0FBQyxpQkFBaUI7SUFlOUNBLFlBQVlBLFFBQWdCQSxFQUFFQSxRQUFtQkE7UUFDN0NDLE9BQU9BLENBQUNBO1FBZkpBLGdCQUFXQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQTtRQWdCeENBLEdBQUdBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLFFBQVFBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBO1FBQy9DQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxRQUFRQSxDQUFDQTtRQUN4Q0Es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QUFPLENBQUMsSUFBSSxRQUFRLENBQUM7b0JBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUN6QixJQUFJO29CQUNBLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxDQUFDLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQ2JBLENBQUNBO2dCQUFTQSxDQUFDQTtZQUNQQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUMzQkEsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFFRGYsU0FBU0EsQ0FBQ0EsQ0FBQ0E7UUFDUGdCLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLFVBQVNBLENBQUNBO1lBQ25CLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQztnQkFDeEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDckIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNiLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDYixDQUFDLENBQUNBLENBQUNBO0lBQ1BBLENBQUNBO0FBQ0xoQixDQUFDQTtBQUVELEdBQUcsQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWl4ID0gcmVxdWlyZShcIi4uL2xpYi9taXhcIik7XG5pbXBvcnQgb29wID0gcmVxdWlyZShcIi4uL2xpYi9vb3BcIik7XG5pbXBvcnQgaGhtID0gcmVxdWlyZShcIi4uL2tleWJvYXJkL2hhc2hfaGFuZGxlclwiKTtcbmltcG9ydCBlZW0gPSByZXF1aXJlKFwiLi4vbGliL2V2ZW50X2VtaXR0ZXJcIik7XG5pbXBvcnQgQ29tbWFuZCA9IHJlcXVpcmUoJy4vQ29tbWFuZCcpO1xuaW1wb3J0IEVkaXRvciA9IHJlcXVpcmUoJy4uL0VkaXRvcicpO1xuXG5jbGFzcyBDb21tYW5kTWFuYWdlciBleHRlbmRzIGVlbS5FdmVudEVtaXR0ZXJDbGFzcyBpbXBsZW1lbnRzIGhobS5IYXNoSGFuZGxlciB7XG4gICAgcHJpdmF0ZSBoYXNoSGFuZGxlciA9IG5ldyBoaG0uSGFzaEhhbmRsZXIoKTtcbiAgICBwdWJsaWMgcGxhdGZvcm07XG4gICAgcHJpdmF0ZSBieU5hbWU7XG4gICAgcHJpdmF0ZSAkaW5SZXBsYXk7XG4gICAgcHJpdmF0ZSByZWNvcmRpbmc7XG4gICAgcHJpdmF0ZSBtYWNybztcbiAgICBwcml2YXRlIG9sZE1hY3JvO1xuICAgIHByaXZhdGUgJGFkZENvbW1hbmRUb01hY3JvO1xuICAgIF9idWlsZEtleUhhc2hcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwbGF0Zm9ybSBJZGVudGlmaWVyIGZvciB0aGUgcGxhdGZvcm07IG11c3QgYmUgZWl0aGVyIGAnbWFjJ2Agb3IgYCd3aW4nYFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvbW1hbmRzIEEgbGlzdCBvZiBjb21tYW5kc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBsYXRmb3JtOiBzdHJpbmcsIGNvbW1hbmRzOiBDb21tYW5kW10pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaGhtLkhhc2hIYW5kbGVyLmNhbGwodGhpcywgY29tbWFuZHMsIHBsYXRmb3JtKTtcbiAgICAgICAgdGhpcy5ieU5hbWUgPSB0aGlzLmhhc2hIYW5kbGVyLmNvbW1hbmRzO1xuICAgICAgICB0aGlzLnNldERlZmF1bHRIYW5kbGVyKFwiZXhlY1wiLCBmdW5jdGlvbihlOiB7IGNvbW1hbmQ6IENvbW1hbmQ7IGVkaXRvcjogRWRpdG9yOyBhcmdzIH0pIHtcbiAgICAgICAgICAgIHJldHVybiBlLmNvbW1hbmQuZXhlYyhlLmVkaXRvciwgZS5hcmdzIHx8IHt9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0IGNvbW1hbmRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNoSGFuZGxlci5jb21tYW5kcztcbiAgICB9XG5cbiAgICBnZXQgY29tbWFuZEtleUJpbmRpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc2hIYW5kbGVyLmNvbW1hbmRLZXlCaW5kaW5nO1xuICAgIH1cblxuICAgIGJpbmRLZXkoa2V5OiBzdHJpbmcsIGNvbW1hbmQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaEhhbmRsZXIuYmluZEtleShrZXksIGNvbW1hbmQpO1xuICAgIH1cblxuICAgIGJpbmRLZXlzKGtleUxpc3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaEhhbmRsZXIuYmluZEtleXMoa2V5TGlzdCk7XG4gICAgfVxuXG4gICAgYWRkQ29tbWFuZChjb21tYW5kKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaGFzaEhhbmRsZXIuYWRkQ29tbWFuZChjb21tYW5kKTtcbiAgICB9XG5cbiAgICByZW1vdmVDb21tYW5kKGNvbW1hbmROYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5oYXNoSGFuZGxlci5yZW1vdmVDb21tYW5kKGNvbW1hbmROYW1lKTtcbiAgICB9XG5cbiAgICBmaW5kS2V5Q29tbWFuZChoYXNoSWQsIGtleVN0cmluZzogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc2hIYW5kbGVyLmZpbmRLZXlDb21tYW5kKGhhc2hJZCwga2V5U3RyaW5nKTtcbiAgICB9XG5cbiAgICBwYXJzZUtleXMoa2V5czogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc2hIYW5kbGVyLnBhcnNlS2V5cyhrZXlzKTtcbiAgICB9XG5cbiAgICBhZGRDb21tYW5kcyhjb21tYW5kcyk6IHZvaWQge1xuICAgICAgICB0aGlzLmhhc2hIYW5kbGVyLmFkZENvbW1hbmRzKGNvbW1hbmRzKTtcbiAgICB9XG5cbiAgICByZW1vdmVDb21tYW5kcyhjb21tYW5kcyk6IHZvaWQge1xuICAgICAgICB0aGlzLmhhc2hIYW5kbGVyLnJlbW92ZUNvbW1hbmRzKGNvbW1hbmRzKTtcbiAgICB9XG5cbiAgICBoYW5kbGVLZXlib2FyZChkYXRhLCBoYXNoSWQ6IG51bWJlciwga2V5U3RyaW5nOiBzdHJpbmcsIGtleUNvZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaEhhbmRsZXIuaGFuZGxlS2V5Ym9hcmQoZGF0YSwgaGFzaElkLCBrZXlTdHJpbmcsIGtleUNvZGUpO1xuICAgIH1cblxuICAgIGV4ZWMoY29tbWFuZDogYW55LCBlZGl0b3I/OiBFZGl0b3IsIGFyZ3M/KSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29tbWFuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbW1hbmQgPSB0aGlzLmhhc2hIYW5kbGVyLmNvbW1hbmRzW2NvbW1hbmRdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb21tYW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWRpdG9yICYmIGVkaXRvci4kcmVhZE9ubHkgJiYgIWNvbW1hbmQucmVhZE9ubHkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlID0geyBlZGl0b3I6IGVkaXRvciwgY29tbWFuZDogY29tbWFuZCwgYXJnczogYXJncyB9O1xuICAgICAgICB2YXIgcmV0dmFsdWUgPSB0aGlzLl9lbWl0KFwiZXhlY1wiLCBlKTtcbiAgICAgICAgdGhpcy5fc2lnbmFsKFwiYWZ0ZXJFeGVjXCIsIGUpO1xuXG4gICAgICAgIHJldHVybiByZXR2YWx1ZSA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWU7XG4gICAgfVxuXG4gICAgdG9nZ2xlUmVjb3JkaW5nKGVkaXRvcjogRWRpdG9yKSB7XG4gICAgICAgIGlmICh0aGlzLiRpblJlcGxheSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBlZGl0b3IgJiYgZWRpdG9yLl9lbWl0KFwiY2hhbmdlU3RhdHVzXCIpO1xuICAgICAgICBpZiAodGhpcy5yZWNvcmRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMubWFjcm8ucG9wKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJleGVjXCIsIHRoaXMuJGFkZENvbW1hbmRUb01hY3JvKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLm1hY3JvLmxlbmd0aClcbiAgICAgICAgICAgICAgICB0aGlzLm1hY3JvID0gdGhpcy5vbGRNYWNybztcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVjb3JkaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLiRhZGRDb21tYW5kVG9NYWNybykge1xuICAgICAgICAgICAgdGhpcy4kYWRkQ29tbWFuZFRvTWFjcm8gPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWNyby5wdXNoKFtlLmNvbW1hbmQsIGUuYXJnc10pO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vbGRNYWNybyA9IHRoaXMubWFjcm87XG4gICAgICAgIHRoaXMubWFjcm8gPSBbXTtcbiAgICAgICAgdGhpcy5vbihcImV4ZWNcIiwgdGhpcy4kYWRkQ29tbWFuZFRvTWFjcm8pO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWNvcmRpbmcgPSB0cnVlO1xuICAgIH1cblxuICAgIHJlcGxheShlZGl0b3I6IEVkaXRvcikge1xuICAgICAgICBpZiAodGhpcy4kaW5SZXBsYXkgfHwgIXRoaXMubWFjcm8pXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgaWYgKHRoaXMucmVjb3JkaW5nKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlUmVjb3JkaW5nKGVkaXRvcik7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuJGluUmVwbGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubWFjcm8uZm9yRWFjaChmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB4ID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXhlYyh4LCBlZGl0b3IpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leGVjKHhbMF0sIGVkaXRvciwgeFsxXSk7XG4gICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuJGluUmVwbGF5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0cmltTWFjcm8obSkge1xuICAgICAgICByZXR1cm4gbS5tYXAoZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB4WzBdICE9IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgeFswXSA9IHhbMF0ubmFtZTtcbiAgICAgICAgICAgIGlmICgheFsxXSlcbiAgICAgICAgICAgICAgICB4ID0geFswXTtcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbm1peC5hcHBseU1peGlucyhDb21tYW5kTWFuYWdlciwgW2hobS5IYXNoSGFuZGxlcl0pO1xuXG5leHBvcnQgPSBDb21tYW5kTWFuYWdlcjtcbiJdfQ==