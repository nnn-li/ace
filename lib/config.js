var lang = require("./lib/lang");
var oop = require("./lib/oop");
var net = require("./lib/net");
var eve = require('./lib/event_emitter');
var global = (function () {
    return this || typeof window !== 'undefined' && window;
})();
var options = {
    packaged: false,
    workerPath: null,
    modePath: null,
    themePath: null,
    basePath: "",
    suffix: ".js",
    $moduleUrls: {}
};
function get(key) {
    if (!options.hasOwnProperty(key))
        throw new Error("Unknown config key: " + key);
    return options[key];
}
exports.get = get;
function set(key, value) {
    if (!options.hasOwnProperty(key))
        throw new Error("Unknown config key: " + key);
    options[key] = value;
}
exports.set = set;
function all() {
    return lang.copyObject(options);
}
exports.all = all;
oop.implement(exports, eve.EventEmitter);
function _emit(eventName, e) {
    return eve.EventEmitter._emit(eventName, e);
}
exports._emit = _emit;
function _signal(eventName, e) {
    return eve.EventEmitter._signal(eventName, e);
}
exports._signal = _signal;
function moduleUrl(name, component) {
    if (options.$moduleUrls[name]) {
        return options.$moduleUrls[name];
    }
    var parts = name.split("/");
    component = component || parts[parts.length - 2] || "";
    var sep = component == "snippets" ? "/" : "-";
    var base = parts[parts.length - 1];
    if (component === 'worker' && sep === '-') {
        var re = new RegExp("^" + component + "[\\-_]|[\\-_]" + component + "$", "g");
        base = base.replace(re, "");
    }
    if ((!base || base == component) && parts.length > 1) {
        base = parts[parts.length - 2];
    }
    var path = options[component + "Path"];
    if (path == null) {
        path = options.basePath;
    }
    else if (sep == "/") {
        component = sep = "";
    }
    if (path && path.slice(-1) != "/") {
        path += "/";
    }
    return path + component + sep + base + this.get("suffix");
}
exports.moduleUrl = moduleUrl;
function setModuleUrl(name, subst) {
    return options.$moduleUrls[name] = subst;
}
exports.setModuleUrl = setModuleUrl;
exports.$loading = {};
function loadModule(moduleName, onLoad) {
    var module;
    var moduleType;
    if (Array.isArray(moduleName)) {
        moduleType = moduleName[0];
        moduleName = moduleName[1];
    }
    try {
        module = require(moduleName);
    }
    catch (e) { }
    if (module && !exports.$loading[moduleName])
        return onLoad && onLoad(module);
    if (!exports.$loading[moduleName]) {
        exports.$loading[moduleName] = [];
    }
    exports.$loading[moduleName].push(onLoad);
    if (exports.$loading[moduleName].length > 1)
        return;
    var afterLoad = function () {
        require([moduleName], function (module) {
            exports._emit("load.module", { name: moduleName, module: module });
            var listeners = exports.$loading[moduleName];
            exports.$loading[moduleName] = null;
            listeners.forEach(function (onLoad) {
                onLoad && onLoad(module);
            });
        });
    };
    if (!get("packaged")) {
        return afterLoad();
    }
    net.loadScript(moduleUrl(moduleName, moduleType), afterLoad);
}
exports.loadModule = loadModule;
function init(packaged) {
    options.packaged = packaged || require['packaged'] || module.packaged || (global.define && define['packaged']);
    if (!global.document)
        return "";
    var scriptOptions = {};
    var scriptUrl = "";
    var currentScript = (document['currentScript'] || document['_currentScript']);
    var currentDocument = currentScript && currentScript.ownerDocument || document;
    var scripts = currentDocument.getElementsByTagName("script");
    for (var i = 0; i < scripts.length; i++) {
        var script = scripts[i];
        var src = script.src || script.getAttribute("src");
        if (!src)
            continue;
        var attributes = script.attributes;
        for (var j = 0, l = attributes.length; j < l; j++) {
            var attr = attributes[j];
            if (attr.name.indexOf("data-ace-") === 0) {
                scriptOptions[deHyphenate(attr.name.replace(/^data-ace-/, ""))] = attr.value;
            }
        }
        var m = src.match(/^(.*)\/ace(\-\w+)?\.js(\?|$)/);
        if (m) {
            scriptUrl = m[1];
        }
    }
    if (scriptUrl) {
        scriptOptions['base'] = scriptOptions['base'] || scriptUrl;
        scriptOptions['packaged'] = true;
    }
    scriptOptions['basePath'] = scriptOptions['base'];
    scriptOptions['workerPath'] = scriptOptions['workerPath'] || scriptOptions['base'];
    scriptOptions['modePath'] = scriptOptions['modePath'] || scriptOptions['base'];
    scriptOptions['themePath'] = scriptOptions['themePath'] || scriptOptions['base'];
    delete scriptOptions['base'];
    for (var key in scriptOptions)
        if (typeof scriptOptions[key] !== "undefined")
            set(key, scriptOptions[key]);
}
exports.init = init;
;
function deHyphenate(str) {
    return str.replace(/-(.)/g, function (m, m1) { return m1.toUpperCase(); });
}
var optionsProvider = {
    setOptions: function (optList) {
        Object.keys(optList).forEach(function (key) {
            this.setOption(key, optList[key]);
        }, this);
    },
    getOptions: function (optionNames) {
        var result = {};
        if (!optionNames) {
            optionNames = Object.keys(this.$options);
        }
        else if (!Array.isArray(optionNames)) {
            result = optionNames;
            optionNames = Object.keys(result);
        }
        optionNames.forEach(function (key) {
            result[key] = this.getOption(key);
        }, this);
        return result;
    },
    setOption: function (name, value) {
        if (this["$" + name] === value)
            return;
        var opt = this.$options[name];
        if (!opt) {
            if (typeof console != "undefined" && console.warn)
                console.warn('misspelled option "' + name + '"');
            return undefined;
        }
        if (opt.forwardTo)
            return this[opt.forwardTo] && this[opt.forwardTo].setOption(name, value);
        if (!opt.handlesSet)
            this["$" + name] = value;
        if (opt && opt.set)
            opt.set.call(this, value);
    },
    getOption: function (name) {
        var opt = this.$options[name];
        if (!opt) {
            if (typeof console != "undefined" && console.warn)
                console.warn('misspelled option "' + name + '"');
            return undefined;
        }
        if (opt.forwardTo)
            return this[opt.forwardTo] && this[opt.forwardTo].getOption(name);
        return opt && opt.get ? opt.get.call(this) : this["$" + name];
    }
};
var defaultOptions = {};
function defineOptions(obj, path, options) {
    if (!obj.$options)
        defaultOptions[path] = obj.$options = {};
    Object.keys(options).forEach(function (key) {
        var opt = options[key];
        if (typeof opt == "string")
            opt = { forwardTo: opt };
        opt.name || (opt.name = key);
        obj.$options[opt.name] = opt;
        if ("initialValue" in opt)
            obj["$" + opt.name] = opt.initialValue;
    });
    oop.implement(obj, optionsProvider);
    return this;
}
exports.defineOptions = defineOptions;
function resetOptions(obj) {
    Object.keys(obj.$options).forEach(function (key) {
        var opt = obj.$options[key];
        if ("value" in opt)
            obj.setOption(key, opt.value);
    });
}
exports.resetOptions = resetOptions;
function setDefaultValue(path, name, value) {
    var opts = defaultOptions[path] || (defaultOptions[path] = {});
    if (opts[name]) {
        if (opts.forwardTo)
            setDefaultValue(opts.forwardTo, name, value);
        else
            opts[name].value = value;
    }
}
exports.setDefaultValue = setDefaultValue;
function setDefaultValues(path, optionHash) {
    Object.keys(optionHash).forEach(function (key) {
        setDefaultValue(path, key, optionHash[key]);
    });
}
exports.setDefaultValues = setDefaultValues;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6WyJnZXQiLCJzZXQiLCJhbGwiLCJfZW1pdCIsIl9zaWduYWwiLCJtb2R1bGVVcmwiLCJzZXRNb2R1bGVVcmwiLCJsb2FkTW9kdWxlIiwiaW5pdCIsImRlSHlwaGVuYXRlIiwiZGVmaW5lT3B0aW9ucyIsInJlc2V0T3B0aW9ucyIsInNldERlZmF1bHRWYWx1ZSIsInNldERlZmF1bHRWYWx1ZXMiXSwibWFwcGluZ3MiOiJBQThCQSxJQUFPLElBQUksV0FBVyxZQUFZLENBQUMsQ0FBQztBQUNwQyxJQUFPLEdBQUcsV0FBVyxXQUFXLENBQUMsQ0FBQztBQUNsQyxJQUFPLEdBQUcsV0FBVyxXQUFXLENBQUMsQ0FBQztBQUNsQyxJQUFPLEdBQUcsV0FBVyxxQkFBcUIsQ0FBQyxDQUFDO0FBRTVDLElBQUksTUFBTSxHQUFHLENBQUM7SUFDVixNQUFNLENBQUMsSUFBSSxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUM7QUFDM0QsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUdMLElBQUksT0FBTyxHQUFHO0lBQ1YsUUFBUSxFQUFFLEtBQUs7SUFDZixVQUFVLEVBQUUsSUFBSTtJQUNoQixRQUFRLEVBQUUsSUFBSTtJQUNkLFNBQVMsRUFBRSxJQUFJO0lBQ2YsUUFBUSxFQUFFLEVBQUU7SUFDWixNQUFNLEVBQUUsS0FBSztJQUNiLFdBQVcsRUFBRSxFQUFFO0NBQ2xCLENBQUM7QUFFRixhQUFvQixHQUFXO0lBQzNCQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxjQUFjQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUM3QkEsTUFBTUEsSUFBSUEsS0FBS0EsQ0FBQ0Esc0JBQXNCQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUVsREEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7QUFDeEJBLENBQUNBO0FBTGUsV0FBRyxNQUtsQixDQUFBO0FBRUQsYUFBb0IsR0FBVyxFQUFFLEtBQUs7SUFDbENDLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLGNBQWNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQzdCQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSxzQkFBc0JBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBO0lBRWxEQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxLQUFLQSxDQUFDQTtBQUN6QkEsQ0FBQ0E7QUFMZSxXQUFHLE1BS2xCLENBQUE7QUFFRDtJQUNJQyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtBQUNwQ0EsQ0FBQ0E7QUFGZSxXQUFHLE1BRWxCLENBQUE7QUFNRCxHQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFekMsZUFBc0IsU0FBaUIsRUFBRSxDQUFPO0lBQzVDQyxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxDQUFDQSxLQUFLQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUNoREEsQ0FBQ0E7QUFGZSxhQUFLLFFBRXBCLENBQUE7QUFFRCxpQkFBd0IsU0FBaUIsRUFBRSxDQUFPO0lBQzlDQyxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUNsREEsQ0FBQ0E7QUFGZSxlQUFPLFVBRXRCLENBQUE7QUFLRCxtQkFBMEIsSUFBWSxFQUFFLFNBQWlCO0lBQ3JEQyxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM1QkEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDckNBLENBQUNBO0lBRURBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO0lBQzVCQSxTQUFTQSxHQUFHQSxTQUFTQSxJQUFJQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtJQUd2REEsSUFBSUEsR0FBR0EsR0FBV0EsU0FBU0EsSUFBSUEsVUFBVUEsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7SUFDdERBLElBQUlBLElBQUlBLEdBQVdBLEtBQUtBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO0lBQzNDQSxFQUFFQSxDQUFDQSxDQUFDQSxTQUFTQSxLQUFLQSxRQUFRQSxJQUFJQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN4Q0EsSUFBSUEsRUFBRUEsR0FBR0EsSUFBSUEsTUFBTUEsQ0FBQ0EsR0FBR0EsR0FBR0EsU0FBU0EsR0FBR0EsZUFBZUEsR0FBR0EsU0FBU0EsR0FBR0EsR0FBR0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDOUVBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLEVBQUVBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBO0lBQ2hDQSxDQUFDQTtJQUVEQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxJQUFJQSxJQUFJQSxTQUFTQSxDQUFDQSxJQUFJQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNuREEsSUFBSUEsR0FBR0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDbkNBLENBQUNBO0lBQ0RBLElBQUlBLElBQUlBLEdBQUdBLE9BQU9BLENBQUNBLFNBQVNBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBO0lBQ3ZD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Q0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7SUFDL0RBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ2JBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO1lBQ2ZBLGVBQWVBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEVBQUVBLElBQUlBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO1FBQ2pEQSxJQUFJQTtZQUNBQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxLQUFLQSxHQUFHQSxLQUFLQSxDQUFDQTtJQUNqQ0EsQ0FBQ0E7QUFDTEEsQ0FBQ0E7QUFSZSx1QkFBZSxrQkFROUIsQ0FBQTtBQUVELDBCQUFpQyxJQUFJLEVBQUUsVUFBVTtJQUM3Q0MsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsVUFBU0EsR0FBR0E7UUFDeEMsZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQyxDQUFDQSxDQUFDQTtBQUNQQSxDQUFDQTtBQUplLHdCQUFnQixtQkFJL0IsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qICoqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKipcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgbGljZW5zZTpcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAsIEFqYXgub3JnIEIuVi5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAgICAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEFqYXgub3JnIEIuVi4gbm9yIHRoZVxuICogICAgICAgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiAqICAgICAgIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICogXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBBSkFYLk9SRyBCLlYuIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuICogTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICpcbiAqICoqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqICovXG5cbmltcG9ydCBsYW5nID0gcmVxdWlyZShcIi4vbGliL2xhbmdcIik7XG5pbXBvcnQgb29wID0gcmVxdWlyZShcIi4vbGliL29vcFwiKTtcbmltcG9ydCBuZXQgPSByZXF1aXJlKFwiLi9saWIvbmV0XCIpO1xuaW1wb3J0IGV2ZSA9IHJlcXVpcmUoJy4vbGliL2V2ZW50X2VtaXR0ZXInKTtcblxudmFyIGdsb2JhbCA9IChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcyB8fCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3c7XG59KSgpO1xuXG4vLyBGSVhNRTogTWFrZSB0aGlzIHR5cGUtc2FmZS5cbnZhciBvcHRpb25zID0ge1xuICAgIHBhY2thZ2VkOiBmYWxzZSxcbiAgICB3b3JrZXJQYXRoOiBudWxsLFxuICAgIG1vZGVQYXRoOiBudWxsLFxuICAgIHRoZW1lUGF0aDogbnVsbCxcbiAgICBiYXNlUGF0aDogXCJcIixcbiAgICBzdWZmaXg6IFwiLmpzXCIsXG4gICAgJG1vZHVsZVVybHM6IHt9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0KGtleTogc3RyaW5nKSB7XG4gICAgaWYgKCFvcHRpb25zLmhhc093blByb3BlcnR5KGtleSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gY29uZmlnIGtleTogXCIgKyBrZXkpO1xuXG4gICAgcmV0dXJuIG9wdGlvbnNba2V5XTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChrZXk6IHN0cmluZywgdmFsdWUpIHtcbiAgICBpZiAoIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBjb25maWcga2V5OiBcIiArIGtleSk7XG5cbiAgICBvcHRpb25zW2tleV0gPSB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbCgpIHtcbiAgICByZXR1cm4gbGFuZy5jb3B5T2JqZWN0KG9wdGlvbnMpO1xufVxuXG4vLyBtb2R1bGUgbG9hZGluZ1xuLy8gRklYTUU6IFRoaXMgaXMgYSBsYXp5IHdheSBvZiB0cmFuc2ZlcnJpbmcgZnVuY3Rpb25zIGZyb20gRXZlbnRFbWl0dGVyIHRvIGNvbmZpZy5cbi8vIEl0IGJyZWFrcyBUeXBlU2NyaXB0IGFuYWx5c2lzLiBVc2UgdGhlIGV4cGxpY2l0IGFwcHJvYWNoIGFzIGJlbG93LCBhcyBuZWVkZWQuXG5kZWNsYXJlIHZhciBleHBvcnRzOiBhbnk7XG5vb3AuaW1wbGVtZW50KGV4cG9ydHMsIGV2ZS5FdmVudEVtaXR0ZXIpO1xuXG5leHBvcnQgZnVuY3Rpb24gX2VtaXQoZXZlbnROYW1lOiBzdHJpbmcsIGU/OiBhbnkpIHtcbiAgICByZXR1cm4gZXZlLkV2ZW50RW1pdHRlci5fZW1pdChldmVudE5hbWUsIGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX3NpZ25hbChldmVudE5hbWU6IHN0cmluZywgZT86IGFueSkge1xuICAgIHJldHVybiBldmUuRXZlbnRFbWl0dGVyLl9zaWduYWwoZXZlbnROYW1lLCBlKTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gbW9kdWxlVXJsKG5hbWU6IHN0cmluZywgY29tcG9uZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChvcHRpb25zLiRtb2R1bGVVcmxzW25hbWVdKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLiRtb2R1bGVVcmxzW25hbWVdO1xuICAgIH1cblxuICAgIHZhciBwYXJ0cyA9IG5hbWUuc3BsaXQoXCIvXCIpO1xuICAgIGNvbXBvbmVudCA9IGNvbXBvbmVudCB8fCBwYXJ0c1twYXJ0cy5sZW5ndGggLSAyXSB8fCBcIlwiO1xuXG4gICAgLy8gdG9kbyBtYWtlIHRoaXMgY29uZmlndXJhYmxlIG9yIGdldCByaWQgb2YgJy0nXG4gICAgdmFyIHNlcDogc3RyaW5nID0gY29tcG9uZW50ID09IFwic25pcHBldHNcIiA/IFwiL1wiIDogXCItXCI7XG4gICAgdmFyIGJhc2U6IHN0cmluZyA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChjb21wb25lbnQgPT09ICd3b3JrZXInICYmIHNlcCA9PT0gJy0nKSB7XG4gICAgICAgIHZhciByZSA9IG5ldyBSZWdFeHAoXCJeXCIgKyBjb21wb25lbnQgKyBcIltcXFxcLV9dfFtcXFxcLV9dXCIgKyBjb21wb25lbnQgKyBcIiRcIiwgXCJnXCIpO1xuICAgICAgICBiYXNlID0gYmFzZS5yZXBsYWNlKHJlLCBcIlwiKTtcbiAgICB9XG5cbiAgICBpZiAoKCFiYXNlIHx8IGJhc2UgPT0gY29tcG9uZW50KSAmJiBwYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGJhc2UgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAyXTtcbiAgICB9XG4gICAgdmFyIHBhdGggPSBvcHRpb25zW2NvbXBvbmVudCArIFwiUGF0aFwiXTtcbiAgICBpZiAocGF0aCA9PSBudWxsKSB7XG4gICAgICAgIHBhdGggPSBvcHRpb25zLmJhc2VQYXRoO1xuICAgIH1cbiAgICBlbHNlIGlmIChzZXAgPT0gXCIvXCIpIHtcbiAgICAgICAgY29tcG9uZW50ID0gc2VwID0gXCJcIjtcbiAgICB9XG4gICAgaWYgKHBhdGggJiYgcGF0aC5zbGljZSgtMSkgIT0gXCIvXCIpIHtcbiAgICAgICAgcGF0aCArPSBcIi9cIjtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGggKyBjb21wb25lbnQgKyBzZXAgKyBiYXNlICsgdGhpcy5nZXQoXCJzdWZmaXhcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRNb2R1bGVVcmwobmFtZTogc3RyaW5nLCBzdWJzdDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuJG1vZHVsZVVybHNbbmFtZV0gPSBzdWJzdDtcbn1cblxuLyoqXG4gKiBBIG1hcCBmcm9tIG1vZHVsZSBuYW1lIHRvIGFuIGFycmF5IG9mIGNhbGxiYWNrcy5cbiAqL1xuZXhwb3J0IHZhciAkbG9hZGluZzogeyBbbmFtZTogc3RyaW5nXTogKChtKSA9PiBhbnkpW10gfSA9IHt9O1xuXG4vLyBUaGlzIGlzIGFuIGltcG9ydGFudCBmdW5jdGlvbi5cbi8vIEZJWE1FLiBJdCB3b3VsZCBiZSBtb3JlIHR5cGUtc2FmZSBpZiB0aGUgZmlyc3QgYXJndW1lbnQgd2hlcmUgYW4gYXJyYXkgb2Ygc3RyaW5ncy5cbi8vIFdoYXQgaXMgdGhlIHR5cGUgb2YgdGhlIG1vZHVsZSByZXR1cm5lZCBieSB0aGUgcmVxdWlyZSBmdW5jdGlvbj9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkTW9kdWxlKG1vZHVsZU5hbWUsIG9uTG9hZDogKG06IGFueSkgPT4gYW55KSB7XG4gICAgdmFyIG1vZHVsZTtcbiAgICB2YXIgbW9kdWxlVHlwZTogc3RyaW5nO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZU5hbWUpKSB7XG4gICAgICAgIG1vZHVsZVR5cGUgPSBtb2R1bGVOYW1lWzBdO1xuICAgICAgICBtb2R1bGVOYW1lID0gbW9kdWxlTmFtZVsxXTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBtb2R1bGUgPSByZXF1aXJlKG1vZHVsZU5hbWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkgeyB9XG4gICAgLy8gcmVxdWlyZShtb2R1bGVOYW1lKSBjYW4gcmV0dXJuIGVtcHR5IG9iamVjdCBpZiBjYWxsZWQgYWZ0ZXIgcmVxdWlyZShbbW9kdWxlTmFtZV0sIGNhbGxiYWNrKVxuICAgIGlmIChtb2R1bGUgJiYgISRsb2FkaW5nW21vZHVsZU5hbWVdKVxuICAgICAgICByZXR1cm4gb25Mb2FkICYmIG9uTG9hZChtb2R1bGUpO1xuXG4gICAgaWYgKCEkbG9hZGluZ1ttb2R1bGVOYW1lXSkge1xuICAgICAgICAkbG9hZGluZ1ttb2R1bGVOYW1lXSA9IFtdO1xuICAgIH1cblxuICAgICRsb2FkaW5nW21vZHVsZU5hbWVdLnB1c2gob25Mb2FkKTtcblxuICAgIGlmICgkbG9hZGluZ1ttb2R1bGVOYW1lXS5sZW5ndGggPiAxKVxuICAgICAgICByZXR1cm47XG5cbiAgICB2YXIgYWZ0ZXJMb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlcXVpcmUoW21vZHVsZU5hbWVdLCBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgICAgICAgIGV4cG9ydHMuX2VtaXQoXCJsb2FkLm1vZHVsZVwiLCB7IG5hbWU6IG1vZHVsZU5hbWUsIG1vZHVsZTogbW9kdWxlIH0pO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIGxvY2FsIGNvcHkgb2YgYWxsIHRoZSBsaXN0ZW5lcnMgd2hvIHdhbnQgdG8gaGVhciB3aGVuIHRoZSBtb2R1bGUgaGFzIGxvYWRlZC5cbiAgICAgICAgICAgICAqIFdlIG1ha2UgYSBsb2NhbCBjb3B5IGJlY2F1c2Ugd2UgYXJlIGdvaW5nIHRvIGNsZWFyIHRoZSBlbnRyeSBmb3IgdGhlIG1vZHVsZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9ICRsb2FkaW5nW21vZHVsZU5hbWVdO1xuICAgICAgICAgICAgJGxvYWRpbmdbbW9kdWxlTmFtZV0gPSBudWxsO1xuICAgICAgICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24ob25Mb2FkKSB7XG4gICAgICAgICAgICAgICAgb25Mb2FkICYmIG9uTG9hZChtb2R1bGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBXaGF0IGlzIHRoaXMgc3BlY2lhbCBuYW1lP1xuICAgIGlmICghZ2V0KFwicGFja2FnZWRcIikpIHtcbiAgICAgICAgcmV0dXJuIGFmdGVyTG9hZCgpO1xuICAgIH1cblxuICAgIC8vIERlbGVnYXRlIHRoZSBsb2FkaW5nIG9mIHRoZSBzY3JpcHQgYnV0IGhvb2sgdGhlIG5vdGlmaWNhdGlvbi5cbiAgICBuZXQubG9hZFNjcmlwdChtb2R1bGVVcmwobW9kdWxlTmFtZSwgbW9kdWxlVHlwZSksIGFmdGVyTG9hZCk7XG59XG5cblxuLy8gaW5pdGlhbGl6YXRpb25cbmRlY2xhcmUgdmFyIG1vZHVsZTogYW55O1xuLyoqXG4gKiBXaG8gY2FsbHMgdGhpcyBmdW5jdGlvbj9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXQocGFja2FnZWQ6IGJvb2xlYW4pIHtcbiAgICBvcHRpb25zLnBhY2thZ2VkID0gcGFja2FnZWQgfHwgcmVxdWlyZVsncGFja2FnZWQnXSB8fCBtb2R1bGUucGFja2FnZWQgfHwgKGdsb2JhbC5kZWZpbmUgJiYgZGVmaW5lWydwYWNrYWdlZCddKTtcblxuICAgIGlmICghZ2xvYmFsLmRvY3VtZW50KVxuICAgICAgICByZXR1cm4gXCJcIjtcblxuICAgIHZhciBzY3JpcHRPcHRpb25zOiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuICAgIHZhciBzY3JpcHRVcmwgPSBcIlwiO1xuXG4gICAgLy8gVXNlIGN1cnJlbnRTY3JpcHQub3duZXJEb2N1bWVudCBpbiBjYXNlIHRoaXMgZmlsZSB3YXMgbG9hZGVkIGZyb20gaW1wb3J0ZWQgZG9jdW1lbnQuIChIVE1MIEltcG9ydHMpXG4gICAgdmFyIGN1cnJlbnRTY3JpcHQ6IEhUTUxTY3JpcHRFbGVtZW50ID0gKGRvY3VtZW50WydjdXJyZW50U2NyaXB0J10gfHwgZG9jdW1lbnRbJ19jdXJyZW50U2NyaXB0J10pOyAvLyBuYXRpdmUgb3IgcG9seWZpbGxcbiAgICB2YXIgY3VycmVudERvY3VtZW50ID0gY3VycmVudFNjcmlwdCAmJiBjdXJyZW50U2NyaXB0Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG5cbiAgICB2YXIgc2NyaXB0czogTm9kZUxpc3RPZjxIVE1MU2NyaXB0RWxlbWVudD4gPSBjdXJyZW50RG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzY3JpcHQgPSBzY3JpcHRzW2ldO1xuXG4gICAgICAgIHZhciBzcmMgPSBzY3JpcHQuc3JjIHx8IHNjcmlwdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gICAgICAgIGlmICghc3JjKVxuICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgdmFyIGF0dHJpYnV0ZXM6IE5hbWVkTm9kZU1hcCA9IHNjcmlwdC5hdHRyaWJ1dGVzO1xuICAgICAgICBmb3IgKHZhciBqID0gMCwgbCA9IGF0dHJpYnV0ZXMubGVuZ3RoOyBqIDwgbDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgYXR0cjogQXR0ciA9IGF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICBpZiAoYXR0ci5uYW1lLmluZGV4T2YoXCJkYXRhLWFjZS1cIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICBzY3JpcHRPcHRpb25zW2RlSHlwaGVuYXRlKGF0dHIubmFtZS5yZXBsYWNlKC9eZGF0YS1hY2UtLywgXCJcIikpXSA9IGF0dHIudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbTogUmVnRXhwTWF0Y2hBcnJheSA9IHNyYy5tYXRjaCgvXiguKilcXC9hY2UoXFwtXFx3Kyk/XFwuanMoXFw/fCQpLyk7XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICBzY3JpcHRVcmwgPSBtWzFdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNjcmlwdFVybCkge1xuICAgICAgICBzY3JpcHRPcHRpb25zWydiYXNlJ10gPSBzY3JpcHRPcHRpb25zWydiYXNlJ10gfHwgc2NyaXB0VXJsO1xuICAgICAgICBzY3JpcHRPcHRpb25zWydwYWNrYWdlZCddID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzY3JpcHRPcHRpb25zWydiYXNlUGF0aCddID0gc2NyaXB0T3B0aW9uc1snYmFzZSddO1xuICAgIHNjcmlwdE9wdGlvbnNbJ3dvcmtlclBhdGgnXSA9IHNjcmlwdE9wdGlvbnNbJ3dvcmtlclBhdGgnXSB8fCBzY3JpcHRPcHRpb25zWydiYXNlJ107XG4gICAgc2NyaXB0T3B0aW9uc1snbW9kZVBhdGgnXSA9IHNjcmlwdE9wdGlvbnNbJ21vZGVQYXRoJ10gfHwgc2NyaXB0T3B0aW9uc1snYmFzZSddO1xuICAgIHNjcmlwdE9wdGlvbnNbJ3RoZW1lUGF0aCddID0gc2NyaXB0T3B0aW9uc1sndGhlbWVQYXRoJ10gfHwgc2NyaXB0T3B0aW9uc1snYmFzZSddO1xuICAgIGRlbGV0ZSBzY3JpcHRPcHRpb25zWydiYXNlJ107XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc2NyaXB0T3B0aW9ucylcbiAgICAgICAgaWYgKHR5cGVvZiBzY3JpcHRPcHRpb25zW2tleV0gIT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICBzZXQoa2V5LCBzY3JpcHRPcHRpb25zW2tleV0pO1xufTtcblxuZnVuY3Rpb24gZGVIeXBoZW5hdGUoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvLSguKS9nLCBmdW5jdGlvbihtOiBzdHJpbmcsIG0xOiBzdHJpbmcpIHsgcmV0dXJuIG0xLnRvVXBwZXJDYXNlKCk7IH0pO1xufVxuXG52YXIgb3B0aW9uc1Byb3ZpZGVyID0ge1xuICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uKG9wdExpc3QpIHtcbiAgICAgICAgT2JqZWN0LmtleXMob3B0TGlzdCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0T3B0aW9uKGtleSwgb3B0TGlzdFtrZXldKTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgfSxcbiAgICBnZXRPcHRpb25zOiBmdW5jdGlvbihvcHRpb25OYW1lcykge1xuICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgIGlmICghb3B0aW9uTmFtZXMpIHtcbiAgICAgICAgICAgIG9wdGlvbk5hbWVzID0gT2JqZWN0LmtleXModGhpcy4kb3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkob3B0aW9uTmFtZXMpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBvcHRpb25OYW1lcztcbiAgICAgICAgICAgIG9wdGlvbk5hbWVzID0gT2JqZWN0LmtleXMocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25OYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB0aGlzLmdldE9wdGlvbihrZXkpO1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIHNldE9wdGlvbjogZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXNbXCIkXCIgKyBuYW1lXSA9PT0gdmFsdWUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBvcHQgPSB0aGlzLiRvcHRpb25zW25hbWVdO1xuICAgICAgICBpZiAoIW9wdCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9IFwidW5kZWZpbmVkXCIgJiYgY29uc29sZS53YXJuKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignbWlzc3BlbGxlZCBvcHRpb24gXCInICsgbmFtZSArICdcIicpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0LmZvcndhcmRUbylcbiAgICAgICAgICAgIHJldHVybiB0aGlzW29wdC5mb3J3YXJkVG9dICYmIHRoaXNbb3B0LmZvcndhcmRUb10uc2V0T3B0aW9uKG5hbWUsIHZhbHVlKTtcblxuICAgICAgICBpZiAoIW9wdC5oYW5kbGVzU2V0KVxuICAgICAgICAgICAgdGhpc1tcIiRcIiArIG5hbWVdID0gdmFsdWU7XG4gICAgICAgIGlmIChvcHQgJiYgb3B0LnNldClcbiAgICAgICAgICAgIG9wdC5zZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgfSxcbiAgICBnZXRPcHRpb246IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdmFyIG9wdCA9IHRoaXMuJG9wdGlvbnNbbmFtZV07XG4gICAgICAgIGlmICghb3B0KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4pXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdtaXNzcGVsbGVkIG9wdGlvbiBcIicgKyBuYW1lICsgJ1wiJyk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHQuZm9yd2FyZFRvKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXNbb3B0LmZvcndhcmRUb10gJiYgdGhpc1tvcHQuZm9yd2FyZFRvXS5nZXRPcHRpb24obmFtZSk7XG4gICAgICAgIHJldHVybiBvcHQgJiYgb3B0LmdldCA/IG9wdC5nZXQuY2FsbCh0aGlzKSA6IHRoaXNbXCIkXCIgKyBuYW1lXTtcbiAgICB9XG59O1xuXG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7fTtcbi8qXG4gKiBvcHRpb24ge25hbWUsIHZhbHVlLCBpbml0aWFsVmFsdWUsIHNldHRlck5hbWUsIHNldCwgZ2V0IH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZU9wdGlvbnMob2JqLCBwYXRoOiBzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9iai4kb3B0aW9ucylcbiAgICAgICAgZGVmYXVsdE9wdGlvbnNbcGF0aF0gPSBvYmouJG9wdGlvbnMgPSB7fTtcblxuICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHZhciBvcHQgPSBvcHRpb25zW2tleV07XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0ID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICBvcHQgPSB7IGZvcndhcmRUbzogb3B0IH07XG5cbiAgICAgICAgb3B0Lm5hbWUgfHwgKG9wdC5uYW1lID0ga2V5KTtcbiAgICAgICAgb2JqLiRvcHRpb25zW29wdC5uYW1lXSA9IG9wdDtcbiAgICAgICAgaWYgKFwiaW5pdGlhbFZhbHVlXCIgaW4gb3B0KVxuICAgICAgICAgICAgb2JqW1wiJFwiICsgb3B0Lm5hbWVdID0gb3B0LmluaXRpYWxWYWx1ZTtcbiAgICB9KTtcblxuICAgIC8vIGltcGxlbWVudCBvcHRpb24gcHJvdmlkZXIgaW50ZXJmYWNlXG4gICAgb29wLmltcGxlbWVudChvYmosIG9wdGlvbnNQcm92aWRlcik7XG5cbiAgICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0T3B0aW9ucyhvYmopIHtcbiAgICBPYmplY3Qua2V5cyhvYmouJG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHZhciBvcHQgPSBvYmouJG9wdGlvbnNba2V5XTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBvcHQpXG4gICAgICAgICAgICBvYmouc2V0T3B0aW9uKGtleSwgb3B0LnZhbHVlKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRWYWx1ZShwYXRoLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBvcHRzID0gZGVmYXVsdE9wdGlvbnNbcGF0aF0gfHwgKGRlZmF1bHRPcHRpb25zW3BhdGhdID0ge30pO1xuICAgIGlmIChvcHRzW25hbWVdKSB7XG4gICAgICAgIGlmIChvcHRzLmZvcndhcmRUbylcbiAgICAgICAgICAgIHNldERlZmF1bHRWYWx1ZShvcHRzLmZvcndhcmRUbywgbmFtZSwgdmFsdWUpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBvcHRzW25hbWVdLnZhbHVlID0gdmFsdWU7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdFZhbHVlcyhwYXRoLCBvcHRpb25IYXNoKSB7XG4gICAgT2JqZWN0LmtleXMob3B0aW9uSGFzaCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgc2V0RGVmYXVsdFZhbHVlKHBhdGgsIGtleSwgb3B0aW9uSGFzaFtrZXldKTtcbiAgICB9KTtcbn1cbiJdfQ==