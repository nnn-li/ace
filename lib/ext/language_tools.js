import { snippetManager } from "../snippets";
import { getCompleter, setCompleter, CompleterAggregate, Autocomplete } from "../autocomplete";
import { defineOptions, loadModule } from "../config";
import { retrievePrecedingIdentifier } from "../autocomplete/util";
import Editor from "../Editor";
export var keyWordCompleter = {
    getCompletions: function (editor, session, pos, prefix, callback) {
        var state = editor.session.getState(pos.row);
        var completions = session.$mode.getCompletions(state, session, pos, prefix);
        callback(null, completions);
    }
};
export var snippetCompleter = {
    getCompletions: function (editor, session, pos, prefix, callback) {
        var snippetMap = snippetManager.snippetMap;
        var completions = [];
        snippetManager.getActiveScopes(editor).forEach(function (scope) {
            var snippets = snippetMap[scope] || [];
            for (var i = snippets.length; i--;) {
                var s = snippets[i];
                var caption = s.name || s.tabTrigger;
                if (!caption)
                    continue;
                completions.push({
                    caption: caption,
                    snippet: s.content,
                    meta: s.tabTrigger && !s.name ? s.tabTrigger + "\u21E5 " : "snippet"
                });
            }
        }, this);
        callback(null, completions);
    }
};
var completers = [snippetCompleter, keyWordCompleter];
export function addCompleter(completer) {
    completers.push(completer);
}
;
var expandSnippet = {
    name: 'expandSnippet',
    exec: function (editor) {
        var success = snippetManager.expandWithTab(editor);
        if (!success) {
            editor.execCommand('indent');
        }
    },
    bindKey: 'Tab'
};
var onChangeMode = function (e, editor) {
    loadSnippetsForMode(editor.session.$mode);
};
var loadSnippetsForMode = function (mode) {
    var id = mode.$id;
    if (!snippetManager['files']) {
        snippetManager['files'] = {};
    }
    loadSnippetFile(id);
    if (mode.modes) {
        mode.modes.forEach(loadSnippetsForMode);
    }
};
var loadSnippetFile = function (id) {
    if (!id || snippetManager['files'][id])
        return;
    var snippetFilePath = id.replace("mode", "snippets");
    snippetManager['files'][id] = {};
    loadModule(snippetFilePath, function (m) {
        if (m) {
            snippetManager['files'][id] = m;
            if (!m.snippets && m.snippetText)
                m.snippets = snippetManager.parseSnippetFile(m.snippetText);
            snippetManager.register(m.snippets || [], m.scope);
            if (m.includeScopes) {
                snippetManager.snippetMap[m.scope].includeScopes = m.includeScopes;
                m.includeScopes.forEach(function (x) {
                    loadSnippetFile("ace/mode/" + x);
                });
            }
        }
    });
};
function getCompletionPrefix(editor) {
    var pos = editor.getCursorPosition();
    var line = editor.session.getLine(pos.row);
    var prefix = retrievePrecedingIdentifier(line, pos.column);
    editor.completers.forEach(function (completer) {
        if (completer['identifierRegexps']) {
            completer['identifierRegexps'].forEach(function (identifierRegex) {
                if (!prefix && identifierRegex) {
                    prefix = retrievePrecedingIdentifier(line, pos.column, identifierRegex);
                }
            });
        }
    });
    return prefix;
}
var doLiveAutocomplete = function (e) {
    var editor = e.editor;
    var text = e.args || "";
    var hasCompleter = getCompleter(editor) && getCompleter(editor).activated;
    if (e.command.name === "backspace") {
        if (hasCompleter && !getCompletionPrefix(editor))
            getCompleter(editor).detach();
    }
    else if (e.command.name === "insertstring") {
        var prefix = getCompletionPrefix(editor);
        if (prefix && !hasCompleter) {
            if (!getCompleter(editor)) {
                setCompleter(editor, new CompleterAggregate(editor));
            }
            getCompleter(editor).autoSelect = false;
            getCompleter(editor).autoInsert = false;
            getCompleter(editor).showPopup(editor);
        }
    }
};
defineOptions(Editor.prototype, 'editor', {
    enableBasicAutocompletion: {
        set: function (val) {
            var editor = this;
            if (val) {
                if (!editor.completers) {
                    editor.completers = Array.isArray(val) ? val : completers;
                }
                editor.commands.addCommand(Autocomplete.startCommand);
            }
            else {
                editor.commands.removeCommand(Autocomplete.startCommand.name);
            }
        },
        value: false
    },
    enableLiveAutocompletion: {
        set: function (val) {
            var editor = this;
            if (val) {
                if (!editor.completers) {
                    editor.completers = Array.isArray(val) ? val : completers;
                }
                editor.commands.on('afterExec', doLiveAutocomplete);
            }
            else {
                editor.commands.off('afterExec', doLiveAutocomplete);
            }
        },
        value: false
    },
    enableSnippets: {
        set: function (val) {
            var editor = this;
            if (val) {
                editor.commands.addCommand(expandSnippet);
                editor.on("changeMode", onChangeMode);
                onChangeMode(null, editor);
            }
            else {
                editor.commands.removeCommand(expandSnippet.name);
                editor.off("changeMode", onChangeMode);
            }
        },
        value: false
    }
});
//# sourceMappingURL=data:application/json;base64,