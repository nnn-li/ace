import EventEmitterClass from "./lib/event_emitter";
export default class BackgroundTokenizer extends EventEmitterClass {
    constructor(tokenizer, editor) {
        super();
        this.running = 0;
        this.lines = [];
        this.states = [];
        this.currentLine = 0;
        this.tokenizer = tokenizer;
        var self = this;
        this.$worker = function () {
            if (!self.running) {
                return;
            }
            var workerStart = new Date();
            var currentLine = self.currentLine;
            var endLine = -1;
            var doc = self.doc;
            while (self.lines[currentLine])
                currentLine++;
            var startLine = currentLine;
            var len = doc.getLength();
            var processedLines = 0;
            self.running = 0;
            while (currentLine < len) {
                self.$tokenizeRow(currentLine);
                endLine = currentLine;
                do {
                    currentLine++;
                } while (self.lines[currentLine]);
                processedLines++;
                if ((processedLines % 5 === 0) && (new Date().getTime() - workerStart.getTime()) > 20) {
                    self.running = setTimeout(self.$worker, 20);
                    break;
                }
            }
            self.currentLine = currentLine;
            if (startLine <= endLine)
                self.fireUpdateEvent(startLine, endLine);
        };
    }
    setTokenizer(tokenizer) {
        this.tokenizer = tokenizer;
        this.lines = [];
        this.states = [];
        this.start(0);
    }
    setDocument(doc) {
        this.doc = doc;
        this.lines = [];
        this.states = [];
        this.stop();
    }
    fireUpdateEvent(firstRow, lastRow) {
        var data = {
            first: firstRow,
            last: lastRow
        };
        this._signal("update", { data: data });
    }
    start(startRow) {
        this.currentLine = Math.min(startRow || 0, this.currentLine, this.doc.getLength());
        this.lines.splice(this.currentLine, this.lines.length);
        this.states.splice(this.currentLine, this.states.length);
        this.stop();
        this.running = setTimeout(this.$worker, 700);
    }
    scheduleStart() {
        if (!this.running)
            this.running = setTimeout(this.$worker, 700);
    }
    $updateOnChange(delta) {
        var range = delta.range;
        var startRow = range.start.row;
        var len = range.end.row - startRow;
        if (len === 0) {
            this.lines[startRow] = null;
        }
        else if (delta.action == "removeText" || delta.action == "removeLines") {
            this.lines.splice(startRow, len + 1, null);
            this.states.splice(startRow, len + 1, null);
        }
        else {
            var args = Array(len + 1);
            args.unshift(startRow, 1);
            this.lines.splice.apply(this.lines, args);
            this.states.splice.apply(this.states, args);
        }
        this.currentLine = Math.min(startRow, this.currentLine, this.doc.getLength());
        this.stop();
    }
    stop() {
        if (this.running) {
            clearTimeout(this.running);
        }
        this.running = 0;
    }
    getTokens(row) {
        return this.lines[row] || this.$tokenizeRow(row);
    }
    getState(row) {
        if (this.currentLine == row) {
            this.$tokenizeRow(row);
        }
        return this.states[row] || "start";
    }
    $tokenizeRow(row) {
        var line = this.doc.getLine(row);
        var state = this.states[row - 1];
        var data = this.tokenizer.getLineTokens(line, state);
        if (this.states[row] + "" !== data.state + "") {
            this.states[row] = data.state;
            this.lines[row + 1] = null;
            if (this.currentLine > row + 1)
                this.currentLine = row + 1;
        }
        else if (this.currentLine == row) {
            this.currentLine = row + 1;
        }
        return this.lines[row] = data.tokens;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFja2dyb3VuZFRva2VuaXplci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9CYWNrZ3JvdW5kVG9rZW5pemVyLnRzIl0sIm5hbWVzIjpbIkJhY2tncm91bmRUb2tlbml6ZXIiLCJCYWNrZ3JvdW5kVG9rZW5pemVyLmNvbnN0cnVjdG9yIiwiQmFja2dyb3VuZFRva2VuaXplci5zZXRUb2tlbml6ZXIiLCJCYWNrZ3JvdW5kVG9rZW5pemVyLnNldERvY3VtZW50IiwiQmFja2dyb3VuZFRva2VuaXplci5maXJlVXBkYXRlRXZlbnQiLCJCYWNrZ3JvdW5kVG9rZW5pemVyLnN0YXJ0IiwiQmFja2dyb3VuZFRva2VuaXplci5zY2hlZHVsZVN0YXJ0IiwiQmFja2dyb3VuZFRva2VuaXplci4kdXBkYXRlT25DaGFuZ2UiLCJCYWNrZ3JvdW5kVG9rZW5pemVyLnN0b3AiLCJCYWNrZ3JvdW5kVG9rZW5pemVyLmdldFRva2VucyIsIkJhY2tncm91bmRUb2tlbml6ZXIuZ2V0U3RhdGUiLCJCYWNrZ3JvdW5kVG9rZW5pemVyLiR0b2tlbml6ZVJvdyJdLCJtYXBwaW5ncyI6Ik9BK0JPLGlCQUFpQixNQUFNLHFCQUFxQjtBQWtCbkQsaURBQWlELGlCQUFpQjtJQVk5REEsWUFBWUEsU0FBb0JBLEVBQUVBLE1BQU9BO1FBQ3JDQyxPQUFPQSxDQUFDQTtRQVJKQSxZQUFPQSxHQUFXQSxDQUFDQSxDQUFDQTtRQUNwQkEsVUFBS0EsR0FBdURBLEVBQUVBLENBQUNBO1FBQy9EQSxXQUFNQSxHQUFhQSxFQUFFQSxDQUFDQTtRQUN0QkEsZ0JBQVdBLEdBQVdBLENBQUNBLENBQUNBO1FBTTVCQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxTQUFTQSxDQUFDQTtRQUUzQkEsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFaEJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBO1lBQ1gsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFBQyxNQUFNLENBQUM7WUFBQyxDQUFDO1lBRTlCLElBQUksV0FBVyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7WUFDN0IsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUNuQyxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNqQixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBRW5CLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7Z0JBQzFCLFdBQVcsRUFBRSxDQUFDO1lBRWxCLElBQUksU0FBUyxHQUFHLFdBQVcsQ0FBQztZQUU1QixJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDMUIsSUFBSSxjQUFjLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLE9BQU8sV0FBVyxHQUFHLEdBQUcsRUFBRSxDQUFDO2dCQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUMvQixPQUFPLEdBQUcsV0FBVyxDQUFDO2dCQUN0QixHQUFHLENBQUM7b0JBQ0EsV0FBVyxFQUFFLENBQUM7Z0JBQ2xCLENBQUMsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUdsQyxjQUFjLEVBQUUsQ0FBQztnQkFDakIsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNwRixJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO29CQUM1QyxLQUFLLENBQUM7Z0JBQ1YsQ0FBQztZQUNMLENBQUM7WUFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztZQUUvQixFQUFFLENBQUMsQ0FBQyxTQUFTLElBQUksT0FBTyxDQUFDO2dCQUNyQixJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNqRCxDQUFDLENBQUNBO0lBQ05BLENBQUNBO0lBT0RELFlBQVlBLENBQUNBLFNBQW9CQTtRQUM3QkUsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsU0FBU0EsQ0FBQ0E7UUFDM0JBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLEVBQUVBLENBQUNBO1FBQ2hCQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUVqQkEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDbEJBLENBQUNBO0lBTURGLFdBQVdBLENBQUNBLEdBQW1CQTtRQUMzQkcsSUFBSUEsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7UUFDZkEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDaEJBLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLEVBQUVBLENBQUNBO1FBRWpCQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQTtJQUNoQkEsQ0FBQ0E7SUFlREgsZUFBZUEsQ0FBQ0EsUUFBZ0JBLEVBQUVBLE9BQWVBO1FBQzdDSSxJQUFJQSxJQUFJQSxHQUFHQTtZQUNQQSxLQUFLQSxFQUFFQSxRQUFRQTtZQUNmQSxJQUFJQSxFQUFFQSxPQUFPQTtTQUNoQkEsQ0FBQ0E7UUFDRkEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsUUFBUUEsRUFBRUEsRUFBRUEsSUFBSUEsRUFBRUEsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7SUFDM0NBLENBQUNBO0lBUURKLEtBQUtBLENBQUNBLFFBQWdCQTtRQUNsQkssSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsUUFBUUEsSUFBSUEsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsV0FBV0EsRUFBRUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFHbkZBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLEVBQUVBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBQ3ZEQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUV6REEsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0E7UUFFWkEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFDakRBLENBQUNBO0lBRURMLGFBQWFBO1FBQ1RNLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBO1lBQ2RBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO0lBQ3JEQSxDQUFDQTtJQUVETixlQUFlQSxDQUFDQSxLQUFrRUE7UUFDOUVPLElBQUlBLEtBQUtBLEdBQUdBLEtBQUtBLENBQUNBLEtBQUtBLENBQUNBO1FBQ3hCQSxJQUFJQSxRQUFRQSxHQUFHQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQTtRQUMvQkEsSUFBSUEsR0FBR0EsR0FBR0EsS0FBS0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsR0FBR0EsUUFBUUEsQ0FBQ0E7UUFFbkNBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1pBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO1FBQ2hDQSxDQUFDQTtRQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxJQUFJQSxZQUFZQSxJQUFJQSxLQUFLQSxDQUFDQSxNQUFNQSxJQUFJQSxhQUFhQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN2RUEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsUUFBUUEsRUFBRUEsR0FBR0EsR0FBR0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDM0NBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLFFBQVFBLEVBQUVBLEdBQUdBLEdBQUdBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQ2hEQSxDQUFDQTtRQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNKQSxJQUFJQSxJQUFJQSxHQUFHQSxLQUFLQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMxQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDMUJBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1lBQzFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNoREEsQ0FBQ0E7UUFFREEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsUUFBUUEsRUFBRUEsSUFBSUEsQ0FBQ0EsV0FBV0EsRUFBRUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFFOUVBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBO0lBQ2hCQSxDQUFDQTtJQU1EUCxJQUFJQTtRQUNBUSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNmQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUMvQkEsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFDckJBLENBQUNBO0lBVURSLFNBQVNBLENBQUNBLEdBQVdBO1FBQ2pCUyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUNyREEsQ0FBQ0E7SUFPRFQsUUFBUUEsQ0FBQ0EsR0FBV0E7UUFDaEJVLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLElBQUlBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQzFCQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUMzQkEsQ0FBQ0E7UUFDREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsT0FBT0EsQ0FBQ0E7SUFDdkNBLENBQUNBO0lBRURWLFlBQVlBLENBQUNBLEdBQVdBO1FBQ3BCVyxJQUFJQSxJQUFJQSxHQUFXQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUN6Q0EsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFHakNBLElBQUlBLElBQUlBLEdBQTZFQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxFQUFFQSxLQUFLQSxDQUFVQSxDQUFDQTtRQUV4SUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsRUFBRUEsS0FBS0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDNUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBO1lBQzlCQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUMzQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzNCQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNuQ0EsQ0FBQ0E7UUFBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsSUFBSUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakNBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBO1FBQy9CQSxDQUFDQTtRQUVEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtJQUN6Q0EsQ0FBQ0E7QUFDTFgsQ0FBQ0E7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qICoqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKipcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgbGljZW5zZTpcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAsIEFqYXgub3JnIEIuVi5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAgICAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEFqYXgub3JnIEIuVi4gbm9yIHRoZVxuICogICAgICAgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiAqICAgICAgIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICogXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBBSkFYLk9SRyBCLlYuIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuICogTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICpcbiAqICoqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqICovXG5pbXBvcnQge30gZnJvbSBcIi4vbGliL29vcFwiXG5pbXBvcnQgRWRpdG9yRG9jdW1lbnQgZnJvbSAnLi9FZGl0b3JEb2N1bWVudCdcbmltcG9ydCBFdmVudEVtaXR0ZXJDbGFzcyBmcm9tIFwiLi9saWIvZXZlbnRfZW1pdHRlclwiXG5pbXBvcnQgVG9rZW5pemVyIGZyb20gJy4vVG9rZW5pemVyJ1xuXG4vKipcbiAqIFRva2VuaXplcyB0aGUgY3VycmVudCBbW0VkaXRvckRvY3VtZW50IGBFZGl0b3JEb2N1bWVudGBdXSBpbiB0aGUgYmFja2dyb3VuZCwgYW5kIGNhY2hlcyB0aGUgdG9rZW5pemVkIHJvd3MgZm9yIGZ1dHVyZSB1c2UuIFxuICogXG4gKiBJZiBhIGNlcnRhaW4gcm93IGlzIGNoYW5nZWQsIGV2ZXJ5dGhpbmcgYmVsb3cgdGhhdCByb3cgaXMgcmUtdG9rZW5pemVkLlxuICpcbiAqIEBjbGFzcyBCYWNrZ3JvdW5kVG9rZW5pemVyXG4gKiovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBgQmFja2dyb3VuZFRva2VuaXplcmAgb2JqZWN0LlxuICogQHBhcmFtIHtUb2tlbml6ZXJ9IHRva2VuaXplciBUaGUgdG9rZW5pemVyIHRvIHVzZVxuICogQHBhcmFtIHtFZGl0b3J9IGVkaXRvciBUaGUgZWRpdG9yIHRvIGFzc29jaWF0ZSB3aXRoXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYWNrZ3JvdW5kVG9rZW5pemVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyQ2xhc3Mge1xuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgdGhlIHZhbHVlIHJldHVybmVkIGJ5IHNldFRpbWVvdXQsIHNvIGl0J3MgcmVhbGx5IGEgdGltZXIgaGFuZGxlLlxuICAgICAqIFRoZXJlIGFyZSBzb21lIGNvbmRpdGlvbmFscyBsb29raW5nIGZvciBhIGZhbHNleSB2YWx1ZSwgc28gd2UgdXNlIHplcm8gd2hlcmUgbmVlZGVkLlxuICAgICAqL1xuICAgIHByaXZhdGUgcnVubmluZzogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIGxpbmVzOiB7IHN0YXJ0OiBudW1iZXI7IHR5cGU6IHN0cmluZzsgdmFsdWU6IHN0cmluZyB9W11bXSA9IFtdO1xuICAgIHByaXZhdGUgc3RhdGVzOiBzdHJpbmdbXSA9IFtdO1xuICAgIHByaXZhdGUgY3VycmVudExpbmU6IG51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSB0b2tlbml6ZXI6IFRva2VuaXplcjtcbiAgICBwcml2YXRlIGRvYzogRWRpdG9yRG9jdW1lbnQ7XG4gICAgcHJpdmF0ZSAkd29ya2VyO1xuICAgIGNvbnN0cnVjdG9yKHRva2VuaXplcjogVG9rZW5pemVyLCBlZGl0b3I/KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudG9rZW5pemVyID0gdG9rZW5pemVyO1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICB0aGlzLiR3b3JrZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghc2VsZi5ydW5uaW5nKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgICB2YXIgd29ya2VyU3RhcnQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRMaW5lID0gc2VsZi5jdXJyZW50TGluZTtcbiAgICAgICAgICAgIHZhciBlbmRMaW5lID0gLTE7XG4gICAgICAgICAgICB2YXIgZG9jID0gc2VsZi5kb2M7XG5cbiAgICAgICAgICAgIHdoaWxlIChzZWxmLmxpbmVzW2N1cnJlbnRMaW5lXSlcbiAgICAgICAgICAgICAgICBjdXJyZW50TGluZSsrO1xuXG4gICAgICAgICAgICB2YXIgc3RhcnRMaW5lID0gY3VycmVudExpbmU7XG5cbiAgICAgICAgICAgIHZhciBsZW4gPSBkb2MuZ2V0TGVuZ3RoKCk7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc2VkTGluZXMgPSAwO1xuICAgICAgICAgICAgc2VsZi5ydW5uaW5nID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50TGluZSA8IGxlbikge1xuICAgICAgICAgICAgICAgIHNlbGYuJHRva2VuaXplUm93KGN1cnJlbnRMaW5lKTtcbiAgICAgICAgICAgICAgICBlbmRMaW5lID0gY3VycmVudExpbmU7XG4gICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGluZSsrO1xuICAgICAgICAgICAgICAgIH0gd2hpbGUgKHNlbGYubGluZXNbY3VycmVudExpbmVdKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBvbmx5IGNoZWNrIGV2ZXJ5IDUgbGluZXNcbiAgICAgICAgICAgICAgICBwcm9jZXNzZWRMaW5lcysrO1xuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzc2VkTGluZXMgJSA1ID09PSAwKSAmJiAobmV3IERhdGUoKS5nZXRUaW1lKCkgLSB3b3JrZXJTdGFydC5nZXRUaW1lKCkpID4gMjApIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5ydW5uaW5nID0gc2V0VGltZW91dChzZWxmLiR3b3JrZXIsIDIwKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5jdXJyZW50TGluZSA9IGN1cnJlbnRMaW5lO1xuXG4gICAgICAgICAgICBpZiAoc3RhcnRMaW5lIDw9IGVuZExpbmUpXG4gICAgICAgICAgICAgICAgc2VsZi5maXJlVXBkYXRlRXZlbnQoc3RhcnRMaW5lLCBlbmRMaW5lKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhIG5ldyB0b2tlbml6ZXIgZm9yIHRoaXMgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtUb2tlbml6ZXJ9IHRva2VuaXplciBUaGUgbmV3IHRva2VuaXplciB0byB1c2VcbiAgICAgKlxuICAgICAqKi9cbiAgICBzZXRUb2tlbml6ZXIodG9rZW5pemVyOiBUb2tlbml6ZXIpIHtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIgPSB0b2tlbml6ZXI7XG4gICAgICAgIHRoaXMubGluZXMgPSBbXTtcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSBbXTtcblxuICAgICAgICB0aGlzLnN0YXJ0KDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBuZXcgZG9jdW1lbnQgdG8gYXNzb2NpYXRlIHdpdGggdGhpcyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtFZGl0b3JEb2N1bWVudH0gZG9jIFRoZSBuZXcgZG9jdW1lbnQgdG8gYXNzb2NpYXRlIHdpdGhcbiAgICAgKiovXG4gICAgc2V0RG9jdW1lbnQoZG9jOiBFZGl0b3JEb2N1bWVudCkge1xuICAgICAgICB0aGlzLmRvYyA9IGRvYztcbiAgICAgICAgdGhpcy5saW5lcyA9IFtdO1xuICAgICAgICB0aGlzLnN0YXRlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogRmlyZXMgd2hlbmV2ZXIgdGhlIGJhY2tncm91bmQgdG9rZW5pemllcnMgYmV0d2VlbiBhIHJhbmdlIG9mIHJvd3MgYXJlIGdvaW5nIHRvIGJlIHVwZGF0ZWQuXG4gICAgKiBcbiAgICAqIEBldmVudCB1cGRhdGVcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBlIEFuIG9iamVjdCBjb250YWluaW5nIHR3byBwcm9wZXJ0aWVzLCBgZmlyc3RgIGFuZCBgbGFzdGAsIHdoaWNoIGluZGljYXRlIHRoZSByb3dzIG9mIHRoZSByZWdpb24gYmVpbmcgdXBkYXRlZC5cbiAgICAqXG4gICAgKiovXG4gICAgLyoqXG4gICAgICogRW1pdHMgdGhlIGAndXBkYXRlJ2AgZXZlbnQuIGBmaXJzdFJvd2AgYW5kIGBsYXN0Um93YCBhcmUgdXNlZCB0byBkZWZpbmUgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHJlZ2lvbiB0byBiZSB1cGRhdGVkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmaXJzdFJvdyBUaGUgc3RhcnRpbmcgcm93IHJlZ2lvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsYXN0Um93IFRoZSBmaW5hbCByb3cgcmVnaW9uXG4gICAgICpcbiAgICAgKiovXG4gICAgZmlyZVVwZGF0ZUV2ZW50KGZpcnN0Um93OiBudW1iZXIsIGxhc3RSb3c6IG51bWJlcikge1xuICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgIGZpcnN0OiBmaXJzdFJvdyxcbiAgICAgICAgICAgIGxhc3Q6IGxhc3RSb3dcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fc2lnbmFsKFwidXBkYXRlXCIsIHsgZGF0YTogZGF0YSB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydHMgdG9rZW5pemluZyBhdCB0aGUgcm93IGluZGljYXRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFJvdyBUaGUgcm93IHRvIHN0YXJ0IGF0XG4gICAgICpcbiAgICAgKiovXG4gICAgc3RhcnQoc3RhcnRSb3c6IG51bWJlcikge1xuICAgICAgICB0aGlzLmN1cnJlbnRMaW5lID0gTWF0aC5taW4oc3RhcnRSb3cgfHwgMCwgdGhpcy5jdXJyZW50TGluZSwgdGhpcy5kb2MuZ2V0TGVuZ3RoKCkpO1xuXG4gICAgICAgIC8vIHJlbW92ZSBhbGwgY2FjaGVkIGl0ZW1zIGJlbG93IHRoaXMgbGluZVxuICAgICAgICB0aGlzLmxpbmVzLnNwbGljZSh0aGlzLmN1cnJlbnRMaW5lLCB0aGlzLmxpbmVzLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuc3RhdGVzLnNwbGljZSh0aGlzLmN1cnJlbnRMaW5lLCB0aGlzLnN0YXRlcy5sZW5ndGgpO1xuXG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICAvLyBwcmV0dHkgbG9uZyBkZWxheSB0byBwcmV2ZW50IHRoZSB0b2tlbml6ZXIgZnJvbSBpbnRlcmZlcmluZyB3aXRoIHRoZSB1c2VyXG4gICAgICAgIHRoaXMucnVubmluZyA9IHNldFRpbWVvdXQodGhpcy4kd29ya2VyLCA3MDApO1xuICAgIH1cblxuICAgIHNjaGVkdWxlU3RhcnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5ydW5uaW5nKVxuICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gc2V0VGltZW91dCh0aGlzLiR3b3JrZXIsIDcwMCk7XG4gICAgfVxuXG4gICAgJHVwZGF0ZU9uQ2hhbmdlKGRlbHRhOiB7IHJhbmdlOiB7IHN0YXJ0OiB7IHJvdyB9OyBlbmQ6IHsgcm93IH0gfTsgYWN0aW9uOiBzdHJpbmcgfSkge1xuICAgICAgICB2YXIgcmFuZ2UgPSBkZWx0YS5yYW5nZTtcbiAgICAgICAgdmFyIHN0YXJ0Um93ID0gcmFuZ2Uuc3RhcnQucm93O1xuICAgICAgICB2YXIgbGVuID0gcmFuZ2UuZW5kLnJvdyAtIHN0YXJ0Um93O1xuXG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMubGluZXNbc3RhcnRSb3ddID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChkZWx0YS5hY3Rpb24gPT0gXCJyZW1vdmVUZXh0XCIgfHwgZGVsdGEuYWN0aW9uID09IFwicmVtb3ZlTGluZXNcIikge1xuICAgICAgICAgICAgdGhpcy5saW5lcy5zcGxpY2Uoc3RhcnRSb3csIGxlbiArIDEsIG51bGwpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZXMuc3BsaWNlKHN0YXJ0Um93LCBsZW4gKyAxLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuICsgMSk7XG4gICAgICAgICAgICBhcmdzLnVuc2hpZnQoc3RhcnRSb3csIDEpO1xuICAgICAgICAgICAgdGhpcy5saW5lcy5zcGxpY2UuYXBwbHkodGhpcy5saW5lcywgYXJncyk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlcy5zcGxpY2UuYXBwbHkodGhpcy5zdGF0ZXMsIGFyZ3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdXJyZW50TGluZSA9IE1hdGgubWluKHN0YXJ0Um93LCB0aGlzLmN1cnJlbnRMaW5lLCB0aGlzLmRvYy5nZXRMZW5ndGgoKSk7XG5cbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcHMgdG9rZW5pemluZy5cbiAgICAgKlxuICAgICAqKi9cbiAgICBzdG9wKCkge1xuICAgICAgICBpZiAodGhpcy5ydW5uaW5nKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5ydW5uaW5nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJ1bm5pbmcgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdpdmVzIGxpc3Qgb2YgdG9rZW5zIG9mIHRoZSByb3cuICh0b2tlbnMgYXJlIGNhY2hlZClcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm93IFRoZSByb3cgdG8gZ2V0IHRva2VucyBhdFxuICAgICAqXG4gICAgICogXG4gICAgICpcbiAgICAgKiovXG4gICAgZ2V0VG9rZW5zKHJvdzogbnVtYmVyKTogeyBzdGFydDogbnVtYmVyOyB0eXBlOiBzdHJpbmc7IHZhbHVlOiBzdHJpbmcgfVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGluZXNbcm93XSB8fCB0aGlzLiR0b2tlbml6ZVJvdyhyb3cpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFtSZXR1cm5zIHRoZSBzdGF0ZSBvZiB0b2tlbml6YXRpb24gYXQgdGhlIGVuZCBvZiBhIHJvdy5dezogI0JhY2tncm91bmRUb2tlbml6ZXIuZ2V0U3RhdGV9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm93IFRoZSByb3cgdG8gZ2V0IHN0YXRlIGF0XG4gICAgICoqL1xuICAgIGdldFN0YXRlKHJvdzogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudExpbmUgPT0gcm93KSB7XG4gICAgICAgICAgICB0aGlzLiR0b2tlbml6ZVJvdyhyb3cpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlc1tyb3ddIHx8IFwic3RhcnRcIjtcbiAgICB9XG5cbiAgICAkdG9rZW5pemVSb3cocm93OiBudW1iZXIpOiB7IHN0YXJ0OiBudW1iZXI7IHR5cGU6IHN0cmluZzsgdmFsdWU6IHN0cmluZyB9W10ge1xuICAgICAgICB2YXIgbGluZTogc3RyaW5nID0gdGhpcy5kb2MuZ2V0TGluZShyb3cpO1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlc1tyb3cgLSAxXTtcbiAgICAgICAgXG4gICAgICAgIC8vIEZJWE1FOiBUaGVyZSBpcyBubyB0aGlyZCBhcmd1bWVudCBpbiBnZXRMaW5lVG9rZW5zIVxuICAgICAgICB2YXIgZGF0YTogeyBzdGF0ZTogYW55OyB0b2tlbnM6IHsgc3RhcnQ6IG51bWJlcjsgdHlwZTogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH1bXSB9ID0gdGhpcy50b2tlbml6ZXIuZ2V0TGluZVRva2VucyhsaW5lLCBzdGF0ZS8qLCByb3cqLyk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGVzW3Jvd10gKyBcIlwiICE9PSBkYXRhLnN0YXRlICsgXCJcIikge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZXNbcm93XSA9IGRhdGEuc3RhdGU7XG4gICAgICAgICAgICB0aGlzLmxpbmVzW3JvdyArIDFdID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRMaW5lID4gcm93ICsgMSlcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRMaW5lID0gcm93ICsgMTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmN1cnJlbnRMaW5lID09IHJvdykge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50TGluZSA9IHJvdyArIDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5saW5lc1tyb3ddID0gZGF0YS50b2tlbnM7XG4gICAgfVxufSJdfQ==