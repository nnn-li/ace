export class UndoManager {
    constructor() {
        this.reset();
    }
    execute(options) {
        var deltas = options.args[0];
        this.$editSession = options.args[1];
        if (options.merge && this.hasUndo()) {
            this.dirtyCounter--;
            deltas = this.$undoStack.pop().concat(deltas);
        }
        this.$undoStack.push(deltas);
        this.$redoStack = [];
        if (this.dirtyCounter < 0) {
            this.dirtyCounter = NaN;
        }
        this.dirtyCounter++;
    }
    undo(dontSelect) {
        var deltas = this.$undoStack.pop();
        var undoSelectionRange = null;
        if (deltas) {
            undoSelectionRange = this.$editSession.undoChanges(deltas, dontSelect);
            this.$redoStack.push(deltas);
            this.dirtyCounter--;
        }
        return undoSelectionRange;
    }
    redo(dontSelect) {
        var deltas = this.$redoStack.pop();
        var redoSelectionRange = null;
        if (deltas) {
            redoSelectionRange = this.$editSession.redoChanges(deltas, dontSelect);
            this.$undoStack.push(deltas);
            this.dirtyCounter++;
        }
        return redoSelectionRange;
    }
    reset() {
        this.$undoStack = [];
        this.$redoStack = [];
        this.dirtyCounter = 0;
    }
    hasUndo() {
        return this.$undoStack.length > 0;
    }
    hasRedo() {
        return this.$redoStack.length > 0;
    }
    markClean() {
        this.dirtyCounter = 0;
    }
    isClean() {
        return this.dirtyCounter === 0;
    }
}
//# sourceMappingURL=data:application/json;base64,