var XHTML_NS = "http://www.w3.org/1999/xhtml";
export function getDocumentHead(doc) {
    if (!doc) {
        doc = document;
    }
    return (doc.head || doc.getElementsByTagName("head")[0] || doc.documentElement);
}
export function createElement(tagName, namespaceURI) {
    return document.createElementNS ?
        document.createElementNS(namespaceURI || XHTML_NS, tagName) :
        document.createElement(tagName);
}
export function hasCssClass(element, name) {
    var classes = element.className.split(/\s+/g);
    return classes.indexOf(name) !== -1;
}
export function addCssClass(element, name) {
    if (!hasCssClass(element, name)) {
        element.className += " " + name;
    }
}
export function removeCssClass(element, name) {
    var classes = element.className.split(/\s+/g);
    while (true) {
        var index = classes.indexOf(name);
        if (index == -1) {
            break;
        }
        classes.splice(index, 1);
    }
    element.className = classes.join(" ");
}
export function toggleCssClass(element, name) {
    var classes = element.className.split(/\s+/g), add = true;
    while (true) {
        var index = classes.indexOf(name);
        if (index == -1) {
            break;
        }
        add = false;
        classes.splice(index, 1);
    }
    if (add)
        classes.push(name);
    element.className = classes.join(" ");
    return add;
}
export function setCssClass(node, className, include) {
    if (include) {
        addCssClass(node, className);
    }
    else {
        removeCssClass(node, className);
    }
}
export function hasCssString(id, doc = document) {
    var index = 0;
    var sheets = doc.getElementsByTagName('style');
    if (sheets) {
        while (index < sheets.length)
            if (sheets[index++].id === id)
                return true;
    }
    return false;
}
export function importCssString(cssText, id, doc) {
    doc = doc || document;
    if (id && hasCssString(id, doc)) {
        return;
    }
    var style;
    style = doc.createElementNS
        ? doc.createElementNS(XHTML_NS, "style")
        : doc.createElement("style");
    style.appendChild(doc.createTextNode(cssText));
    if (id)
        style.id = id;
    getDocumentHead(doc).appendChild(style);
}
export function importCssStylsheet(uri, doc) {
    var link = createElement('link');
    link['rel'] = 'stylesheet';
    link['href'] = uri;
    getDocumentHead(doc).appendChild(link);
}
function makeComputedStyle() {
    if (window.getComputedStyle) {
        return function (element, style) {
            if (style) {
                return (window.getComputedStyle(element, "") || {})[style] || "";
            }
            return window.getComputedStyle(element, "") || {};
        };
    }
    else {
        return function (element, style) {
            if (style) {
                return element['currentStyle'][style];
            }
            return element['currentStyle'];
        };
    }
}
export var computedStyle = makeComputedStyle();
export function scrollbarWidth(document) {
    var inner = createElement("ace_inner");
    inner.style.width = "100%";
    inner.style.minWidth = "0px";
    inner.style.height = "200px";
    inner.style.display = "block";
    var outer = createElement("ace_outer");
    var style = outer.style;
    style.position = "absolute";
    style.left = "-10000px";
    style.overflow = "hidden";
    style.width = "200px";
    style.minWidth = "0px";
    style.height = "150px";
    style.display = "block";
    outer.appendChild(inner);
    var body = document.documentElement;
    body.appendChild(outer);
    var noScrollbar = inner.offsetWidth;
    style.overflow = "scroll";
    var withScrollbar = inner.offsetWidth;
    if (noScrollbar == withScrollbar) {
        withScrollbar = outer.clientWidth;
    }
    body.removeChild(outer);
    return noScrollbar - withScrollbar;
}
export function setInnerHtml(element, innerHTML) {
    var clonedElement = element.cloneNode(false);
    clonedElement.innerHTML = innerHTML;
    element.parentNode.replaceChild(clonedElement, element);
    return clonedElement;
}
function makeGetInnerText() {
    if ("textContent" in document.documentElement) {
        return function (el) {
            return el.textContent;
        };
    }
    else {
        return function (el) {
            return el.innerText;
        };
    }
}
function makeSetInnerText() {
    if ("textContent" in document.documentElement) {
        return function (el, innerText) {
            el.textContent = innerText;
        };
    }
    else {
        return function (el, innerText) {
            el.innerText = innerText;
        };
    }
}
export var getInnerText = makeGetInnerText();
export var setInnerText = makeSetInnerText();
export function getParentWindow(document) {
    return document.defaultView;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9kb20udHMiXSwibmFtZXMiOlsiZ2V0RG9jdW1lbnRIZWFkIiwiY3JlYXRlRWxlbWVudCIsImhhc0Nzc0NsYXNzIiwiYWRkQ3NzQ2xhc3MiLCJyZW1vdmVDc3NDbGFzcyIsInRvZ2dsZUNzc0NsYXNzIiwic2V0Q3NzQ2xhc3MiLCJoYXNDc3NTdHJpbmciLCJpbXBvcnRDc3NTdHJpbmciLCJpbXBvcnRDc3NTdHlsc2hlZXQiLCJtYWtlQ29tcHV0ZWRTdHlsZSIsInNjcm9sbGJhcldpZHRoIiwic2V0SW5uZXJIdG1sIiwibWFrZUdldElubmVyVGV4dCIsIm1ha2VTZXRJbm5lclRleHQiLCJnZXRQYXJlbnRXaW5kb3ciXSwibWFwcGluZ3MiOiJBQW9DQSxJQUFJLFFBQVEsR0FBRyw4QkFBOEIsQ0FBQztBQUU5QyxnQ0FBZ0MsR0FBYztJQUMxQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDUEEsR0FBR0EsR0FBR0EsUUFBUUEsQ0FBQ0E7SUFDbkJBLENBQUNBO0lBQ0RBLE1BQU1BLENBQWNBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLElBQUlBLEdBQUdBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsR0FBR0EsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7QUFDakdBLENBQUNBO0FBRUQsOEJBQThCLE9BQWUsRUFBRSxZQUFxQjtJQUNoRUMsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsZUFBZUE7UUFDM0JBLFFBQVFBLENBQUNBLGVBQWVBLENBQUNBLFlBQVlBLElBQUlBLFFBQVFBLEVBQUVBLE9BQU9BLENBQUNBO1FBQzNEQSxRQUFRQSxDQUFDQSxhQUFhQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtBQUN4Q0EsQ0FBQ0E7QUFFRCw0QkFBNEIsT0FBb0IsRUFBRSxJQUFZO0lBQzFEQyxJQUFJQSxPQUFPQSxHQUFhQSxPQUFPQSxDQUFDQSxTQUFTQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtJQUN4REEsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDeENBLENBQUNBO0FBS0QsNEJBQTRCLE9BQW9CLEVBQUUsSUFBWTtJQUMxREMsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsT0FBT0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDOUJBLE9BQU9BLENBQUNBLFNBQVNBLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBO0lBQ3BDQSxDQUFDQTtBQUNMQSxDQUFDQTtBQUtELCtCQUErQixPQUFvQixFQUFFLElBQVk7SUFDN0RDLElBQUlBLE9BQU9BLEdBQWFBLE9BQU9BLENBQUNBLFNBQVNBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO0lBQ3hEQSxPQUFPQSxJQUFJQSxFQUFFQSxDQUFDQTtRQUNWQSxJQUFJQSxLQUFLQSxHQUFHQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNsQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDZEEsS0FBS0EsQ0FBQ0E7UUFDVkEsQ0FBQ0E7UUFDREEsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDN0JBLENBQUNBO0lBQ0RBLE9BQU9BLENBQUNBLFNBQVNBLEdBQUdBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO0FBQzFDQSxDQUFDQTtBQUVELCtCQUErQixPQUFvQixFQUFFLElBQVk7SUFDN0RDLElBQUlBLE9BQU9BLEdBQUdBLE9BQU9BLENBQUNBLFNBQVNBLENBQUNBLEtB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QUFFRDtJQUNJQyxFQUFFQSxDQUFDQSxDQUFDQSxhQUFhQSxJQUFJQSxRQUFRQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM1Q0EsTUFBTUEsQ0FBQ0EsVUFBU0EsRUFBZUEsRUFBRUEsU0FBaUJBO1lBQzlDLEVBQUUsQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO1FBQy9CLENBQUMsQ0FBQ0E7SUFDTkEsQ0FBQ0E7SUFDREEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDRkEsTUFBTUEsQ0FBQ0EsVUFBU0EsRUFBZUEsRUFBRUEsU0FBaUJBO1lBQzlDLEVBQUUsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzdCLENBQUMsQ0FBQ0E7SUFDTkEsQ0FBQ0E7QUFDTEEsQ0FBQ0E7QUFFRCxXQUFXLFlBQVksR0FBZ0MsZ0JBQWdCLEVBQUUsQ0FBQztBQUMxRSxXQUFXLFlBQVksR0FBaUQsZ0JBQWdCLEVBQUUsQ0FBQztBQUUzRixnQ0FBZ0MsUUFBa0I7SUFFOUNDLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLFdBQVdBLENBQUNBO0FBQ2hDQSxDQUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qICoqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKipcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgbGljZW5zZTpcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAsIEFqYXgub3JnIEIuVi5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAgICAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEFqYXgub3JnIEIuVi4gbm9yIHRoZVxuICogICAgICAgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiAqICAgICAgIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICogXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBBSkFYLk9SRyBCLlYuIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuICogTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICpcbiAqICoqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqICovXG5cbi8vXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vaWYgKHR5cGVvZiBkb2N1bWVudCA9PSBcInVuZGVmaW5lZFwiKSB7XG4vLyAgICByZXR1cm47XG4vL31cblxudmFyIFhIVE1MX05TID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREb2N1bWVudEhlYWQoZG9jPzogRG9jdW1lbnQpOiBIVE1MRWxlbWVudCB7XG4gICAgaWYgKCFkb2MpIHtcbiAgICAgICAgZG9jID0gZG9jdW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiA8SFRNTEVsZW1lbnQ+KGRvYy5oZWFkIHx8IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0gfHwgZG9jLmRvY3VtZW50RWxlbWVudCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHRhZ05hbWU6IHN0cmluZywgbmFtZXNwYWNlVVJJPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyA/XG4gICAgICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkkgfHwgWEhUTUxfTlMsIHRhZ05hbWUpIDpcbiAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0Nzc0NsYXNzKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICB2YXIgY2xhc3Nlczogc3RyaW5nW10gPSBlbGVtZW50LmNsYXNzTmFtZS5zcGxpdCgvXFxzKy9nKTtcbiAgICByZXR1cm4gY2xhc3Nlcy5pbmRleE9mKG5hbWUpICE9PSAtMTtcbn1cblxuLyoqXG4gKiBBZGQgYSBDU1MgY2xhc3MgdG8gdGhlIGxpc3Qgb2YgY2xhc3NlcyBvbiB0aGUgZ2l2ZW4gbm9kZVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkQ3NzQ2xhc3MoZWxlbWVudDogSFRNTEVsZW1lbnQsIG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmICghaGFzQ3NzQ2xhc3MoZWxlbWVudCwgbmFtZSkpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgKz0gXCIgXCIgKyBuYW1lO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgYSBDU1MgY2xhc3MgZnJvbSB0aGUgbGlzdCBvZiBjbGFzc2VzIG9uIHRoZSBnaXZlbiBub2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDc3NDbGFzcyhlbGVtZW50OiBIVE1MRWxlbWVudCwgbmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdmFyIGNsYXNzZXM6IHN0cmluZ1tdID0gZWxlbWVudC5jbGFzc05hbWUuc3BsaXQoL1xccysvZyk7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY2xhc3Nlcy5pbmRleE9mKG5hbWUpO1xuICAgICAgICBpZiAoaW5kZXggPT0gLTEpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNsYXNzZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSBjbGFzc2VzLmpvaW4oXCIgXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlQ3NzQ2xhc3MoZWxlbWVudDogSFRNTEVsZW1lbnQsIG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHZhciBjbGFzc2VzID0gZWxlbWVudC5jbGFzc05hbWUuc3BsaXQoL1xccysvZyksIGFkZCA9IHRydWU7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY2xhc3Nlcy5pbmRleE9mKG5hbWUpO1xuICAgICAgICBpZiAoaW5kZXggPT0gLTEpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGFkZCA9IGZhbHNlO1xuICAgICAgICBjbGFzc2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIGlmIChhZGQpXG4gICAgICAgIGNsYXNzZXMucHVzaChuYW1lKTtcblxuICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3Nlcy5qb2luKFwiIFwiKTtcbiAgICByZXR1cm4gYWRkO1xufVxuXG4vKlxuICogQWRkIG9yIHJlbW92ZSBhIENTUyBjbGFzcyBmcm9tIHRoZSBsaXN0IG9mIGNsYXNzZXMgb24gdGhlIGdpdmVuIG5vZGVcbiAqIGRlcGVuZGluZyBvbiB0aGUgdmFsdWUgb2YgPHR0PmluY2x1ZGU8L3R0PlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0Q3NzQ2xhc3Mobm9kZTogSFRNTEVsZW1lbnQsIGNsYXNzTmFtZTogc3RyaW5nLCBpbmNsdWRlOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKGluY2x1ZGUpIHtcbiAgICAgICAgYWRkQ3NzQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlbW92ZUNzc0NsYXNzKG5vZGUsIGNsYXNzTmFtZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzQ3NzU3RyaW5nKGlkOiBzdHJpbmcsIGRvYzogRG9jdW1lbnQgPSBkb2N1bWVudCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHNoZWV0cyA9IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3R5bGUnKTtcblxuICAgIGlmIChzaGVldHMpIHtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgc2hlZXRzLmxlbmd0aClcbiAgICAgICAgICAgIGlmIChzaGVldHNbaW5kZXgrK10uaWQgPT09IGlkKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbXBvcnRDc3NTdHJpbmcoY3NzVGV4dDogc3RyaW5nLCBpZD86IHN0cmluZywgZG9jPzogRG9jdW1lbnQpOiB2b2lkIHtcbiAgICBkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG4gICAgLy8gSWYgc3R5bGUgaXMgYWxyZWFkeSBpbXBvcnRlZCByZXR1cm4gaW1tZWRpYXRlbHkuXG4gICAgaWYgKGlkICYmIGhhc0Nzc1N0cmluZyhpZCwgZG9jKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlO1xuXG4gICAgc3R5bGUgPSBkb2MuY3JlYXRlRWxlbWVudE5TXG4gICAgICAgID8gZG9jLmNyZWF0ZUVsZW1lbnROUyhYSFRNTF9OUywgXCJzdHlsZVwiKVxuICAgICAgICA6IGRvYy5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2MuY3JlYXRlVGV4dE5vZGUoY3NzVGV4dCkpO1xuICAgIGlmIChpZClcbiAgICAgICAgc3R5bGUuaWQgPSBpZDtcblxuICAgIGdldERvY3VtZW50SGVhZChkb2MpLmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGltcG9ydENzc1N0eWxzaGVldCh1cmk6IHN0cmluZywgZG9jPzogRG9jdW1lbnQpIHtcbiAgICB2YXIgbGluayA9IGNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICAvLyBGSVhNRTogV2h5IGRvIHdlIG5lZWQgdG8gdXNlIHRoZSBsaXRlcmFscz9cbiAgICBsaW5rWydyZWwnXSA9ICdzdHlsZXNoZWV0JztcbiAgICBsaW5rWydocmVmJ10gPSB1cmk7XG5cbiAgICBnZXREb2N1bWVudEhlYWQoZG9jKS5hcHBlbmRDaGlsZChsaW5rKTtcbn1cbi8qXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5uZXJXaWR0aChlbGVtZW50OiBIVE1MRWxlbWVudCk6IG51bWJlciB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgcGFyc2VJbnQoZXhwb3J0cy5jb21wdXRlZFN0eWxlKGVsZW1lbnQsIFwicGFkZGluZ0xlZnRcIiksIDEwKSArXG4gICAgICAgIHBhcnNlSW50KGV4cG9ydHMuY29tcHV0ZWRTdHlsZShlbGVtZW50LCBcInBhZGRpbmdSaWdodFwiKSwgMTApICtcbiAgICAgICAgZWxlbWVudC5jbGllbnRXaWR0aFxuICAgICk7XG59XG4qL1xuLypcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbm5lckhlaWdodChlbGVtZW50OiBIVE1MRWxlbWVudCk6IG51bWJlciB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgcGFyc2VJbnQoZXhwb3J0cy5jb21wdXRlZFN0eWxlKGVsZW1lbnQsIFwicGFkZGluZ1RvcFwiKSwgMTApICtcbiAgICAgICAgcGFyc2VJbnQoZXhwb3J0cy5jb21wdXRlZFN0eWxlKGVsZW1lbnQsIFwicGFkZGluZ0JvdHRvbVwiKSwgMTApICtcbiAgICAgICAgZWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICApO1xufVxuKi9cbi8qXG5pZiAod2luZG93LnBhZ2VZT2Zmc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBleHBvcnRzLmdldFBhZ2VTY3JvbGxUb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICB9O1xuXG4gICAgZXhwb3J0cy5nZXRQYWdlU2Nyb2xsTGVmdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gd2luZG93LnBhZ2VYT2Zmc2V0O1xuICAgIH07XG59XG5lbHNlIHtcbiAgICBleHBvcnRzLmdldFBhZ2VTY3JvbGxUb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xuICAgIH07XG5cbiAgICBleHBvcnRzLmdldFBhZ2VTY3JvbGxMZWZ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQ7XG4gICAgfTtcbn1cbiovXG5mdW5jdGlvbiBtYWtlQ29tcHV0ZWRTdHlsZSgpOiAoZWxlbWVudDogSFRNTEVsZW1lbnQsIHN0eWxlPzogc3RyaW5nKSA9PiBhbnkge1xuICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudDogSFRNTEVsZW1lbnQsIHN0eWxlPzogc3RyaW5nKTogYW55IHtcbiAgICAgICAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgXCJcIikgfHwge30pW3N0eWxlXSB8fCBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIFwiXCIpIHx8IHt9O1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzdHlsZT86IHN0cmluZyk6IGFueSB7XG4gICAgICAgICAgICBpZiAoc3R5bGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudFsnY3VycmVudFN0eWxlJ11bc3R5bGVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRbJ2N1cnJlbnRTdHlsZSddO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IHZhciBjb21wdXRlZFN0eWxlID0gbWFrZUNvbXB1dGVkU3R5bGUoKTtcbi8vIEZJWE1FXG4vKlxuaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKVxuICAgIGV4cG9ydHMuY29tcHV0ZWRTdHlsZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIHN0eWxlKTogYW55IHtcbiAgICAgICAgaWYgKHN0eWxlKVxuICAgICAgICAgICAgcmV0dXJuICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBcIlwiKSB8fCB7fSlbc3R5bGVdIHx8IFwiXCI7XG4gICAgICAgIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBcIlwiKSB8fCB7fTtcbiAgICB9O1xuZWxzZVxuICAgIGV4cG9ydHMuY29tcHV0ZWRTdHlsZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIHN0eWxlKSB7XG4gICAgICAgIGlmIChzdHlsZSlcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmN1cnJlbnRTdHlsZVtzdHlsZV07XG4gICAgICAgIHJldHVybiBlbGVtZW50LmN1cnJlbnRTdHlsZTtcbiAgICB9O1xuKi9cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxiYXJXaWR0aChkb2N1bWVudCkge1xuICAgIHZhciBpbm5lcjogYW55ID0gY3JlYXRlRWxlbWVudChcImFjZV9pbm5lclwiKTtcbiAgICBpbm5lci5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgIGlubmVyLnN0eWxlLm1pbldpZHRoID0gXCIwcHhcIjtcbiAgICBpbm5lci5zdHlsZS5oZWlnaHQgPSBcIjIwMHB4XCI7XG4gICAgaW5uZXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuICAgIHZhciBvdXRlcjogYW55ID0gY3JlYXRlRWxlbWVudChcImFjZV9vdXRlclwiKTtcbiAgICB2YXIgc3R5bGUgPSBvdXRlci5zdHlsZTtcblxuICAgIHN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIHN0eWxlLmxlZnQgPSBcIi0xMDAwMHB4XCI7XG4gICAgc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgIHN0eWxlLndpZHRoID0gXCIyMDBweFwiO1xuICAgIHN0eWxlLm1pbldpZHRoID0gXCIwcHhcIjtcbiAgICBzdHlsZS5oZWlnaHQgPSBcIjE1MHB4XCI7XG4gICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuICAgIG91dGVyLmFwcGVuZENoaWxkKGlubmVyKTtcblxuICAgIHZhciBib2R5ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIGJvZHkuYXBwZW5kQ2hpbGQob3V0ZXIpO1xuXG4gICAgdmFyIG5vU2Nyb2xsYmFyID0gaW5uZXIub2Zmc2V0V2lkdGg7XG5cbiAgICBzdHlsZS5vdmVyZmxvdyA9IFwic2Nyb2xsXCI7XG4gICAgdmFyIHdpdGhTY3JvbGxiYXIgPSBpbm5lci5vZmZzZXRXaWR0aDtcblxuICAgIGlmIChub1Njcm9sbGJhciA9PSB3aXRoU2Nyb2xsYmFyKSB7XG4gICAgICAgIHdpdGhTY3JvbGxiYXIgPSBvdXRlci5jbGllbnRXaWR0aDtcbiAgICB9XG5cbiAgICBib2R5LnJlbW92ZUNoaWxkKG91dGVyKTtcblxuICAgIHJldHVybiBub1Njcm9sbGJhciAtIHdpdGhTY3JvbGxiYXI7XG59XG5cbi8qXG4gKiBPcHRpbWl6ZWQgc2V0IGlubmVySFRNTC4gVGhpcyBpcyBmYXN0ZXIgdGhhbiBwbGFpbiBpbm5lckhUTUwgaWYgdGhlIGVsZW1lbnRcbiAqIGFscmVhZHkgY29udGFpbnMgYSBsb3Qgb2YgY2hpbGQgZWxlbWVudHMuXG4gKlxuICogU2VlIGh0dHA6Ly9ibG9nLnN0ZXZlbmxldml0aGFuLmNvbS9hcmNoaXZlcy9mYXN0ZXItdGhhbi1pbm5lcmh0bWwgZm9yIGRldGFpbHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldElubmVySHRtbChlbGVtZW50OiBIVE1MRWxlbWVudCwgaW5uZXJIVE1MOiBzdHJpbmcpIHtcbiAgICB2YXIgY2xvbmVkRWxlbWVudCA9IDxIVE1MRWxlbWVudD5lbGVtZW50LmNsb25lTm9kZShmYWxzZSk7XG4gICAgY2xvbmVkRWxlbWVudC5pbm5lckhUTUwgPSBpbm5lckhUTUw7XG4gICAgZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjbG9uZWRFbGVtZW50LCBlbGVtZW50KTtcbiAgICByZXR1cm4gY2xvbmVkRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gbWFrZUdldElubmVyVGV4dCgpOiAoZWw6IEhUTUxFbGVtZW50KSA9PiBzdHJpbmcge1xuICAgIGlmIChcInRleHRDb250ZW50XCIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBlbC50ZXh0Q29udGVudDtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBlbC5pbm5lclRleHQ7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBtYWtlU2V0SW5uZXJUZXh0KCk6IChlbDogSFRNTEVsZW1lbnQsIGlubmVyVGV4dDogc3RyaW5nKSA9PiB2b2lkIHtcbiAgICBpZiAoXCJ0ZXh0Q29udGVudFwiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWw6IEhUTUxFbGVtZW50LCBpbm5lclRleHQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICAgICAgZWwudGV4dENvbnRlbnQgPSBpbm5lclRleHQ7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWw6IEhUTUxFbGVtZW50LCBpbm5lclRleHQ6IHN0cmluZykge1xuICAgICAgICAgICAgZWwuaW5uZXJUZXh0ID0gaW5uZXJUZXh0O1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IHZhciBnZXRJbm5lclRleHQ6IChlbDogSFRNTEVsZW1lbnQpID0+IHN0cmluZyA9IG1ha2VHZXRJbm5lclRleHQoKTtcbmV4cG9ydCB2YXIgc2V0SW5uZXJUZXh0OiAoZWw6IEhUTUxFbGVtZW50LCBpbm5lclRleHQ6IHN0cmluZykgPT4gdm9pZCA9IG1ha2VTZXRJbm5lclRleHQoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmVudFdpbmRvdyhkb2N1bWVudDogRG9jdW1lbnQpOiBXaW5kb3cge1xuICAgIC8vIFRoaXMgaXMgYSBiaXQgcmVkdW5kYW50IG5vdyB0aGF0IHBhcmVudFdpbmRvdyBoYXMgYmVlbiByZW1vdmVkLlxuICAgIHJldHVybiBkb2N1bWVudC5kZWZhdWx0Vmlldztcbn1cbiJdfQ==