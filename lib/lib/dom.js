var XHTML_NS = "http://www.w3.org/1999/xhtml";
function getDocumentHead(doc) {
    if (!doc) {
        doc = document;
    }
    return (doc.head || doc.getElementsByTagName("head")[0] || doc.documentElement);
}
exports.getDocumentHead = getDocumentHead;
function createElement(tagName, namespaceURI) {
    return document.createElementNS ?
        document.createElementNS(namespaceURI || XHTML_NS, tagName) :
        document.createElement(tagName);
}
exports.createElement = createElement;
function hasCssClass(element, name) {
    var classes = element.className.split(/\s+/g);
    return classes.indexOf(name) !== -1;
}
exports.hasCssClass = hasCssClass;
function addCssClass(element, name) {
    if (!hasCssClass(element, name)) {
        element.className += " " + name;
    }
}
exports.addCssClass = addCssClass;
function removeCssClass(element, name) {
    var classes = element.className.split(/\s+/g);
    while (true) {
        var index = classes.indexOf(name);
        if (index == -1) {
            break;
        }
        classes.splice(index, 1);
    }
    element.className = classes.join(" ");
}
exports.removeCssClass = removeCssClass;
function toggleCssClass(element, name) {
    var classes = element.className.split(/\s+/g), add = true;
    while (true) {
        var index = classes.indexOf(name);
        if (index == -1) {
            break;
        }
        add = false;
        classes.splice(index, 1);
    }
    if (add)
        classes.push(name);
    element.className = classes.join(" ");
    return add;
}
exports.toggleCssClass = toggleCssClass;
function setCssClass(node, className, include) {
    if (include) {
        addCssClass(node, className);
    }
    else {
        removeCssClass(node, className);
    }
}
exports.setCssClass = setCssClass;
function hasCssString(id, doc) {
    if (doc === void 0) { doc = document; }
    var index = 0;
    var sheets = doc.getElementsByTagName('style');
    if (sheets) {
        while (index < sheets.length)
            if (sheets[index++].id === id)
                return true;
    }
    return false;
}
exports.hasCssString = hasCssString;
function importCssString(cssText, id, doc) {
    doc = doc || document;
    if (id && hasCssString(id, doc)) {
        return;
    }
    var style;
    style = doc.createElementNS
        ? doc.createElementNS(XHTML_NS, "style")
        : doc.createElement("style");
    style.appendChild(doc.createTextNode(cssText));
    if (id)
        style.id = id;
    getDocumentHead(doc).appendChild(style);
}
exports.importCssString = importCssString;
function importCssStylsheet(uri, doc) {
    var link = createElement('link');
    link['rel'] = 'stylesheet';
    link['href'] = uri;
    getDocumentHead(doc).appendChild(link);
}
exports.importCssStylsheet = importCssStylsheet;
function getInnerWidth(element) {
    return (parseInt(exports.computedStyle(element, "paddingLeft"), 10) +
        parseInt(exports.computedStyle(element, "paddingRight"), 10) +
        element.clientWidth);
}
exports.getInnerWidth = getInnerWidth;
function getInnerHeight(element) {
    return (parseInt(exports.computedStyle(element, "paddingTop"), 10) +
        parseInt(exports.computedStyle(element, "paddingBottom"), 10) +
        element.clientHeight);
}
exports.getInnerHeight = getInnerHeight;
if (window.pageYOffset !== undefined) {
    exports.getPageScrollTop = function () {
        return window.pageYOffset;
    };
    exports.getPageScrollLeft = function () {
        return window.pageXOffset;
    };
}
else {
    exports.getPageScrollTop = function () {
        return document.body.scrollTop;
    };
    exports.getPageScrollLeft = function () {
        return document.body.scrollLeft;
    };
}
function makeComputedStyle() {
    if (window.getComputedStyle) {
        return function (element, style) {
            if (style) {
                return (window.getComputedStyle(element, "") || {})[style] || "";
            }
            return window.getComputedStyle(element, "") || {};
        };
    }
    else {
        return function (element, style) {
            if (style) {
                return element['currentStyle'][style];
            }
            return element['currentStyle'];
        };
    }
}
exports.computedStyle = makeComputedStyle();
if (window.getComputedStyle)
    exports.computedStyle = function (element, style) {
        if (style)
            return (window.getComputedStyle(element, "") || {})[style] || "";
        return window.getComputedStyle(element, "") || {};
    };
else
    exports.computedStyle = function (element, style) {
        if (style)
            return element.currentStyle[style];
        return element.currentStyle;
    };
function scrollbarWidth(document) {
    var inner = createElement("ace_inner");
    inner.style.width = "100%";
    inner.style.minWidth = "0px";
    inner.style.height = "200px";
    inner.style.display = "block";
    var outer = createElement("ace_outer");
    var style = outer.style;
    style.position = "absolute";
    style.left = "-10000px";
    style.overflow = "hidden";
    style.width = "200px";
    style.minWidth = "0px";
    style.height = "150px";
    style.display = "block";
    outer.appendChild(inner);
    var body = document.documentElement;
    body.appendChild(outer);
    var noScrollbar = inner.offsetWidth;
    style.overflow = "scroll";
    var withScrollbar = inner.offsetWidth;
    if (noScrollbar == withScrollbar) {
        withScrollbar = outer.clientWidth;
    }
    body.removeChild(outer);
    return noScrollbar - withScrollbar;
}
exports.scrollbarWidth = scrollbarWidth;
function setInnerHtml(element, innerHTML) {
    var clonedElement = element.cloneNode(false);
    clonedElement.innerHTML = innerHTML;
    element.parentNode.replaceChild(clonedElement, element);
    return clonedElement;
}
exports.setInnerHtml = setInnerHtml;
function makeGetInnerText() {
    if ("textContent" in document.documentElement) {
        return function (el) {
            return el.textContent;
        };
    }
    else {
        return function (el) {
            return el.innerText;
        };
    }
}
function makeSetInnerText() {
    if ("textContent" in document.documentElement) {
        return function (el, innerText) {
            el.textContent = innerText;
        };
    }
    else {
        return function (el, innerText) {
            el.innerText = innerText;
        };
    }
}
exports.getInnerText = makeGetInnerText();
exports.setInnerText = makeSetInnerText();
function getParentWindow(document) {
    return document.defaultView;
}
exports.getParentWindow = getParentWindow;
//# sourceMappingURL=data:application/json;base64,