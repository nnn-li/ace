var dom = require("./dom");
function get(url, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            callback(xhr.responseText);
        }
    };
    xhr.send(null);
}
exports.get = get;
function loadScript(path, callback) {
    var head = dom.getDocumentHead();
    var s = document.createElement('script');
    s.src = path;
    head.appendChild(s);
    s.onload = s['onreadystatechange'] = function (_, isAbort) {
        if (isAbort || !s['readyState'] || s['readyState'] === "loaded" || s['readyState'] === "complete") {
            s = s.onload = s['onreadystatechange'] = null;
            if (!isAbort) {
                callback();
            }
        }
    };
}
exports.loadScript = loadScript;
;
function qualifyURL(url) {
    var a = document.createElement('a');
    a.href = url;
    return a.href;
}
exports.qualifyURL = qualifyURL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9uZXQudHMiXSwibmFtZXMiOlsiZ2V0IiwibG9hZFNjcmlwdCIsInF1YWxpZnlVUkwiXSwibWFwcGluZ3MiOiJBQVFBLElBQU8sR0FBRyxXQUFXLE9BQU8sQ0FBQyxDQUFDO0FBSzlCLGFBQW9CLEdBQVcsRUFBRSxRQUF1QztJQUNwRUEsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsY0FBY0EsRUFBRUEsQ0FBQ0E7SUFDL0JBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLEdBQUdBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO0lBQzNCQSxHQUFHQSxDQUFDQSxrQkFBa0JBLEdBQUdBO1FBR3JCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQy9CLENBQUM7SUFDTCxDQUFDLENBQUNBO0lBQ0ZBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0FBQ25CQSxDQUFDQTtBQVhlLFdBQUcsTUFXbEIsQ0FBQTtBQUtELG9CQUEyQixJQUFZLEVBQUUsUUFBbUI7SUFFeERDLElBQUlBLElBQUlBLEdBQWdCQSxHQUFHQSxDQUFDQSxlQUFlQSxFQUFFQSxDQUFDQTtJQUM5Q0EsSUFBSUEsQ0FBQ0EsR0FBc0JBLFFBQVFBLENBQUNBLGFBQWFBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO0lBRTVEQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUNiQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUVwQkEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxHQUFHQSxVQUFTQSxDQUFDQSxFQUFFQSxPQUFpQkE7UUFDOUQsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDaEcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQzlDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDWCxRQUFRLEVBQUUsQ0FBQztZQUNmLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQyxDQUFDQTtBQUNOQSxDQUFDQTtBQWhCZSxrQkFBVSxhQWdCekIsQ0FBQTtBQUFBLENBQUM7QUFNRixvQkFBMkIsR0FBVztJQUVsQ0MsSUFBSUEsQ0FBQ0EsR0FBc0JBLFFBQVFBLENBQUNBLGFBQWFBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO0lBQ3ZEQSxDQUFDQSxDQUFDQSxJQUFJQSxHQUFHQSxHQUFHQSxDQUFDQTtJQUNiQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQTtBQUNsQkEsQ0FBQ0E7QUFMZSxrQkFBVSxhQUt6QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIGJhc2VkIG9uIGNvZGUgZnJvbTpcbiAqXG4gKiBAbGljZW5zZSBSZXF1aXJlSlMgdGV4dCAwLjI1LjAgQ29weXJpZ2h0IChjKSAyMDEwLTIwMTEsIFRoZSBEb2pvIEZvdW5kYXRpb24gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIEF2YWlsYWJsZSB2aWEgdGhlIE1JVCBvciBuZXcgQlNEIGxpY2Vuc2UuXG4gKiBzZWU6IGh0dHA6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzIGZvciBkZXRhaWxzXG4gKi9cblxuaW1wb3J0IGRvbSA9IHJlcXVpcmUoXCIuL2RvbVwiKTtcblxuLyoqXG4gKiBFeGVjdXRlcyBhICdHRVQnIEhUVFAgcmVxdWVzdCB3aXRoIGEgcmVzcG9uc2VUZXh0IGNhbGxiYWNrLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0KHVybDogc3RyaW5nLCBjYWxsYmFjazogKHJlc3BvbnNlVGV4dDogc3RyaW5nKSA9PiBhbnkpIHtcbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgeGhyLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBEbyBub3QgZXhwbGljaXRseSBoYW5kbGUgZXJyb3JzLCB0aG9zZSBzaG91bGQgYmVcbiAgICAgICAgLy8gdmlzaWJsZSB2aWEgY29uc29sZSBvdXRwdXQgaW4gdGhlIGJyb3dzZXIuXG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgY2FsbGJhY2soeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHhoci5zZW5kKG51bGwpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSA8c2NyaXB0PiB0YWcsIHNldHMgdGhlICdzcmMnIHByb3BlcnR5IGFuZCBjYWxscyBiYWNrIHdoZW4gbG9hZGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9hZFNjcmlwdChwYXRoOiBzdHJpbmcsIGNhbGxiYWNrOiAoKSA9PiBhbnkpOiB2b2lkIHtcbiAgICAvLyBUT0RPOiBUaGlzIGlzIGEgc3RhbmRhcmQgdHJpY2suIEFyZSB0aGVyZSBhbnkgYmVzdCBwcmFjdGljZXM/XG4gICAgdmFyIGhlYWQ6IEhUTUxFbGVtZW50ID0gZG9tLmdldERvY3VtZW50SGVhZCgpO1xuICAgIHZhciBzOiBIVE1MU2NyaXB0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gICAgcy5zcmMgPSBwYXRoO1xuICAgIGhlYWQuYXBwZW5kQ2hpbGQocyk7XG5cbiAgICBzLm9ubG9hZCA9IHNbJ29ucmVhZHlzdGF0ZWNoYW5nZSddID0gZnVuY3Rpb24oXywgaXNBYm9ydD86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKGlzQWJvcnQgfHwgIXNbJ3JlYWR5U3RhdGUnXSB8fCBzWydyZWFkeVN0YXRlJ10gPT09IFwibG9hZGVkXCIgfHwgc1sncmVhZHlTdGF0ZSddID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICAgIHMgPSBzLm9ubG9hZCA9IHNbJ29ucmVhZHlzdGF0ZWNoYW5nZSddID0gbnVsbDtcbiAgICAgICAgICAgIGlmICghaXNBYm9ydCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgdXJsIGludG8gYSBmdWxseSBxdWFsaWZpZWQgYWJzb2x1dGUgVVJMLlxuICogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCB3b3JrIGluIElFNlxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVhbGlmeVVSTCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLy8gVE9ETzogVGhpcyBpcyBhIHN0YW5kYXJkIHRyaWNrLiBBcmUgdGhlcmUgYW55IGJlc3QgcHJhY3RpY2VzP1xuICAgIHZhciBhOiBIVE1MQW5jaG9yRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBhLmhyZWYgPSB1cmw7XG4gICAgcmV0dXJuIGEuaHJlZjtcbn1cbiJdfQ==