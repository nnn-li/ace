import { getDocumentHead } from './dom';
export function get(url, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            callback(xhr.responseText);
        }
    };
    xhr.send(null);
}
export function loadScript(src, callback, doc) {
    var head = getDocumentHead();
    var s = doc.createElement('script');
    s.src = src;
    head.appendChild(s);
    s.onload = s['onreadystatechange'] = function (_, isAbort) {
        if (isAbort || !s['readyState'] || s['readyState'] === "loaded" || s['readyState'] === "complete") {
            s = s.onload = s['onreadystatechange'] = null;
            if (!isAbort) {
                callback();
            }
        }
    };
}
;
export function qualifyURL(url) {
    var a = document.createElement('a');
    a.href = url;
    return a.href;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9uZXQudHMiXSwibmFtZXMiOlsiZ2V0IiwibG9hZFNjcmlwdCIsInF1YWxpZnlVUkwiXSwibWFwcGluZ3MiOiJPQVFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sT0FBTztBQUt2QyxvQkFBb0IsR0FBVyxFQUFFLFFBQXVDO0lBQ3BFQSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxjQUFjQSxFQUFFQSxDQUFDQTtJQUMvQkEsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsR0FBR0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDM0JBLEdBQUdBLENBQUNBLGtCQUFrQkEsR0FBR0E7UUFHckIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLFFBQVEsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDL0IsQ0FBQztJQUNMLENBQUMsQ0FBQ0E7SUFDRkEsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7QUFDbkJBLENBQUNBO0FBS0QsMkJBQTJCLEdBQVcsRUFBRSxRQUFtQixFQUFFLEdBQWE7SUFFdEVDLElBQUlBLElBQUlBLEdBQWdCQSxlQUFlQSxFQUFFQSxDQUFDQTtJQUMxQ0EsSUFBSUEsQ0FBQ0EsR0FBc0JBLEdBQUdBLENBQUNBLGFBQWFBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO0lBRXZEQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQTtJQUNaQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUVwQkEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxHQUFHQSxVQUFTQSxDQUFDQSxFQUFFQSxPQUFpQkE7UUFDOUQsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDaEcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQzlDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDWCxRQUFRLEVBQUUsQ0FBQztZQUNmLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQyxDQUFDQTtBQUNOQSxDQUFDQTtBQUFBLENBQUM7QUFNRiwyQkFBMkIsR0FBVztJQUVsQ0MsSUFBSUEsQ0FBQ0EsR0FBc0JBLFFBQVFBLENBQUNBLGFBQWFBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO0lBQ3ZEQSxDQUFDQSxDQUFDQSxJQUFJQSxHQUFHQSxHQUFHQSxDQUFDQTtJQUNiQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQTtBQUNsQkEsQ0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGJhc2VkIG9uIGNvZGUgZnJvbTpcbiAqXG4gKiBAbGljZW5zZSBSZXF1aXJlSlMgdGV4dCAwLjI1LjAgQ29weXJpZ2h0IChjKSAyMDEwLTIwMTEsIFRoZSBEb2pvIEZvdW5kYXRpb24gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIEF2YWlsYWJsZSB2aWEgdGhlIE1JVCBvciBuZXcgQlNEIGxpY2Vuc2UuXG4gKiBzZWU6IGh0dHA6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzIGZvciBkZXRhaWxzXG4gKi9cblxuaW1wb3J0IHsgZ2V0RG9jdW1lbnRIZWFkIH0gZnJvbSAnLi9kb20nO1xuXG4vKipcbiAqIEV4ZWN1dGVzIGEgJ0dFVCcgSFRUUCByZXF1ZXN0IHdpdGggYSByZXNwb25zZVRleHQgY2FsbGJhY2suXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXQodXJsOiBzdHJpbmcsIGNhbGxiYWNrOiAocmVzcG9uc2VUZXh0OiBzdHJpbmcpID0+IGFueSkge1xuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub3BlbignR0VUJywgdXJsLCB0cnVlKTtcbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIERvIG5vdCBleHBsaWNpdGx5IGhhbmRsZSBlcnJvcnMsIHRob3NlIHNob3VsZCBiZVxuICAgICAgICAvLyB2aXNpYmxlIHZpYSBjb25zb2xlIG91dHB1dCBpbiB0aGUgYnJvd3Nlci5cbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICBjYWxsYmFjayh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgeGhyLnNlbmQobnVsbCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIDxzY3JpcHQ+IHRhZywgc2V0cyB0aGUgJ3NyYycgcHJvcGVydHksIGFuZCBjYWxscyBiYWNrIHdoZW4gbG9hZGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9hZFNjcmlwdChzcmM6IHN0cmluZywgY2FsbGJhY2s6ICgpID0+IGFueSwgZG9jOiBEb2N1bWVudCk6IHZvaWQge1xuICAgIC8vIFRPRE86IFRoaXMgaXMgYSBzdGFuZGFyZCB0cmljay4gQXJlIHRoZXJlIGFueSBiZXN0IHByYWN0aWNlcz9cbiAgICB2YXIgaGVhZDogSFRNTEVsZW1lbnQgPSBnZXREb2N1bWVudEhlYWQoKTtcbiAgICB2YXIgczogSFRNTFNjcmlwdEVsZW1lbnQgPSBkb2MuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cbiAgICBzLnNyYyA9IHNyYztcbiAgICBoZWFkLmFwcGVuZENoaWxkKHMpO1xuXG4gICAgcy5vbmxvYWQgPSBzWydvbnJlYWR5c3RhdGVjaGFuZ2UnXSA9IGZ1bmN0aW9uKF8sIGlzQWJvcnQ/OiBib29sZWFuKSB7XG4gICAgICAgIGlmIChpc0Fib3J0IHx8ICFzWydyZWFkeVN0YXRlJ10gfHwgc1sncmVhZHlTdGF0ZSddID09PSBcImxvYWRlZFwiIHx8IHNbJ3JlYWR5U3RhdGUnXSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgICAgICBzID0gcy5vbmxvYWQgPSBzWydvbnJlYWR5c3RhdGVjaGFuZ2UnXSA9IG51bGw7XG4gICAgICAgICAgICBpZiAoIWlzQWJvcnQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn07XG5cbi8qKlxuICogQ29udmVydCBhIHVybCBpbnRvIGEgZnVsbHkgcXVhbGlmaWVkIGFic29sdXRlIFVSTC5cbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBub3Qgd29yayBpbiBJRTZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1YWxpZnlVUkwodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIC8vIFRPRE86IFRoaXMgaXMgYSBzdGFuZGFyZCB0cmljay4gQXJlIHRoZXJlIGFueSBiZXN0IHByYWN0aWNlcz9cbiAgICB2YXIgYTogSFRNTEFuY2hvckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgYS5ocmVmID0gdXJsO1xuICAgIHJldHVybiBhLmhyZWY7XG59XG4iXX0=