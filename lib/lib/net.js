import { getDocumentHead } from './dom';
export function get(url, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
            callback(xhr.responseText);
        }
    };
    xhr.send(null);
}
export function loadScript(path, callback) {
    var head = getDocumentHead();
    var s = document.createElement('script');
    s.src = path;
    head.appendChild(s);
    s.onload = s['onreadystatechange'] = function (_, isAbort) {
        if (isAbort || !s['readyState'] || s['readyState'] === "loaded" || s['readyState'] === "complete") {
            s = s.onload = s['onreadystatechange'] = null;
            if (!isAbort) {
                callback();
            }
        }
    };
}
;
export function qualifyURL(url) {
    var a = document.createElement('a');
    a.href = url;
    return a.href;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi9uZXQudHMiXSwibmFtZXMiOlsiZ2V0IiwibG9hZFNjcmlwdCIsInF1YWxpZnlVUkwiXSwibWFwcGluZ3MiOiJPQVFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sT0FBTztBQUt2QyxvQkFBb0IsR0FBVyxFQUFFLFFBQXVDO0lBQ3BFQSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxjQUFjQSxFQUFFQSxDQUFDQTtJQUMvQkEsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsR0FBR0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDM0JBLEdBQUdBLENBQUNBLGtCQUFrQkEsR0FBR0E7UUFHckIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLFFBQVEsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDL0IsQ0FBQztJQUNMLENBQUMsQ0FBQ0E7SUFDRkEsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7QUFDbkJBLENBQUNBO0FBS0QsMkJBQTJCLElBQVksRUFBRSxRQUFtQjtJQUV4REMsSUFBSUEsSUFBSUEsR0FBZ0JBLGVBQWVBLEVBQUVBLENBQUNBO0lBQzFDQSxJQUFJQSxDQUFDQSxHQUFzQkEsUUFBUUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7SUFFNURBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBO0lBQ2JBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBRXBCQSxDQUFDQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxvQkFBb0JBLENBQUNBLEdBQUdBLFVBQVNBLENBQUNBLEVBQUVBLE9BQWlCQTtRQUM5RCxFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNoRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxJQUFJLENBQUM7WUFDOUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNYLFFBQVEsRUFBRSxDQUFDO1lBQ2YsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDLENBQUNBO0FBQ05BLENBQUNBO0FBQUEsQ0FBQztBQU1GLDJCQUEyQixHQUFXO0lBRWxDQyxJQUFJQSxDQUFDQSxHQUFzQkEsUUFBUUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFDdkRBLENBQUNBLENBQUNBLElBQUlBLEdBQUdBLEdBQUdBLENBQUNBO0lBQ2JBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBO0FBQ2xCQSxDQUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogYmFzZWQgb24gY29kZSBmcm9tOlxuICpcbiAqIEBsaWNlbnNlIFJlcXVpcmVKUyB0ZXh0IDAuMjUuMCBDb3B5cmlnaHQgKGMpIDIwMTAtMjAxMSwgVGhlIERvam8gRm91bmRhdGlvbiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogQXZhaWxhYmxlIHZpYSB0aGUgTUlUIG9yIG5ldyBCU0QgbGljZW5zZS5cbiAqIHNlZTogaHR0cDovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMgZm9yIGRldGFpbHNcbiAqL1xuXG5pbXBvcnQgeyBnZXREb2N1bWVudEhlYWQgfSBmcm9tICcuL2RvbSc7XG5cbi8qKlxuICogRXhlY3V0ZXMgYSAnR0VUJyBIVFRQIHJlcXVlc3Qgd2l0aCBhIHJlc3BvbnNlVGV4dCBjYWxsYmFjay5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldCh1cmw6IHN0cmluZywgY2FsbGJhY2s6IChyZXNwb25zZVRleHQ6IHN0cmluZykgPT4gYW55KSB7XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRG8gbm90IGV4cGxpY2l0bHkgaGFuZGxlIGVycm9ycywgdGhvc2Ugc2hvdWxkIGJlXG4gICAgICAgIC8vIHZpc2libGUgdmlhIGNvbnNvbGUgb3V0cHV0IGluIHRoZSBicm93c2VyLlxuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB4aHIuc2VuZChudWxsKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgPHNjcmlwdD4gdGFnLCBzZXRzIHRoZSAnc3JjJyBwcm9wZXJ0eSBhbmQgY2FsbHMgYmFjayB3aGVuIGxvYWRlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTY3JpcHQocGF0aDogc3RyaW5nLCBjYWxsYmFjazogKCkgPT4gYW55KTogdm9pZCB7XG4gICAgLy8gVE9ETzogVGhpcyBpcyBhIHN0YW5kYXJkIHRyaWNrLiBBcmUgdGhlcmUgYW55IGJlc3QgcHJhY3RpY2VzP1xuICAgIHZhciBoZWFkOiBIVE1MRWxlbWVudCA9IGdldERvY3VtZW50SGVhZCgpO1xuICAgIHZhciBzOiBIVE1MU2NyaXB0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gICAgcy5zcmMgPSBwYXRoO1xuICAgIGhlYWQuYXBwZW5kQ2hpbGQocyk7XG5cbiAgICBzLm9ubG9hZCA9IHNbJ29ucmVhZHlzdGF0ZWNoYW5nZSddID0gZnVuY3Rpb24oXywgaXNBYm9ydD86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKGlzQWJvcnQgfHwgIXNbJ3JlYWR5U3RhdGUnXSB8fCBzWydyZWFkeVN0YXRlJ10gPT09IFwibG9hZGVkXCIgfHwgc1sncmVhZHlTdGF0ZSddID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICAgIHMgPSBzLm9ubG9hZCA9IHNbJ29ucmVhZHlzdGF0ZWNoYW5nZSddID0gbnVsbDtcbiAgICAgICAgICAgIGlmICghaXNBYm9ydCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgdXJsIGludG8gYSBmdWxseSBxdWFsaWZpZWQgYWJzb2x1dGUgVVJMLlxuICogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCB3b3JrIGluIElFNlxuICovXG5leHBvcnQgZnVuY3Rpb24gcXVhbGlmeVVSTCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLy8gVE9ETzogVGhpcyBpcyBhIHN0YW5kYXJkIHRyaWNrLiBBcmUgdGhlcmUgYW55IGJlc3QgcHJhY3RpY2VzP1xuICAgIHZhciBhOiBIVE1MQW5jaG9yRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBhLmhyZWYgPSB1cmw7XG4gICAgcmV0dXJuIGEuaHJlZjtcbn1cbiJdfQ==