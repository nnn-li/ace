export var ENABLE_ASSERTS = true;
export class AssertionError {
    constructor(message, args) {
        this.name = 'AssertionError';
        this.message = message;
    }
}
function doAssertFailure(defaultMessage, defaultArgs, givenMessage, givenArgs) {
    var message = 'Assertion failed';
    if (givenMessage) {
        message += ': ' + givenMessage;
        var args = givenArgs;
    }
    else if (defaultMessage) {
        message += ': ' + defaultMessage;
        args = defaultArgs;
    }
    throw new AssertionError('' + message, args || []);
}
export function assert(condition, message, args) {
    if (ENABLE_ASSERTS && !condition) {
        doAssertFailure('', null, message, Array.prototype.slice.call(arguments, 2));
    }
    return condition;
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYXNzZXJ0cy50cyJdLCJuYW1lcyI6WyJBc3NlcnRpb25FcnJvciIsIkFzc2VydGlvbkVycm9yLmNvbnN0cnVjdG9yIiwiZG9Bc3NlcnRGYWlsdXJlIiwiYXNzZXJ0Il0sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLGNBQWMsR0FBRyxJQUFJLENBQUM7QUFFakM7SUFHSUEsWUFBWUEsT0FBT0EsRUFBRUEsSUFBSUE7UUFGbEJDLFNBQUlBLEdBQUdBLGdCQUFnQkEsQ0FBQ0E7UUFHM0JBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLE9BQU9BLENBQUNBO0lBQzNCQSxDQUFDQTtBQUNMRCxDQUFDQTtBQUVELHlCQUF5QixjQUFzQixFQUFFLFdBQVcsRUFBRSxZQUFvQixFQUFFLFNBQVM7SUFDekZFLElBQUlBLE9BQU9BLEdBQUdBLGtCQUFrQkEsQ0FBQ0E7SUFDakNBLEVBQUVBLENBQUNBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLENBQUNBO1FBQ2ZBLE9BQU9BLElBQUlBLElBQUlBLEdBQUdBLFlBQVlBLENBQUNBO1FBQy9CQSxJQUFJQSxJQUFJQSxHQUFHQSxTQUFTQSxDQUFDQTtJQUN6QkEsQ0FBQ0E7SUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLE9BQU9BLElBQUlBLElBQUlBLEdBQUdBLGNBQWNBLENBQUNBO1FBQ2pDQSxJQUFJQSxHQUFHQSxXQUFXQSxDQUFDQTtJQUN2QkEsQ0FBQ0E7SUFLREEsTUFBTUEsSUFBSUEsY0FBY0EsQ0FBQ0EsRUFBRUEsR0FBR0EsT0FBT0EsRUFBRUEsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7QUFDdkRBLENBQUNBO0FBRUQsdUJBQXVCLFNBQVMsRUFBRSxPQUFRLEVBQUUsSUFBSztJQUM3Q0MsRUFBRUEsQ0FBQ0EsQ0FBQ0EsY0FBY0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLGVBQWVBLENBQUNBLEVBQUVBLEVBQUVBLElBQUlBLEVBQUVBLE9BQU9BLEVBQUVBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO0lBQ2pGQSxDQUFDQTtJQUNEQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQTtBQUNyQkEsQ0FBQ0E7QUFBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBFTkFCTEVfQVNTRVJUUyA9IHRydWU7XG5cbmV4cG9ydCBjbGFzcyBBc3NlcnRpb25FcnJvciBpbXBsZW1lbnRzIEVycm9yIHtcbiAgICBwdWJsaWMgbmFtZSA9ICdBc3NlcnRpb25FcnJvcic7XG4gICAgcHVibGljIG1lc3NhZ2U7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgYXJncykge1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZG9Bc3NlcnRGYWlsdXJlKGRlZmF1bHRNZXNzYWdlOiBzdHJpbmcsIGRlZmF1bHRBcmdzLCBnaXZlbk1lc3NhZ2U6IHN0cmluZywgZ2l2ZW5BcmdzKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnQXNzZXJ0aW9uIGZhaWxlZCc7XG4gICAgaWYgKGdpdmVuTWVzc2FnZSkge1xuICAgICAgICBtZXNzYWdlICs9ICc6ICcgKyBnaXZlbk1lc3NhZ2U7XG4gICAgICAgIHZhciBhcmdzID0gZ2l2ZW5BcmdzO1xuICAgIH1cbiAgICBlbHNlIGlmIChkZWZhdWx0TWVzc2FnZSkge1xuICAgICAgICBtZXNzYWdlICs9ICc6ICcgKyBkZWZhdWx0TWVzc2FnZTtcbiAgICAgICAgYXJncyA9IGRlZmF1bHRBcmdzO1xuICAgIH1cbiAgICAvLyBUaGUgJycgKyB3b3JrcyBhcm91bmQgYW4gT3BlcmEgMTAgYnVnIGluIHRoZSB1bml0IHRlc3RzLiBXaXRob3V0IGl0LFxuICAgIC8vIGEgc3RhY2sgdHJhY2UgaXMgYWRkZWQgdG8gdmFyIG1lc3NhZ2UgYWJvdmUuIFdpdGggdGhpcywgYSBzdGFjayB0cmFjZSBpc1xuICAgIC8vIG5vdCBhZGRlZCB1bnRpbCB0aGlzIGxpbmUgKGl0IGNhdXNlcyB0aGUgZXh0cmEgZ2FyYmFnZSB0byBiZSBhZGRlZCBhZnRlclxuICAgIC8vIHRoZSBhc3NlcnRpb24gbWVzc2FnZSBpbnN0ZWFkIG9mIGluIHRoZSBtaWRkbGUgb2YgaXQpLlxuICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcignJyArIG1lc3NhZ2UsIGFyZ3MgfHwgW10pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZT8sIGFyZ3M/KSB7XG4gICAgaWYgKEVOQUJMRV9BU1NFUlRTICYmICFjb25kaXRpb24pIHtcbiAgICAgICAgZG9Bc3NlcnRGYWlsdXJlKCcnLCBudWxsLCBtZXNzYWdlLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmRpdGlvbjtcbn07XG4iXX0=