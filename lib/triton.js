import autoComplete from './mode/typescript/autoComplete';
import CompletionService from './mode/typescript/CompletionService';
import EditorPosition from './mode/typescript/EditorPosition';
import { getPosition } from './mode/typescript/DocumentPositionUtil';
import { parallel } from "./lib/async";
import Range from './Range';
import { deferredCall } from "./lib/lang";
import typeInfoTip from "./typeInfoTip";
import { workspace } from './workspace/workspace';
import { COMMAND_NAME_AUTO_COMPLETE } from './editor_protocol';
export function wrap(editor, rootElement, workspace, doc = window.document) {
    function show() {
        rootElement.style.display = "block";
        editor.focus();
    }
    function hide() {
        rootElement.style.display = 'none';
    }
    var _fileName;
    var _completionService = new CompletionService(editor, workspace);
    var _editorPositionService = new EditorPosition(editor);
    var _syncStop = false;
    var _refMarkers = [];
    var _errorMarkers = [];
    var _typeInfo = typeInfoTip(doc, editor, workspace, () => _fileName, rootElement);
    var _autoComplete = autoComplete(editor, () => _fileName, _completionService);
    _typeInfo.startUp();
    function changeFile(content, fileName, cursorPos) {
        if (_fileName) {
            if (workspace) {
                workspace.removeScript(_fileName);
            }
            _fileName = null;
        }
        _fileName = fileName;
        _syncStop = true;
        var data = content.replace(/\r\n?/g, '\n');
        editor.setValue(data, cursorPos);
        if (workspace) {
            workspace.ensureScript(fileName, editor.getSession().getDocument().getValue());
        }
        _syncStop = false;
    }
    editor.commands.addCommands([{
            name: COMMAND_NAME_AUTO_COMPLETE,
            bindKey: "Ctrl-Space",
            exec: function (editor) {
                if (!_autoComplete.isActive()) {
                    _autoComplete.activate();
                }
            }
        }]);
    editor.addEventListener("mousedown", function (event) {
        if (_autoComplete.isActive()) {
            _autoComplete.deactivate();
        }
    });
    editor.addEventListener("changeCursor", function (event) {
    });
    function showOccurrences() {
    }
    var deferredShowOccurrences = deferredCall(showOccurrences);
    editor.addEventListener("changeSelection", function (event) {
        if (!_syncStop) {
            try {
                deferredShowOccurrences.schedule(200);
            }
            catch (ex) {
            }
        }
    });
    editor.addEventListener("change", function (event) {
        var data = event.data;
        var action = data.action;
        var range = data.range;
        if (_fileName) {
            if (!_syncStop) {
                try {
                    updateWorkspaceFile();
                    updateMarkerModels();
                }
                catch (e) {
                }
            }
        }
        function updateWorkspaceFile() {
            function editLanguageServiceScript(start, end, text) {
                if (workspace) {
                    workspace.editScript(_fileName, start, end, text);
                }
            }
            var end;
            var start = _editorPositionService.getPositionChars(range.start);
            if (action === "insertText") {
                editLanguageServiceScript(start, start, data.text);
            }
            else if (action === "removeText") {
                end = start + data.text.length;
                editLanguageServiceScript(start, end, "");
            }
            else if (action === "insertLines") {
                var text = data.lines.map(function (line) { return line + '\n'; }).join('');
                editLanguageServiceScript(start, start, text);
            }
            else if (action === "removeLines") {
                var len = _editorPositionService.getLinesChars(data.lines);
                end = start + len;
                editLanguageServiceScript(start, end, "");
            }
            else {
            }
        }
        function updateMarkerModels() {
            var markers = editor.getSession().getMarkers(true);
            var line_count = 0;
            var isNewLine = editor.getSession().getDocument().isNewLine;
            if (action === "insertText") {
                if (isNewLine(data.text)) {
                    line_count = 1;
                }
            }
            else if (action === "insertLines") {
                line_count = data.lines.length;
            }
            else if (action === "removeText") {
                if (isNewLine(data.text)) {
                    line_count = -1;
                }
            }
            else if (action === "removeLines") {
                line_count = -data.lines.length;
            }
            if (line_count !== 0) {
                var markerUpdate = function (id) {
                    var marker = markers[id];
                    var row = range.start.row;
                    if (line_count > 0) {
                        row = +1;
                    }
                    if (marker && marker.range.start.row > row) {
                        marker.range.start.row += line_count;
                        marker.range.end.row += line_count;
                    }
                };
                _errorMarkers.forEach(markerUpdate);
                _refMarkers.forEach(markerUpdate);
                editor.onChangeFrontMarker();
            }
        }
    });
    editor.getSession().on("compiled", function (message) {
        var session = editor.getSession();
        var doc = session.getDocument();
        function convertError(error) {
            var minChar = error.start;
            var limChar = minChar + error.length;
            var pos = getPosition(doc, minChar);
            return { row: pos.row, column: pos.column, text: error.message, type: 'error' };
        }
        function getSyntaxErrors(callback) {
            if (workspace && typeof _fileName === 'string') {
                workspace.getSyntaxErrors(_fileName, callback);
            }
            else {
                callback(null, []);
            }
        }
        function getSemanticErrors(callback) {
            if (workspace && typeof _fileName === 'string') {
                workspace.getSemanticErrors(_fileName, callback);
            }
            else {
                callback(null, []);
            }
        }
        parallel([getSyntaxErrors, getSemanticErrors], function (err, results) {
            if (!err) {
                var errors = results[0].concat(results[1]);
                var annotations = [];
                if (errors && errors.length) {
                    errors.forEach(function (error) {
                        annotations.push(convertError(error));
                    });
                }
                session.setAnnotations(annotations);
                _errorMarkers.forEach(function (id) { session.removeMarker(id); });
                errors.forEach(function (error) {
                    var minChar = error.start;
                    var limChar = minChar + error.length;
                    var start = _editorPositionService.getPositionFromChars(minChar);
                    var end = _editorPositionService.getPositionFromChars(limChar);
                    var range = new Range(start.row, start.column, end.row, end.column);
                    _errorMarkers.push(session.addMarker(range, "typescript-error", "text", true));
                });
            }
            else {
            }
        });
        if (workspace && typeof _fileName === 'string') {
            workspace.getOutputFiles(_fileName, function (err, outputFiles) {
                session._emit("outputFiles", { data: outputFiles });
            });
        }
    });
    var editorWrapper = {
        clearSelection: () => { editor.clearSelection(); },
        get fileName() { return _fileName; },
        set fileName(value) { _fileName = value; },
        get commands() { return editor.commands; },
        get container() { return editor.container; },
        get session() { return editor.session; },
        getCursorPosition: () => { return editor.getCursorPosition(); },
        getSelection: () => { return editor.getSelection(); },
        getValue: () => { return editor.getValue(); },
        gotoLine: (lineNumber, column, animate) => { return editor.gotoLine(lineNumber, column, animate); },
        focus: () => { editor.focus(); },
        indent: () => { editor.indent(); },
        moveCursorTo: (row, column, animate) => { return editor.moveCursorTo(row, column, animate); },
        resize: (force) => { return editor.resize(force); },
        selectAll: () => { editor.selectAll(); },
        setAutoScrollEditorIntoView: (enable) => { return editor.setAutoScrollEditorIntoView(enable); },
        setFontSize: (fontSize) => { return editor.setFontSize(fontSize); },
        setOption: (name, value) => { return editor.setOption(name, value); },
        setOptions: (options) => { return editor.setOptions(options); },
        setShowInvisibles: (showInvisibles) => { return editor.setShowInvisibles(showInvisibles); },
        setTheme: (theme, callback) => { return editor.setTheme(theme, callback); },
        setValue: (val, cursorPos) => { return editor.setValue(val, cursorPos); },
        getSession: () => { return editor.getSession(); },
        addEventListener: (eventName, callback, capturing) => { return editor.addEventListener(eventName, callback, capturing); },
        get onTextInput() { return editor.onTextInput; },
        set onTextInput(value) { editor.onTextInput = value; },
        getDisplayIndentGuides: () => { return editor.getDisplayIndentGuides(); },
        setDisplayIndentGuides: (displayIndentGuides) => { return editor.setDisplayIndentGuides(displayIndentGuides); },
        getShowPrintMargin: () => { return editor.getShowPrintMargin(); },
        setShowPrintMargin: (showPrintMargin) => { return editor.setShowPrintMargin(showPrintMargin); },
        changeFile: changeFile
    };
    return editorWrapper;
}
function edit(source, workspace, doc = window.document) {
    var rootElement = (function () {
        if (typeof source === "string") {
            var element = doc.getElementById(source);
            if (element) {
                return element;
            }
            else {
                throw new Error(source + " must be an element id");
            }
        }
        else {
            return source;
        }
    })();
    var _editor = (function (element) {
        throw new Error("edit is currently unsupported");
    })(rootElement);
    return wrap(_editor, rootElement, workspace, doc);
}
export function workspace() {
    return workspace();
}
//# sourceMappingURL=data:application/json;base64,