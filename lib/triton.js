var autoCompleteNew = require('./mode/typescript/autoComplete');
var CompletionService = require('./mode/typescript/CompletionService');
var EditorPosition = require('./mode/typescript/EditorPosition');
var DocumentPositionUtil = require('./mode/typescript/DocumentPositionUtil');
var async = require("./lib/async");
var ram = require('./range');
var lang = require("./lib/lang");
var typeInfoTip = require("./typeInfoTip");
var wsm = require('./workspace/workspace');
var protocol = require('./editor_protocol');
var deferredCall = lang.deferredCall;
function wrap(editor, rootElement, workspace, doc) {
    if (doc === void 0) { doc = window.document; }
    function show() {
        rootElement.style.display = "block";
        editor.focus();
    }
    function hide() {
        rootElement.style.display = 'none';
    }
    var _fileName;
    var _completionService = new CompletionService(editor, workspace);
    var _editorPositionService = new EditorPosition(editor);
    var _syncStop = false;
    var _refMarkers = [];
    var _errorMarkers = [];
    var _typeInfo = typeInfoTip(doc, editor, workspace, function () { return _fileName; }, rootElement);
    var _autoComplete = autoCompleteNew(editor, function () { return _fileName; }, _completionService);
    _typeInfo.startUp();
    function changeFile(content, fileName, cursorPos) {
        if (_fileName) {
            if (workspace) {
                workspace.removeScript(_fileName);
            }
            _fileName = null;
        }
        _fileName = fileName;
        _syncStop = true;
        var data = content.replace(/\r\n?/g, '\n');
        editor.setValue(data, cursorPos);
        if (workspace) {
            workspace.ensureScript(fileName, editor.getSession().getDocument().getValue());
        }
        _syncStop = false;
    }
    editor.commands.addCommands([{
            name: protocol.COMMAND_NAME_AUTO_COMPLETE,
            bindKey: "Ctrl-Space",
            exec: function (editor) {
                if (!_autoComplete.isActive()) {
                    _autoComplete.activate();
                }
            }
        }]);
    editor.addEventListener("mousedown", function (event) {
        if (_autoComplete.isActive()) {
            _autoComplete.deactivate();
        }
    });
    editor.addEventListener("changeCursor", function (event) {
    });
    function showOccurrences() {
    }
    var deferredShowOccurrences = deferredCall(showOccurrences);
    editor.addEventListener("changeSelection", function (event) {
        if (!_syncStop) {
            try {
                deferredShowOccurrences.schedule(200);
            }
            catch (ex) {
            }
        }
    });
    editor.addEventListener("change", function (event) {
        var data = event.data;
        var action = data.action;
        var range = data.range;
        if (_fileName) {
            if (!_syncStop) {
                try {
                    updateWorkspaceFile();
                    updateMarkerModels();
                }
                catch (e) {
                }
            }
        }
        function updateWorkspaceFile() {
            function editLanguageServiceScript(start, end, text) {
                if (workspace) {
                    workspace.editScript(_fileName, start, end, text);
                }
            }
            var end;
            var start = _editorPositionService.getPositionChars(range.start);
            if (action === "insertText") {
                editLanguageServiceScript(start, start, data.text);
            }
            else if (action === "removeText") {
                end = start + data.text.length;
                editLanguageServiceScript(start, end, "");
            }
            else if (action === "insertLines") {
                var text = data.lines.map(function (line) { return line + '\n'; }).join('');
                editLanguageServiceScript(start, start, text);
            }
            else if (action === "removeLines") {
                var len = _editorPositionService.getLinesChars(data.lines);
                end = start + len;
                editLanguageServiceScript(start, end, "");
            }
            else {
            }
        }
        function updateMarkerModels() {
            var markers = editor.getSession().getMarkers(true);
            var line_count = 0;
            var isNewLine = editor.getSession().getDocument().isNewLine;
            if (action === "insertText") {
                if (isNewLine(data.text)) {
                    line_count = 1;
                }
            }
            else if (action === "insertLines") {
                line_count = data.lines.length;
            }
            else if (action === "removeText") {
                if (isNewLine(data.text)) {
                    line_count = -1;
                }
            }
            else if (action === "removeLines") {
                line_count = -data.lines.length;
            }
            if (line_count !== 0) {
                var markerUpdate = function (id) {
                    var marker = markers[id];
                    var row = range.start.row;
                    if (line_count > 0) {
                        row = +1;
                    }
                    if (marker && marker.range.start.row > row) {
                        marker.range.start.row += line_count;
                        marker.range.end.row += line_count;
                    }
                };
                _errorMarkers.forEach(markerUpdate);
                _refMarkers.forEach(markerUpdate);
                editor.onChangeFrontMarker();
            }
        }
    });
    editor.getSession().on("compiled", function (message) {
        var session = editor.getSession();
        var doc = session.getDocument();
        function convertError(error) {
            var minChar = error.start;
            var limChar = minChar + error.length;
            var pos = DocumentPositionUtil.getPosition(doc, minChar);
            return { row: pos.row, column: pos.column, text: error.message, type: 'error' };
        }
        function getSyntaxErrors(callback) {
            if (workspace && typeof _fileName === 'string') {
                workspace.getSyntaxErrors(_fileName, callback);
            }
            else {
                callback(null, []);
            }
        }
        function getSemanticErrors(callback) {
            if (workspace && typeof _fileName === 'string') {
                workspace.getSemanticErrors(_fileName, callback);
            }
            else {
                callback(null, []);
            }
        }
        async.parallel([getSyntaxErrors, getSemanticErrors], function (err, results) {
            if (!err) {
                var errors = results[0].concat(results[1]);
                var annotations = [];
                if (errors && errors.length) {
                    errors.forEach(function (error) {
                        annotations.push(convertError(error));
                    });
                }
                session.setAnnotations(annotations);
                _errorMarkers.forEach(function (id) { session.removeMarker(id); });
                errors.forEach(function (error) {
                    var minChar = error.start;
                    var limChar = minChar + error.length;
                    var start = _editorPositionService.getPositionFromChars(minChar);
                    var end = _editorPositionService.getPositionFromChars(limChar);
                    var range = new ram.Range(start.row, start.column, end.row, end.column);
                    _errorMarkers.push(session.addMarker(range, "typescript-error", "text", true));
                });
            }
            else {
            }
        });
        if (workspace && typeof _fileName === 'string') {
            workspace.getOutputFiles(_fileName, function (err, outputFiles) {
                session._emit("outputFiles", { data: outputFiles });
            });
        }
    });
    var editorWrapper = {
        clearSelection: function () { editor.clearSelection(); },
        get fileName() { return _fileName; },
        set fileName(value) { _fileName = value; },
        get commands() { return editor.commands; },
        get container() { return editor.container; },
        get session() { return editor.session; },
        getCursorPosition: function () { return editor.getCursorPosition(); },
        getSelection: function () { return editor.getSelection(); },
        getValue: function () { return editor.getValue(); },
        gotoLine: function (lineNumber, column, animate) { return editor.gotoLine(lineNumber, column, animate); },
        focus: function () { editor.focus(); },
        indent: function () { editor.indent(); },
        moveCursorTo: function (row, column, animate) { return editor.moveCursorTo(row, column, animate); },
        resize: function (force) { return editor.resize(force); },
        selectAll: function () { editor.selectAll(); },
        setAutoScrollEditorIntoView: function (enable) { return editor.setAutoScrollEditorIntoView(enable); },
        setFontSize: function (fontSize) { return editor.setFontSize(fontSize); },
        setOption: function (name, value) { return editor.setOption(name, value); },
        setOptions: function (options) { return editor.setOptions(options); },
        setShowInvisibles: function (showInvisibles) { return editor.setShowInvisibles(showInvisibles); },
        setTheme: function (theme, callback) { return editor.setTheme(theme, callback); },
        setValue: function (val, cursorPos) { return editor.setValue(val, cursorPos); },
        getSession: function () { return editor.getSession(); },
        addEventListener: function (eventName, callback, capturing) { return editor.addEventListener(eventName, callback, capturing); },
        get onTextInput() { return editor.onTextInput; },
        set onTextInput(value) { editor.onTextInput = value; },
        getDisplayIndentGuides: function () { return editor.getDisplayIndentGuides(); },
        setDisplayIndentGuides: function (displayIndentGuides) { return editor.setDisplayIndentGuides(displayIndentGuides); },
        getShowPrintMargin: function () { return editor.getShowPrintMargin(); },
        setShowPrintMargin: function (showPrintMargin) { return editor.setShowPrintMargin(showPrintMargin); },
        changeFile: changeFile
    };
    return editorWrapper;
}
exports.wrap = wrap;
function edit(source, workspace, doc) {
    if (doc === void 0) { doc = window.document; }
    var rootElement = (function () {
        if (typeof source === "string") {
            var element = doc.getElementById(source);
            if (element) {
                return element;
            }
            else {
                throw new Error(source + " must be an element id");
            }
        }
        else {
            return source;
        }
    })();
    var _editor = (function (element) {
        throw new Error("edit is currently unsupported");
    })(rootElement);
    return wrap(_editor, rootElement, workspace, doc);
}
function workspace() {
    return wsm.workspace();
}
exports.workspace = workspace;
//# sourceMappingURL=data:application/json;base64,