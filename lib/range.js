export var comparePoints = function (p1, p2) {
    return p1.row - p2.row || p1.column - p2.column;
};
export class Range {
    constructor(startRow, startColumn, endRow, endColumn) {
        this.start = {
            row: startRow,
            column: startColumn
        };
        this.end = {
            row: endRow,
            column: endColumn
        };
    }
    isEqual(range) {
        return this.start.row === range.start.row &&
            this.end.row === range.end.row &&
            this.start.column === range.start.column &&
            this.end.column === range.end.column;
    }
    toString() {
        return ("Range: [" + this.start.row + "/" + this.start.column +
            "] -> [" + this.end.row + "/" + this.end.column + "]");
    }
    contains(row, column) {
        return this.compare(row, column) === 0;
    }
    compareRange(range) {
        var cmp;
        var end = range.end;
        var start = range.start;
        cmp = this.compare(end.row, end.column);
        if (cmp === 1) {
            cmp = this.compare(start.row, start.column);
            if (cmp === 1) {
                return 2;
            }
            else if (cmp === 0) {
                return 1;
            }
            else {
                return 0;
            }
        }
        else if (cmp === -1) {
            return -2;
        }
        else {
            cmp = this.compare(start.row, start.column);
            if (cmp === -1) {
                return -1;
            }
            else if (cmp === 1) {
                return 42;
            }
            else {
                return 0;
            }
        }
    }
    comparePoint(p) {
        return this.compare(p.row, p.column);
    }
    containsRange(range) {
        return this.comparePoint(range.start) === 0 && this.comparePoint(range.end) === 0;
    }
    intersects(range) {
        var cmp = this.compareRange(range);
        return (cmp === -1 || cmp === 0 || cmp === 1);
    }
    isEnd(row, column) {
        return this.end.row === row && this.end.column === column;
    }
    isStart(row, column) {
        return this.start.row === row && this.start.column === column;
    }
    setStart(row, column) {
        if (typeof row === "object") {
            this.start.column = row['column'];
            this.start.row = row['row'];
        }
        else {
            this.start.row = row;
            this.start.column = column;
        }
    }
    setEnd(row, column) {
        if (typeof row === "object") {
            this.end.column = row['column'];
            this.end.row = row['row'];
        }
        else {
            this.end.row = row;
            this.end.column = column;
        }
    }
    inside(row, column) {
        if (this.compare(row, column) === 0) {
            if (this.isEnd(row, column) || this.isStart(row, column)) {
                return false;
            }
            else {
                return true;
            }
        }
        return false;
    }
    insideStart(row, column) {
        if (this.compare(row, column) === 0) {
            if (this.isEnd(row, column)) {
                return false;
            }
            else {
                return true;
            }
        }
        return false;
    }
    insideEnd(row, column) {
        if (this.compare(row, column) === 0) {
            if (this.isStart(row, column)) {
                return false;
            }
            else {
                return true;
            }
        }
        return false;
    }
    compare(row, column) {
        if (!this.isMultiLine()) {
            if (row === this.start.row) {
                return column < this.start.column ? -1 : (column > this.end.column ? 1 : 0);
            }
        }
        if (row < this.start.row)
            return -1;
        if (row > this.end.row)
            return 1;
        if (this.start.row === row)
            return column >= this.start.column ? 0 : -1;
        if (this.end.row === row)
            return column <= this.end.column ? 0 : 1;
        return 0;
    }
    compareStart(row, column) {
        if (this.start.row === row && this.start.column === column) {
            return -1;
        }
        else {
            return this.compare(row, column);
        }
    }
    compareEnd(row, column) {
        if (this.end.row === row && this.end.column === column) {
            return 1;
        }
        else {
            return this.compare(row, column);
        }
    }
    compareInside(row, column) {
        if (this.end.row === row && this.end.column === column) {
            return 1;
        }
        else if (this.start.row === row && this.start.column === column) {
            return -1;
        }
        else {
            return this.compare(row, column);
        }
    }
    clipRows(firstRow, lastRow) {
        var start;
        var end;
        if (this.end.row > lastRow)
            end = { row: lastRow + 1, column: 0 };
        else if (this.end.row < firstRow)
            end = { row: firstRow, column: 0 };
        if (this.start.row > lastRow)
            start = { row: lastRow + 1, column: 0 };
        else if (this.start.row < firstRow)
            start = { row: firstRow, column: 0 };
        return Range.fromPoints(start || this.start, end || this.end);
    }
    extend(row, column) {
        var cmp = this.compare(row, column);
        if (cmp === 0) {
            return this;
        }
        else if (cmp === -1) {
            var start = { row: row, column: column };
        }
        else {
            var end = { row: row, column: column };
        }
        return Range.fromPoints(start || this.start, end || this.end);
    }
    isEmpty() {
        return (this.start.row === this.end.row && this.start.column === this.end.column);
    }
    isMultiLine() {
        return (this.start.row !== this.end.row);
    }
    clone() {
        return Range.fromPoints(this.start, this.end);
    }
    collapseRows() {
        if (this.end.column === 0)
            return new Range(this.start.row, 0, Math.max(this.start.row, this.end.row - 1), 0);
        else
            return new Range(this.start.row, 0, this.end.row, 0);
    }
    moveBy(row, column) {
        this.start.row += row;
        this.start.column += column;
        this.end.row += row;
        this.end.column += column;
    }
    static fromPoints(start, end) {
        return new Range(start.row, start.column, end.row, end.column);
    }
    static comparePoints(p1, p2) {
        return p1.row - p2.row || p1.column - p2.column;
    }
}
export class OrientedRange extends Range {
    constructor(startRow, startColumn, endRow, endColumn, cursor, desiredColumn) {
        super(startRow, startColumn, endRow, endColumn);
        this.cursor = cursor;
        this.desiredColumn = desiredColumn;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmFuZ2UudHMiXSwibmFtZXMiOlsiUmFuZ2UiLCJSYW5nZS5jb25zdHJ1Y3RvciIsIlJhbmdlLmlzRXF1YWwiLCJSYW5nZS50b1N0cmluZyIsIlJhbmdlLmNvbnRhaW5zIiwiUmFuZ2UuY29tcGFyZVJhbmdlIiwiUmFuZ2UuY29tcGFyZVBvaW50IiwiUmFuZ2UuY29udGFpbnNSYW5nZSIsIlJhbmdlLmludGVyc2VjdHMiLCJSYW5nZS5pc0VuZCIsIlJhbmdlLmlzU3RhcnQiLCJSYW5nZS5zZXRTdGFydCIsIlJhbmdlLnNldEVuZCIsIlJhbmdlLmluc2lkZSIsIlJhbmdlLmluc2lkZVN0YXJ0IiwiUmFuZ2UuaW5zaWRlRW5kIiwiUmFuZ2UuY29tcGFyZSIsIlJhbmdlLmNvbXBhcmVTdGFydCIsIlJhbmdlLmNvbXBhcmVFbmQiLCJSYW5nZS5jb21wYXJlSW5zaWRlIiwiUmFuZ2UuY2xpcFJvd3MiLCJSYW5nZS5leHRlbmQiLCJSYW5nZS5pc0VtcHR5IiwiUmFuZ2UuaXNNdWx0aUxpbmUiLCJSYW5nZS5jbG9uZSIsIlJhbmdlLmNvbGxhcHNlUm93cyIsIlJhbmdlLm1vdmVCeSIsIlJhbmdlLmZyb21Qb2ludHMiLCJSYW5nZS5jb21wYXJlUG9pbnRzIiwiT3JpZW50ZWRSYW5nZSIsIk9yaWVudGVkUmFuZ2UuY29uc3RydWN0b3IiXSwibWFwcGluZ3MiOiJBQTZCQSxXQUFXLGFBQWEsR0FBRyxVQUFTLEVBQW1DLEVBQUUsRUFBbUM7SUFDeEcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7QUFDcEQsQ0FBQyxDQUFDO0FBZUY7SUFVSUEsWUFBWUEsUUFBZ0JBLEVBQUVBLFdBQW1CQSxFQUFFQSxNQUFjQSxFQUFFQSxTQUFpQkE7UUFDaEZDLElBQUlBLENBQUNBLEtBQUtBLEdB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Q0E7SUFDbERBLENBQUNBO0lBU0RSLEtBQUtBLENBQUNBLEdBQVdBLEVBQUVBLE1BQWNBO1FBQzdCUyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxJQUFJQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxNQUFNQSxLQUFLQSxNQUFNQSxDQUFDQTtJQUM5REEsQ0FBQ0E7SUFTRFQsT0FBT0EsQ0FBQ0EsR0FBV0EsRUFBRUEsTUFBY0E7UUFDL0JVLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLEtBQUtBLEdBQUdBLElBQUlBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEtBQUtBLE1BQU1BLENBQUNBO0lBQ2xFQSxDQUFDQTtJQVFEVixRQUFRQSxDQUFDQSxHQUFXQSxFQUFFQSxNQUFjQTtRQUNoQ1csRUFBRUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsR0FBR0EsS0FBS0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFMUJBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEdBQUdBLEdBQUdBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lBQ2xDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUNoQ0EsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDRkEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFDckJBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBO1FBQy9CQSxDQUFDQTtJQUNMQSxDQUFDQTtJQVFEWCxNQUFNQSxDQUFDQSxHQUFXQSxFQUFFQSxNQUFjQTtRQUM5QlksRUFBRUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsR0FBR0EsS0FBS0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFMUJBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLE1B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LENBQUNBLEtBQUtBLElBQUlBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLEdBQUdBLElBQUlBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO0lBQ2xFQSxDQUFDQTtJQVFEcEIsTUFBTUEsQ0FBQ0EsR0FBV0EsRUFBRUEsTUFBY0E7UUFDOUJxQixJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUVwQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDWkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xCQSxJQUFJQSxLQUFLQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxFQUFFQSxNQUFNQSxFQUFFQSxNQUFNQSxFQUFFQSxDQUFDQTtRQUM3Q0EsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDRkEsSUFBSUEsR0FBR0EsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsTUFBTUEsRUFBRUEsTUFBTUEsRUFBRUEsQ0FBQ0E7UUFDM0NBLENBQUNBO1FBQ0RBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLFVBQVVBLENBQUNBLEtBQUtBLElBQUlBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLEdBQUdBLElBQUlBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO0lBQ2xFQSxDQUFDQTtJQUVEckIsT0FBT0E7UUFDSHNCLE1BQU1BLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLEtBQUtBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEtBQUtBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO0lBQ3RGQSxDQUFDQTtJQU9EdEIsV0FBV0E7UUFDUHVCLE1BQU1BLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLEtBQUtBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO0lBQzdDQSxDQUFDQTtJQU9EdkIsS0FBS0E7UUFDRHdCLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO0lBQ2xEQSxDQUFDQTtJQU9EeEIsWUFBWUE7UUFDUnlCLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLE1BQU1BLEtBQUtBLENBQUNBLENBQUNBO1lBQ3RCQSxNQUFNQSxDQUFDQSxJQUFJQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFBQTtRQUN0RkEsSUFBSUE7WUFDQUEsTUFBTUEsQ0FBQ0EsSUFBSUEsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQUE7SUFDNURBLENBQUNBO0lBR0R6QixNQUFNQSxDQUFDQSxHQUFXQSxFQUFFQSxNQUFjQTtRQUM5QjBCLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBO1FBQ3RCQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxJQUFJQSxNQUFNQSxDQUFDQTtRQUM1QkEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0E7UUFDcEJBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLE1BQU1BLElBQUlBLE1BQU1BLENBQUNBO0lBQzlCQSxDQUFDQTtJQVNEMUIsT0FBY0EsVUFBVUEsQ0FBQ0EsS0FBc0NBLEVBQUVBLEdBQW9DQTtRQUNqRzJCLE1BQU1BLENBQUNBLElBQUlBLEtBQUtBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLEVBQUVBLEtBQUtBLENBQUNBLE1BQU1BLEVBQUVBLEdBQUdBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO0lBQ25FQSxDQUFDQTtJQUVEM0IsT0FBY0EsYUFBYUEsQ0FBQ0EsRUFBbUNBLEVBQUVBLEVBQW1DQTtRQUNoRzRCLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLEVBQUVBLENBQUNBLE1BQU1BLEdBQUdBLEVBQUVBLENBQUNBLE1BQU1BLENBQUNBO0lBQ3BEQSxDQUFDQTtBQUNMNUIsQ0FBQ0E7QUFFRCxtQ0FBbUMsS0FBSztJQUdwQzZCLFlBQVlBLFFBQWdCQSxFQUFFQSxXQUFtQkEsRUFBRUEsTUFBY0EsRUFBRUEsU0FBaUJBLEVBQUVBLE1BQU1BLEVBQUVBLGFBQWFBO1FBQ3ZHQyxNQUFNQSxRQUFRQSxFQUFFQSxXQUFXQSxFQUFFQSxNQUFNQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQTtRQUNoREEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0E7UUFDckJBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLGFBQWFBLENBQUNBO0lBQ3ZDQSxDQUFDQTtBQUNMRCxDQUFDQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyogKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKlxuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBsaWNlbnNlOlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMCwgQWpheC5vcmcgQi5WLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICogICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqICAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgICAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogICAgICogTmVpdGhlciB0aGUgbmFtZSBvZiBBamF4Lm9yZyBCLlYuIG5vciB0aGVcbiAqICAgICAgIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gKiAgICAgICBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBBSkFYLk9SRyBCLlYuIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuICogTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICpcbiAqICoqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqICovXG5leHBvcnQgdmFyIGNvbXBhcmVQb2ludHMgPSBmdW5jdGlvbihwMTogeyByb3c6IG51bWJlcjsgY29sdW1uOiBudW1iZXIgfSwgcDI6IHsgcm93OiBudW1iZXI7IGNvbHVtbjogbnVtYmVyIH0pIHtcbiAgICByZXR1cm4gcDEucm93IC0gcDIucm93IHx8IHAxLmNvbHVtbiAtIHAyLmNvbHVtbjtcbn07XG4vKipcbiAqIFRoaXMgb2JqZWN0IGlzIHVzZWQgaW4gdmFyaW91cyBwbGFjZXMgdG8gaW5kaWNhdGUgYSByZWdpb24gd2l0aGluIHRoZSBlZGl0b3IuIFRvIGJldHRlciB2aXN1YWxpemUgaG93IHRoaXMgd29ya3MsIGltYWdpbmUgYSByZWN0YW5nbGUuIEVhY2ggcXVhZHJhbnQgb2YgdGhlIHJlY3RhbmdsZSBpcyBhbmFsb2d1cyB0byBhIHJhbmdlLCBhcyByYW5nZXMgY29udGFpbiBhIHN0YXJ0aW5nIHJvdyBhbmQgc3RhcnRpbmcgY29sdW1uLCBhbmQgYW4gZW5kaW5nIHJvdywgYW5kIGVuZGluZyBjb2x1bW4uXG4gKiBAY2xhc3MgUmFuZ2VcbiAqKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGBFZGl0b3JSYW5nZWAgb2JqZWN0IHdpdGggdGhlIGdpdmVuIHN0YXJ0aW5nIGFuZCBlbmRpbmcgcm93IGFuZCBjb2x1bW4gcG9pbnRzLlxuICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0Um93IFRoZSBzdGFydGluZyByb3dcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydENvbHVtbiBUaGUgc3RhcnRpbmcgY29sdW1uXG4gKiBAcGFyYW0ge051bWJlcn0gZW5kUm93IFRoZSBlbmRpbmcgcm93XG4gKiBAcGFyYW0ge051bWJlcn0gZW5kQ29sdW1uIFRoZSBlbmRpbmcgY29sdW1uXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiovXG5leHBvcnQgY2xhc3MgUmFuZ2Uge1xuICAgIHB1YmxpYyBzdGFydDogeyByb3c6IG51bWJlcjsgY29sdW1uOiBudW1iZXIgfTtcbiAgICBwdWJsaWMgZW5kOiB7IHJvdzogbnVtYmVyOyBjb2x1bW46IG51bWJlciB9O1xuICAgIHB1YmxpYyBjb2xsYXBzZUNoaWxkcmVuOiBudW1iZXI7XG4gICAgLy8gIHB1YmxpYyBjdXJzb3I6IFJhbmdlO1xuICAgIC8vICBwdWJsaWMgaXNCYWNrd2FyZHM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGNsYXNzIFJhbmdlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc3RhcnRSb3c6IG51bWJlciwgc3RhcnRDb2x1bW46IG51bWJlciwgZW5kUm93OiBudW1iZXIsIGVuZENvbHVtbjogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc3RhcnQgPSB7XG4gICAgICAgICAgICByb3c6IHN0YXJ0Um93LFxuICAgICAgICAgICAgY29sdW1uOiBzdGFydENvbHVtblxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZW5kID0ge1xuICAgICAgICAgICAgcm93OiBlbmRSb3csXG4gICAgICAgICAgICBjb2x1bW46IGVuZENvbHVtblxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiBhbmQgb25seSBpZiB0aGUgc3RhcnRpbmcgcm93IGFuZCBjb2x1bW4sIGFuZCBlbmRpbmcgcm93IGFuZCBjb2x1bW4sIGFyZSBlcXVpdmFsZW50IHRvIHRob3NlIGdpdmVuIGJ5IGByYW5nZWAuXG4gICAgICogQHBhcmFtIHtFZGl0b3JSYW5nZX0gcmFuZ2UgQSByYW5nZSB0byBjaGVjayBhZ2FpbnN0XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqKi9cbiAgICBpc0VxdWFsKHJhbmdlOiBSYW5nZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFydC5yb3cgPT09IHJhbmdlLnN0YXJ0LnJvdyAmJlxuICAgICAgICAgICAgdGhpcy5lbmQucm93ID09PSByYW5nZS5lbmQucm93ICYmXG4gICAgICAgICAgICB0aGlzLnN0YXJ0LmNvbHVtbiA9PT0gcmFuZ2Uuc3RhcnQuY29sdW1uICYmXG4gICAgICAgICAgICB0aGlzLmVuZC5jb2x1bW4gPT09IHJhbmdlLmVuZC5jb2x1bW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIHJhbmdlJ3Mgcm93IGFuZCBjb2x1bW4gaW5mb3JtYXRpb24sIGdpdmVuIGxpa2UgdGhpczpcbiAgICAgKiBgYGBcbiAgICAgKiAgICBbc3RhcnQucm93L3N0YXJ0LmNvbHVtbl0gLT4gW2VuZC5yb3cvZW5kLmNvbHVtbl1cbiAgICAgKiBgYGBcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICoqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gKFwiUmFuZ2U6IFtcIiArIHRoaXMuc3RhcnQucm93ICsgXCIvXCIgKyB0aGlzLnN0YXJ0LmNvbHVtbiArXG4gICAgICAgICAgICBcIl0gLT4gW1wiICsgdGhpcy5lbmQucm93ICsgXCIvXCIgKyB0aGlzLmVuZC5jb2x1bW4gKyBcIl1cIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHJvd2AgYW5kIGBjb2x1bW5gIHByb3ZpZGVkIGFyZSB3aXRoaW4gdGhlIGdpdmVuIHJhbmdlLiBUaGlzIGNhbiBiZXR0ZXIgYmUgZXhwcmVzc2VkIGFzIHJldHVybmluZyBgdHJ1ZWAgaWY6XG4gICAgICogYGBgamF2YXNjcmlwdFxuICAgICAqICAgIHRoaXMuc3RhcnQucm93IDw9IHJvdyA8PSB0aGlzLmVuZC5yb3cgJiZcbiAgICAgKiAgICB0aGlzLnN0YXJ0LmNvbHVtbiA8PSBjb2x1bW4gPD0gdGhpcy5lbmQuY29sdW1uXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJvdyBBIHJvdyB0byBjaGVjayBmb3JcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29sdW1uIEEgY29sdW1uIHRvIGNoZWNrIGZvclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqIEByZWxhdGVkIEVkaXRvclJhbmdlLmNvbXBhcmVcbiAgICAgKiovXG5cbiAgICBjb250YWlucyhyb3c6IG51bWJlciwgY29sdW1uOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZShyb3csIGNvbHVtbikgPT09IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZXMgYHRoaXNgIHJhbmdlIChBKSB3aXRoIGFub3RoZXIgcmFuZ2UgKEIpLlxuICAgICAqIEBwYXJhbSB7RWRpdG9yUmFuZ2V9IHJhbmdlIEEgcmFuZ2UgdG8gY29tcGFyZSB3aXRoXG4gICAgICpcbiAgICAgKiBAcmVsYXRlZCBFZGl0b3JSYW5nZS5jb21wYXJlXG4gICAgICogQHJldHVybnMge051bWJlcn0gVGhpcyBtZXRob2QgcmV0dXJucyBvbmUgb2YgdGhlIGZvbGxvd2luZyBudW1iZXJzOjxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiAqIGAtMmA6IChCKSBpcyBpbiBmcm9udCBvZiAoQSksIGFuZCBkb2Vzbid0IGludGVyc2VjdCB3aXRoIChBKTxici8+XG4gICAgICogKiBgLTFgOiAoQikgYmVnaW5zIGJlZm9yZSAoQSkgYnV0IGVuZHMgaW5zaWRlIG9mIChBKTxici8+XG4gICAgICogKiBgMGA6IChCKSBpcyBjb21wbGV0ZWx5IGluc2lkZSBvZiAoQSkgT1IgKEEpIGlzIGNvbXBsZXRlbHkgaW5zaWRlIG9mIChCKTxici8+XG4gICAgICogKiBgKzFgOiAoQikgYmVnaW5zIGluc2lkZSBvZiAoQSkgYnV0IGVuZHMgb3V0c2lkZSBvZiAoQSk8YnIvPlxuICAgICAqICogYCsyYDogKEIpIGlzIGFmdGVyIChBKSBhbmQgZG9lc24ndCBpbnRlcnNlY3Qgd2l0aCAoQSk8YnIvPlxuICAgICAqICogYDQyYDogRlRXIHN0YXRlOiAoQikgZW5kcyBpbiAoQSkgYnV0IHN0YXJ0cyBvdXRzaWRlIG9mIChBKVxuICAgICAqKi9cbiAgICBjb21wYXJlUmFuZ2UocmFuZ2U6IFJhbmdlKTogbnVtYmVyIHtcbiAgICAgICAgdmFyIGNtcDogbnVtYmVyXG4gICAgICAgIHZhciBlbmQgPSByYW5nZS5lbmQ7XG4gICAgICAgIHZhciBzdGFydCA9IHJhbmdlLnN0YXJ0O1xuXG4gICAgICAgIGNtcCA9IHRoaXMuY29tcGFyZShlbmQucm93LCBlbmQuY29sdW1uKTtcbiAgICAgICAgaWYgKGNtcCA9PT0gMSkge1xuICAgICAgICAgICAgY21wID0gdGhpcy5jb21wYXJlKHN0YXJ0LnJvdywgc3RhcnQuY29sdW1uKTtcbiAgICAgICAgICAgIGlmIChjbXAgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY21wID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIC0yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY21wID0gdGhpcy5jb21wYXJlKHN0YXJ0LnJvdywgc3RhcnQuY29sdW1uKTtcbiAgICAgICAgICAgIGlmIChjbXAgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY21wID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDQyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhlIHJvdyBhbmQgY29sdW1uIHBvaW50cyBvZiBgcGAgd2l0aCB0aGUgcm93IGFuZCBjb2x1bW4gcG9pbnRzIG9mIHRoZSBjYWxsaW5nIHJhbmdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFZGl0b3JSYW5nZX0gcCBBIHBvaW50IHRvIGNvbXBhcmUgd2l0aFxuICAgICAqXG4gICAgICogQHJlbGF0ZWQgRWRpdG9yUmFuZ2UuY29tcGFyZVxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoaXMgbWV0aG9kIHJldHVybnMgb25lIG9mIHRoZSBmb2xsb3dpbmcgbnVtYmVyczo8YnIvPlxuICAgICAqICogYDBgIGlmIHRoZSB0d28gcG9pbnRzIGFyZSBleGFjdGx5IGVxdWFsPGJyLz5cbiAgICAgKiAqIGAtMWAgaWYgYHAucm93YCBpcyBsZXNzIHRoZW4gdGhlIGNhbGxpbmcgcmFuZ2U8YnIvPlxuICAgICAqICogYDFgIGlmIGBwLnJvd2AgaXMgZ3JlYXRlciB0aGFuIHRoZSBjYWxsaW5nIHJhbmdlPGJyLz5cbiAgICAgKiA8YnIvPlxuICAgICAqIElmIHRoZSBzdGFydGluZyByb3cgb2YgdGhlIGNhbGxpbmcgcmFuZ2UgaXMgZXF1YWwgdG8gYHAucm93YCwgYW5kOjxici8+XG4gICAgICogKiBgcC5jb2x1bW5gIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgY2FsbGluZyByYW5nZSdzIHN0YXJ0aW5nIGNvbHVtbiwgdGhpcyByZXR1cm5zIGAwYDxici8+XG4gICAgICogKiBPdGhlcndpc2UsIGl0IHJldHVybnMgLTE8YnIvPlxuICAgICAqPGJyLz5cbiAgICAgKiBJZiB0aGUgZW5kaW5nIHJvdyBvZiB0aGUgY2FsbGluZyByYW5nZSBpcyBlcXVhbCB0byBgcC5yb3dgLCBhbmQ6PGJyLz5cbiAgICAgKiAqIGBwLmNvbHVtbmAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBjYWxsaW5nIHJhbmdlJ3MgZW5kaW5nIGNvbHVtbiwgdGhpcyByZXR1cm5zIGAwYDxici8+XG4gICAgICogKiBPdGhlcndpc2UsIGl0IHJldHVybnMgMTxici8+XG4gICAgICoqL1xuICAgIGNvbXBhcmVQb2ludChwOiB7IHJvdzogbnVtYmVyOyBjb2x1bW46IG51bWJlciB9KTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZShwLnJvdywgcC5jb2x1bW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB0aGUgc3RhcnQgYW5kIGVuZCBwb2ludHMgb2YgYHJhbmdlYCBhbmQgY29tcGFyZXMgdGhlbSB0byB0aGUgY2FsbGluZyByYW5nZS4gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGByYW5nZWAgaXMgY29udGFpbmVkIHdpdGhpbiB0aGUgY2FsbGVyJ3MgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtFZGl0b3JSYW5nZX0gcmFuZ2UgQSByYW5nZSB0byBjb21wYXJlIHdpdGhcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqIEByZWxhdGVkIEVkaXRvclJhbmdlLmNvbXBhcmVQb2ludFxuICAgICAqKi9cbiAgICBjb250YWluc1JhbmdlKHJhbmdlOiBSYW5nZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlUG9pbnQocmFuZ2Uuc3RhcnQpID09PSAwICYmIHRoaXMuY29tcGFyZVBvaW50KHJhbmdlLmVuZCkgPT09IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgcGFzc2VkIGluIGByYW5nZWAgaW50ZXJzZWN0cyB3aXRoIHRoZSBvbmUgY2FsbGluZyB0aGlzIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0ge0VkaXRvclJhbmdlfSByYW5nZSBBIHJhbmdlIHRvIGNvbXBhcmUgd2l0aFxuICAgICAqXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICoqL1xuICAgIGludGVyc2VjdHMocmFuZ2U6IFJhbmdlKSB7XG4gICAgICAgIHZhciBjbXAgPSB0aGlzLmNvbXBhcmVSYW5nZShyYW5nZSk7XG4gICAgICAgIHJldHVybiAoY21wID09PSAtMSB8fCBjbXAgPT09IDAgfHwgY21wID09PSAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgY2FsbGVyJ3MgZW5kaW5nIHJvdyBwb2ludCBpcyB0aGUgc2FtZSBhcyBgcm93YCwgYW5kIGlmIHRoZSBjYWxsZXIncyBlbmRpbmcgY29sdW1uIGlzIHRoZSBzYW1lIGFzIGBjb2x1bW5gLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByb3cgQSByb3cgcG9pbnQgdG8gY29tcGFyZSB3aXRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbHVtbiBBIGNvbHVtbiBwb2ludCB0byBjb21wYXJlIHdpdGhcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqKi9cbiAgICBpc0VuZChyb3c6IG51bWJlciwgY29sdW1uOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5kLnJvdyA9PT0gcm93ICYmIHRoaXMuZW5kLmNvbHVtbiA9PT0gY29sdW1uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBjYWxsZXIncyBzdGFydGluZyByb3cgcG9pbnQgaXMgdGhlIHNhbWUgYXMgYHJvd2AsIGFuZCBpZiB0aGUgY2FsbGVyJ3Mgc3RhcnRpbmcgY29sdW1uIGlzIHRoZSBzYW1lIGFzIGBjb2x1bW5gLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByb3cgQSByb3cgcG9pbnQgdG8gY29tcGFyZSB3aXRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbHVtbiBBIGNvbHVtbiBwb2ludCB0byBjb21wYXJlIHdpdGhcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqKi9cbiAgICBpc1N0YXJ0KHJvdzogbnVtYmVyLCBjb2x1bW46IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFydC5yb3cgPT09IHJvdyAmJiB0aGlzLnN0YXJ0LmNvbHVtbiA9PT0gY29sdW1uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YXJ0aW5nIHJvdyBhbmQgY29sdW1uIGZvciB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHJvdyB7bnVtYmVyfSBBIHJvdyBwb2ludCB0byBzZXRcbiAgICAgKiBAcGFyYW0gY29sdW1uIHtudW1iZXJ9IEEgY29sdW1uIHBvaW50IHRvIHNldFxuICAgICAqXG4gICAgICoqL1xuICAgIHNldFN0YXJ0KHJvdzogbnVtYmVyLCBjb2x1bW46IG51bWJlcik6IHZvaWQge1xuICAgICAgICBpZiAodHlwZW9mIHJvdyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2sgdW50aWwgY29kZSBpcyBjb21wbGV0ZWx5IHR5cGVkLlxuICAgICAgICAgICAgdGhpcy5zdGFydC5jb2x1bW4gPSByb3dbJ2NvbHVtbiddO1xuICAgICAgICAgICAgdGhpcy5zdGFydC5yb3cgPSByb3dbJ3JvdyddO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGFydC5yb3cgPSByb3c7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0LmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YXJ0aW5nIHJvdyBhbmQgY29sdW1uIGZvciB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHJvdyB7bnVtYmVyfSBBIHJvdyBwb2ludCB0byBzZXRcbiAgICAgKiBAcGFyYW0gY29sdW1uIHtudW1iZXJ9IEEgY29sdW1uIHBvaW50IHRvIHNldFxuICAgICAqXG4gICAgICoqL1xuICAgIHNldEVuZChyb3c6IG51bWJlciwgY29sdW1uOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKHR5cGVvZiByb3cgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrIHVudGlsIGNvZGUgaXMgY29tcGxldGVseSB0eXBlZC5cbiAgICAgICAgICAgIHRoaXMuZW5kLmNvbHVtbiA9IHJvd1snY29sdW1uJ107XG4gICAgICAgICAgICB0aGlzLmVuZC5yb3cgPSByb3dbJ3JvdyddO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbmQucm93ID0gcm93O1xuICAgICAgICAgICAgdGhpcy5lbmQuY29sdW1uID0gY29sdW1uO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGByb3dgIGFuZCBgY29sdW1uYCBhcmUgd2l0aGluIHRoZSBnaXZlbiByYW5nZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcm93IEEgcm93IHBvaW50IHRvIGNvbXBhcmUgd2l0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb2x1bW4gQSBjb2x1bW4gcG9pbnQgdG8gY29tcGFyZSB3aXRoXG4gICAgICpcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqIEByZWxhdGVkIEVkaXRvclJhbmdlLmNvbXBhcmVcbiAgICAgKiovXG4gICAgaW5zaWRlKHJvdzogbnVtYmVyLCBjb2x1bW46IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5jb21wYXJlKHJvdywgY29sdW1uKSA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNFbmQocm93LCBjb2x1bW4pIHx8IHRoaXMuaXNTdGFydChyb3csIGNvbHVtbikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGByb3dgIGFuZCBgY29sdW1uYCBhcmUgd2l0aGluIHRoZSBnaXZlbiByYW5nZSdzIHN0YXJ0aW5nIHBvaW50cy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcm93IEEgcm93IHBvaW50IHRvIGNvbXBhcmUgd2l0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb2x1bW4gQSBjb2x1bW4gcG9pbnQgdG8gY29tcGFyZSB3aXRoXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKiBAcmVsYXRlZCBFZGl0b3JSYW5nZS5jb21wYXJlXG4gICAgICoqL1xuICAgIGluc2lkZVN0YXJ0KHJvdzogbnVtYmVyLCBjb2x1bW46IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5jb21wYXJlKHJvdywgY29sdW1uKSA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNFbmQocm93LCBjb2x1bW4pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBgcm93YCBhbmQgYGNvbHVtbmAgYXJlIHdpdGhpbiB0aGUgZ2l2ZW4gcmFuZ2UncyBlbmRpbmcgcG9pbnRzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByb3cgQSByb3cgcG9pbnQgdG8gY29tcGFyZSB3aXRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvbHVtbiBBIGNvbHVtbiBwb2ludCB0byBjb21wYXJlIHdpdGhcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqIEByZWxhdGVkIEVkaXRvclJhbmdlLmNvbXBhcmVcbiAgICAgKlxuICAgICAqKi9cbiAgICBpbnNpZGVFbmQocm93OiBudW1iZXIsIGNvbHVtbjogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLmNvbXBhcmUocm93LCBjb2x1bW4pID09PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1N0YXJ0KHJvdywgY29sdW1uKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhlIHJvdyBhbmQgY29sdW1uIHBvaW50cyB3aXRoIHRoZSByb3cgYW5kIGNvbHVtbiBwb2ludHMgb2YgdGhlIGNhbGxpbmcgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJvdyBBIHJvdyBwb2ludCB0byBjb21wYXJlIHdpdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29sdW1uIEEgY29sdW1uIHBvaW50IHRvIGNvbXBhcmUgd2l0aFxuICAgICAqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGlzIG1ldGhvZCByZXR1cm5zIG9uZSBvZiB0aGUgZm9sbG93aW5nIG51bWJlcnM6PGJyLz5cbiAgICAgKiBgMGAgaWYgdGhlIHR3byBwb2ludHMgYXJlIGV4YWN0bHkgZXF1YWwgPGJyLz5cbiAgICAgKiBgLTFgIGlmIGBwLnJvd2AgaXMgbGVzcyB0aGVuIHRoZSBjYWxsaW5nIHJhbmdlIDxici8+XG4gICAgICogYDFgIGlmIGBwLnJvd2AgaXMgZ3JlYXRlciB0aGFuIHRoZSBjYWxsaW5nIHJhbmdlIDxici8+XG4gICAgICogIDxici8+XG4gICAgICogSWYgdGhlIHN0YXJ0aW5nIHJvdyBvZiB0aGUgY2FsbGluZyByYW5nZSBpcyBlcXVhbCB0byBgcC5yb3dgLCBhbmQ6IDxici8+XG4gICAgICogYHAuY29sdW1uYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGNhbGxpbmcgcmFuZ2UncyBzdGFydGluZyBjb2x1bW4sIHRoaXMgcmV0dXJucyBgMGA8YnIvPlxuICAgICAqIE90aGVyd2lzZSwgaXQgcmV0dXJucyAtMTxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiBJZiB0aGUgZW5kaW5nIHJvdyBvZiB0aGUgY2FsbGluZyByYW5nZSBpcyBlcXVhbCB0byBgcC5yb3dgLCBhbmQ6IDxici8+XG4gICAgICogYHAuY29sdW1uYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGNhbGxpbmcgcmFuZ2UncyBlbmRpbmcgY29sdW1uLCB0aGlzIHJldHVybnMgYDBgIDxici8+XG4gICAgICogT3RoZXJ3aXNlLCBpdCByZXR1cm5zIDFcbiAgICAgKiovXG4gICAgY29tcGFyZShyb3c6IG51bWJlciwgY29sdW1uOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBpZiAoIXRoaXMuaXNNdWx0aUxpbmUoKSkge1xuICAgICAgICAgICAgaWYgKHJvdyA9PT0gdGhpcy5zdGFydC5yb3cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sdW1uIDwgdGhpcy5zdGFydC5jb2x1bW4gPyAtMSA6IChjb2x1bW4gPiB0aGlzLmVuZC5jb2x1bW4gPyAxIDogMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocm93IDwgdGhpcy5zdGFydC5yb3cpXG4gICAgICAgICAgICByZXR1cm4gLTE7XG5cbiAgICAgICAgaWYgKHJvdyA+IHRoaXMuZW5kLnJvdylcbiAgICAgICAgICAgIHJldHVybiAxO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXJ0LnJvdyA9PT0gcm93KVxuICAgICAgICAgICAgcmV0dXJuIGNvbHVtbiA+PSB0aGlzLnN0YXJ0LmNvbHVtbiA/IDAgOiAtMTtcblxuICAgICAgICBpZiAodGhpcy5lbmQucm93ID09PSByb3cpXG4gICAgICAgICAgICByZXR1cm4gY29sdW1uIDw9IHRoaXMuZW5kLmNvbHVtbiA/IDAgOiAxO1xuXG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB0aGUgcm93IGFuZCBjb2x1bW4gcG9pbnRzIHdpdGggdGhlIHJvdyBhbmQgY29sdW1uIHBvaW50cyBvZiB0aGUgY2FsbGluZyByYW5nZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcm93IEEgcm93IHBvaW50IHRvIGNvbXBhcmUgd2l0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb2x1bW4gQSBjb2x1bW4gcG9pbnQgdG8gY29tcGFyZSB3aXRoXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGlzIG1ldGhvZCByZXR1cm5zIG9uZSBvZiB0aGUgZm9sbG93aW5nIG51bWJlcnM6PGJyLz5cbiAgICAgKiA8YnIvPlxuICAgICAqIGAwYCBpZiB0aGUgdHdvIHBvaW50cyBhcmUgZXhhY3RseSBlcXVhbDxici8+XG4gICAgICogYC0xYCBpZiBgcC5yb3dgIGlzIGxlc3MgdGhlbiB0aGUgY2FsbGluZyByYW5nZTxici8+XG4gICAgICogYDFgIGlmIGBwLnJvd2AgaXMgZ3JlYXRlciB0aGFuIHRoZSBjYWxsaW5nIHJhbmdlLCBvciBpZiBgaXNTdGFydGAgaXMgYHRydWVgLjxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiBJZiB0aGUgc3RhcnRpbmcgcm93IG9mIHRoZSBjYWxsaW5nIHJhbmdlIGlzIGVxdWFsIHRvIGBwLnJvd2AsIGFuZDo8YnIvPlxuICAgICAqIGBwLmNvbHVtbmAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBjYWxsaW5nIHJhbmdlJ3Mgc3RhcnRpbmcgY29sdW1uLCB0aGlzIHJldHVybnMgYDBgPGJyLz5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHJldHVybnMgLTE8YnIvPlxuICAgICAqIDxici8+XG4gICAgICogSWYgdGhlIGVuZGluZyByb3cgb2YgdGhlIGNhbGxpbmcgcmFuZ2UgaXMgZXF1YWwgdG8gYHAucm93YCwgYW5kOjxici8+XG4gICAgICogYHAuY29sdW1uYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGNhbGxpbmcgcmFuZ2UncyBlbmRpbmcgY29sdW1uLCB0aGlzIHJldHVybnMgYDBgPGJyLz5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHJldHVybnMgMVxuICAgICAqXG4gICAgICoqL1xuICAgIGNvbXBhcmVTdGFydChyb3c6IG51bWJlciwgY29sdW1uOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBpZiAodGhpcy5zdGFydC5yb3cgPT09IHJvdyAmJiB0aGlzLnN0YXJ0LmNvbHVtbiA9PT0gY29sdW1uKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlKHJvdywgY29sdW1uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyB0aGUgcm93IGFuZCBjb2x1bW4gcG9pbnRzIHdpdGggdGhlIHJvdyBhbmQgY29sdW1uIHBvaW50cyBvZiB0aGUgY2FsbGluZyByYW5nZS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcm93IEEgcm93IHBvaW50IHRvIGNvbXBhcmUgd2l0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb2x1bW4gQSBjb2x1bW4gcG9pbnQgdG8gY29tcGFyZSB3aXRoXG4gICAgICpcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoaXMgbWV0aG9kIHJldHVybnMgb25lIG9mIHRoZSBmb2xsb3dpbmcgbnVtYmVyczo8YnIvPlxuICAgICAqIGAwYCBpZiB0aGUgdHdvIHBvaW50cyBhcmUgZXhhY3RseSBlcXVhbDxici8+XG4gICAgICogYC0xYCBpZiBgcC5yb3dgIGlzIGxlc3MgdGhlbiB0aGUgY2FsbGluZyByYW5nZTxici8+XG4gICAgICogYDFgIGlmIGBwLnJvd2AgaXMgZ3JlYXRlciB0aGFuIHRoZSBjYWxsaW5nIHJhbmdlLCBvciBpZiBgaXNFbmRgIGlzIGB0cnVlLjxici8+XG4gICAgICogPGJyLz5cbiAgICAgKiBJZiB0aGUgc3RhcnRpbmcgcm93IG9mIHRoZSBjYWxsaW5nIHJhbmdlIGlzIGVxdWFsIHRvIGBwLnJvd2AsIGFuZDo8YnIvPlxuICAgICAqIGBwLmNvbHVtbmAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBjYWxsaW5nIHJhbmdlJ3Mgc3RhcnRpbmcgY29sdW1uLCB0aGlzIHJldHVybnMgYDBgPGJyLz5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHJldHVybnMgLTE8YnIvPlxuICAgICAqPGJyLz5cbiAgICAgKiBJZiB0aGUgZW5kaW5nIHJvdyBvZiB0aGUgY2FsbGluZyByYW5nZSBpcyBlcXVhbCB0byBgcC5yb3dgLCBhbmQ6PGJyLz5cbiAgICAgKiBgcC5jb2x1bW5gIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgY2FsbGluZyByYW5nZSdzIGVuZGluZyBjb2x1bW4sIHRoaXMgcmV0dXJucyBgMGA8YnIvPlxuICAgICAqIE90aGVyd2lzZSwgaXQgcmV0dXJucyAxXG4gICAgICovXG4gICAgY29tcGFyZUVuZChyb3c6IG51bWJlciwgY29sdW1uOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBpZiAodGhpcy5lbmQucm93ID09PSByb3cgJiYgdGhpcy5lbmQuY29sdW1uID09PSBjb2x1bW4pIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZShyb3csIGNvbHVtbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhlIHJvdyBhbmQgY29sdW1uIHBvaW50cyB3aXRoIHRoZSByb3cgYW5kIGNvbHVtbiBwb2ludHMgb2YgdGhlIGNhbGxpbmcgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJvdyBBIHJvdyBwb2ludCB0byBjb21wYXJlIHdpdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29sdW1uIEEgY29sdW1uIHBvaW50IHRvIGNvbXBhcmUgd2l0aFxuICAgICAqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGlzIG1ldGhvZCByZXR1cm5zIG9uZSBvZiB0aGUgZm9sbG93aW5nIG51bWJlcnM6PGJyLz5cbiAgICAgKiAqIGAxYCBpZiB0aGUgZW5kaW5nIHJvdyBvZiB0aGUgY2FsbGluZyByYW5nZSBpcyBlcXVhbCB0byBgcm93YCwgYW5kIHRoZSBlbmRpbmcgY29sdW1uIG9mIHRoZSBjYWxsaW5nIHJhbmdlIGlzIGVxdWFsIHRvIGBjb2x1bW5gPGJyLz5cbiAgICAgKiAqIGAtMWAgaWYgdGhlIHN0YXJ0aW5nIHJvdyBvZiB0aGUgY2FsbGluZyByYW5nZSBpcyBlcXVhbCB0byBgcm93YCwgYW5kIHRoZSBzdGFydGluZyBjb2x1bW4gb2YgdGhlIGNhbGxpbmcgcmFuZ2UgaXMgZXF1YWwgdG8gYGNvbHVtbmA8YnIvPlxuICAgICAqIDxici8+XG4gICAgICogT3RoZXJ3aXNlLCBpdCByZXR1cm5zIHRoZSB2YWx1ZSBhZnRlciBjYWxsaW5nIFtbRWRpdG9yUmFuZ2UuY29tcGFyZSBgY29tcGFyZSgpYF1dLlxuICAgICAqXG4gICAgICoqL1xuICAgIGNvbXBhcmVJbnNpZGUocm93OiBudW1iZXIsIGNvbHVtbjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMuZW5kLnJvdyA9PT0gcm93ICYmIHRoaXMuZW5kLmNvbHVtbiA9PT0gY29sdW1uKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXJ0LnJvdyA9PT0gcm93ICYmIHRoaXMuc3RhcnQuY29sdW1uID09PSBjb2x1bW4pIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmUocm93LCBjb2x1bW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcGFydCBvZiB0aGUgY3VycmVudCBgRWRpdG9yUmFuZ2VgIHRoYXQgb2NjdXJzIHdpdGhpbiB0aGUgYm91bmRhcmllcyBvZiBgZmlyc3RSb3dgIGFuZCBgbGFzdFJvd2AgYXMgYSBuZXcgYEVkaXRvclJhbmdlYCBvYmplY3QuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGZpcnN0Um93IFRoZSBzdGFydGluZyByb3dcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGFzdFJvdyBUaGUgZW5kaW5nIHJvd1xuICAgICAqIEByZXR1cm5zIHtFZGl0b3JSYW5nZX1cbiAgICAqKi9cbiAgICBjbGlwUm93cyhmaXJzdFJvdzogbnVtYmVyLCBsYXN0Um93OiBudW1iZXIpOiBSYW5nZSB7XG4gICAgICAgIHZhciBzdGFydDogeyByb3c6IG51bWJlcjsgY29sdW1uOiBudW1iZXIgfTtcbiAgICAgICAgdmFyIGVuZDogeyByb3c6IG51bWJlcjsgY29sdW1uOiBudW1iZXIgfTtcbiAgICAgICAgaWYgKHRoaXMuZW5kLnJvdyA+IGxhc3RSb3cpXG4gICAgICAgICAgICBlbmQgPSB7IHJvdzogbGFzdFJvdyArIDEsIGNvbHVtbjogMCB9O1xuICAgICAgICBlbHNlIGlmICh0aGlzLmVuZC5yb3cgPCBmaXJzdFJvdylcbiAgICAgICAgICAgIGVuZCA9IHsgcm93OiBmaXJzdFJvdywgY29sdW1uOiAwIH07XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhcnQucm93ID4gbGFzdFJvdylcbiAgICAgICAgICAgIHN0YXJ0ID0geyByb3c6IGxhc3RSb3cgKyAxLCBjb2x1bW46IDAgfTtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5zdGFydC5yb3cgPCBmaXJzdFJvdylcbiAgICAgICAgICAgIHN0YXJ0ID0geyByb3c6IGZpcnN0Um93LCBjb2x1bW46IDAgfTtcblxuICAgICAgICByZXR1cm4gUmFuZ2UuZnJvbVBvaW50cyhzdGFydCB8fCB0aGlzLnN0YXJ0LCBlbmQgfHwgdGhpcy5lbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIHJvdyBhbmQgY29sdW1uIHBvaW50cyBmb3IgdGhlIGNhbGxpbmcgcmFuZ2UgZm9yIGJvdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgcG9pbnRzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByb3cgQSBuZXcgcm93IHRvIGV4dGVuZCB0b1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb2x1bW4gQSBuZXcgY29sdW1uIHRvIGV4dGVuZCB0b1xuICAgICAqIEByZXR1cm5zIHtFZGl0b3JSYW5nZX0gVGhlIG9yaWdpbmFsIHJhbmdlIHdpdGggdGhlIG5ldyByb3dcbiAgICAqKi9cbiAgICBleHRlbmQocm93OiBudW1iZXIsIGNvbHVtbjogbnVtYmVyKTogUmFuZ2Uge1xuICAgICAgICB2YXIgY21wID0gdGhpcy5jb21wYXJlKHJvdywgY29sdW1uKTtcblxuICAgICAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjbXAgPT09IC0xKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSB7IHJvdzogcm93LCBjb2x1bW46IGNvbHVtbiB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGVuZCA9IHsgcm93OiByb3csIGNvbHVtbjogY29sdW1uIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJhbmdlLmZyb21Qb2ludHMoc3RhcnQgfHwgdGhpcy5zdGFydCwgZW5kIHx8IHRoaXMuZW5kKTtcbiAgICB9XG5cbiAgICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuc3RhcnQucm93ID09PSB0aGlzLmVuZC5yb3cgJiYgdGhpcy5zdGFydC5jb2x1bW4gPT09IHRoaXMuZW5kLmNvbHVtbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcmFuZ2Ugc3BhbnMgYWNyb3NzIG11bHRpcGxlIGxpbmVzLlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICoqL1xuICAgIGlzTXVsdGlMaW5lKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuc3RhcnQucm93ICE9PSB0aGlzLmVuZC5yb3cpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogUmV0dXJucyBhIGR1cGxpY2F0ZSBvZiB0aGUgY2FsbGluZyByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7RWRpdG9yUmFuZ2V9XG4gICAgKiovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBSYW5nZS5mcm9tUG9pbnRzKHRoaXMuc3RhcnQsIHRoaXMuZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIFJldHVybnMgYSByYW5nZSBjb250YWluaW5nIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHJvd3Mgb2YgdGhlIG9yaWdpbmFsIHJhbmdlLCBidXQgd2l0aCBhIGNvbHVtbiB2YWx1ZSBvZiBgMGAuXG4gICAgICogQHJldHVybnMge0VkaXRvclJhbmdlfVxuICAgICoqL1xuICAgIGNvbGxhcHNlUm93cygpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5kLmNvbHVtbiA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2UodGhpcy5zdGFydC5yb3csIDAsIE1hdGgubWF4KHRoaXMuc3RhcnQucm93LCB0aGlzLmVuZC5yb3cgLSAxKSwgMClcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSYW5nZSh0aGlzLnN0YXJ0LnJvdywgMCwgdGhpcy5lbmQucm93LCAwKVxuICAgIH1cblxuICAgIC8qIGV4cGVyaW1lbnRhbCAqL1xuICAgIG1vdmVCeShyb3c6IG51bWJlciwgY29sdW1uOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zdGFydC5yb3cgKz0gcm93O1xuICAgICAgICB0aGlzLnN0YXJ0LmNvbHVtbiArPSBjb2x1bW47XG4gICAgICAgIHRoaXMuZW5kLnJvdyArPSByb3c7XG4gICAgICAgIHRoaXMuZW5kLmNvbHVtbiArPSBjb2x1bW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIG5ldyBgRWRpdG9yUmFuZ2VgIGJhc2VkIG9uIHRoZSByb3cgYW5kIGNvbHVtbiBvZiB0aGUgZ2l2ZW4gcGFyYW1ldGVycy5cbiAgICAgKiBAcGFyYW0ge0VkaXRvclJhbmdlfSBzdGFydCBBIHN0YXJ0aW5nIHBvaW50IHRvIHVzZVxuICAgICAqIEBwYXJhbSB7RWRpdG9yUmFuZ2V9IGVuZCBBbiBlbmRpbmcgcG9pbnQgdG8gdXNlXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7RWRpdG9yUmFuZ2V9XG4gICAgKiovXG4gICAgcHVibGljIHN0YXRpYyBmcm9tUG9pbnRzKHN0YXJ0OiB7IHJvdzogbnVtYmVyOyBjb2x1bW46IG51bWJlciB9LCBlbmQ6IHsgcm93OiBudW1iZXI7IGNvbHVtbjogbnVtYmVyIH0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydC5yb3csIHN0YXJ0LmNvbHVtbiwgZW5kLnJvdywgZW5kLmNvbHVtbik7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjb21wYXJlUG9pbnRzKHAxOiB7IHJvdzogbnVtYmVyOyBjb2x1bW46IG51bWJlciB9LCBwMjogeyByb3c6IG51bWJlcjsgY29sdW1uOiBudW1iZXIgfSkge1xuICAgICAgICByZXR1cm4gcDEucm93IC0gcDIucm93IHx8IHAxLmNvbHVtbiAtIHAyLmNvbHVtbjtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPcmllbnRlZFJhbmdlIGV4dGVuZHMgUmFuZ2Uge1xuICAgIHB1YmxpYyBjdXJzb3I7XG4gICAgcHVibGljIGRlc2lyZWRDb2x1bW47XG4gICAgY29uc3RydWN0b3Ioc3RhcnRSb3c6IG51bWJlciwgc3RhcnRDb2x1bW46IG51bWJlciwgZW5kUm93OiBudW1iZXIsIGVuZENvbHVtbjogbnVtYmVyLCBjdXJzb3IsIGRlc2lyZWRDb2x1bW4pIHtcbiAgICAgICAgc3VwZXIoc3RhcnRSb3csIHN0YXJ0Q29sdW1uLCBlbmRSb3csIGVuZENvbHVtbik7XG4gICAgICAgIHRoaXMuY3Vyc29yID0gY3Vyc29yO1xuICAgICAgICB0aGlzLmRlc2lyZWRDb2x1bW4gPSBkZXNpcmVkQ29sdW1uO1xuICAgIH1cbn1cbiJdfQ==