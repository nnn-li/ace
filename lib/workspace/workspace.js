import WorkerClient from '../worker/WorkerClient';
import { EVENT_NAME_COMPLETIONS } from './workspace_protocol';
export var workspace = function () {
    var workerProxy = new WorkerClient('ace/workspace/workspace_worker');
    var callbacks = {};
    var callbackId = 1;
    workerProxy.on("initAfter", function (event) {
    });
    workerProxy.on("fileNames", function (response) {
        var data = response.data;
        var names = data.names;
        var id = data.callbackId;
        var callback = callbacks[id];
        delete callbacks[id];
        callback(null, names);
    });
    workerProxy.on("syntaxErrors", function (response) {
        var data = response.data;
        var errors = data.errors;
        var id = data.callbackId;
        var callback = callbacks[id];
        delete callbacks[id];
        callback(null, errors);
    });
    workerProxy.on("semanticErrors", function (response) {
        var data = response.data;
        var errors = data.errors;
        var id = data.callbackId;
        var callback = callbacks[id];
        delete callbacks[id];
        callback(null, errors);
    });
    workerProxy.on(EVENT_NAME_COMPLETIONS, function (response) {
        var data = response.data;
        var id = data.callbackId;
        var callback = callbacks[id];
        delete callbacks[id];
        if ('err' in data) {
            callback(data.err);
        }
        else {
            callback(null, data.completions);
        }
    });
    workerProxy.on("typeAtDocumentPosition", function (response) {
        doCallback(response.data);
    });
    workerProxy.on("outputFiles", function (response) {
        doCallback(response.data);
    });
    workerProxy.init('ace/workspace/workspace_worker', 'WorkspaceWorker');
    function doCallback(data) {
        var info = data.results;
        var id = data.callbackId;
        var callback = callbacks[id];
        delete callbacks[id];
        if (data.err) {
            callback(data.err);
        }
        else {
            callback(null, data.results);
        }
    }
    function ensureScript(fileName, content) {
        var message = {
            data: { 'fileName': fileName, 'content': content.replace(/\r\n?/g, '\n') }
        };
        workerProxy.emit("ensureScript", message);
    }
    function editScript(fileName, start, end, text) {
        var message = {
            data: { fileName: fileName, start: start, end: end, text: text }
        };
        workerProxy.emit("editScript", message);
    }
    function removeScript(fileName) {
        workerProxy.emit("removeScript", { data: { 'fileName': fileName } });
    }
    function getFileNames(callback) {
        var id = callbackId++;
        callbacks[id] = callback;
        var message = { data: { callbackId: id } };
        workerProxy.emit("getFileNames", message);
    }
    function getSyntaxErrors(fileName, callback) {
        var id = callbackId++;
        callbacks[id] = callback;
        var message = { data: { fileName: fileName, callbackId: id } };
        workerProxy.emit("getSyntaxErrors", message);
    }
    function getSemanticErrors(fileName, callback) {
        var id = callbackId++;
        callbacks[id] = callback;
        var message = { data: { fileName: fileName, callbackId: id } };
        workerProxy.emit("getSemanticErrors", message);
    }
    function getCompletionsAtPosition(fileName, position, memberMode, callback) {
        var id = callbackId++;
        callbacks[id] = callback;
        var message = { data: { fileName: fileName, position: position, memberMode: memberMode, callbackId: id } };
        workerProxy.emit("getCompletionsAtPosition", message);
    }
    function getTypeAtDocumentPosition(fileName, documentPosition, callback) {
        var id = callbackId++;
        callbacks[id] = callback;
        var message = { data: { fileName: fileName, documentPosition: documentPosition, callbackId: id } };
        workerProxy.emit("getTypeAtDocumentPosition", message);
    }
    function getOutputFiles(fileName, callback) {
        var id = callbackId++;
        callbacks[id] = callback;
        var message = { data: { fileName: fileName, callbackId: id } };
        workerProxy.emit("getOutputFiles", message);
    }
    var that = {
        ensureScript: ensureScript,
        editScript: editScript,
        removeScript: removeScript,
        getFileNames: getFileNames,
        getSyntaxErrors: getSyntaxErrors,
        getSemanticErrors: getSemanticErrors,
        getCompletionsAtPosition: getCompletionsAtPosition,
        getTypeAtDocumentPosition: getTypeAtDocumentPosition,
        getOutputFiles: getOutputFiles
    };
    return that;
};
//# sourceMappingURL=data:application/json;base64,