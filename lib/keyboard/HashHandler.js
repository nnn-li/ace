import { FUNCTION_KEYS, KEY_MODS } from "../lib/keys";
import keyCodes from "../lib/keys";
import { isMac } from "../lib/useragent";
export default class HashHandler {
    constructor(config, platform) {
        this.platform = platform || (isMac ? "mac" : "win");
        this.commands = {};
        this.commandKeyBinding = {};
        this.addCommands(config);
    }
    addCommand(command) {
        if (this.commands[command.name]) {
            this.removeCommand(command);
        }
        this.commands[command.name] = command;
        if (command.bindKey)
            this._buildKeyHash(command);
    }
    removeCommand(command) {
        var name = (typeof command === 'string' ? command : command.name);
        command = this.commands[name];
        delete this.commands[name];
        var ckb = this.commandKeyBinding;
        for (var hashId in ckb) {
            for (var key in ckb[hashId]) {
                if (ckb[hashId][key] == command)
                    delete ckb[hashId][key];
            }
        }
    }
    bindKey(key, command) {
        var self = this;
        if (!key)
            return;
        if (typeof command === "function") {
            this.addCommand({ exec: command, bindKey: key, name: command.name || key });
            return;
        }
        var ckb = this.commandKeyBinding;
        key.split("|").forEach(function (keyPart) {
            var binding = self.parseKeys(keyPart);
            var hashId = binding.hashId;
            (ckb[hashId] || (ckb[hashId] = {}))[binding.key] = command;
        }, self);
    }
    addCommands(commands) {
        commands && Object.keys(commands).forEach(function (name) {
            var command = commands[name];
            if (!command) {
                return;
            }
            if (typeof command === "string") {
                return this.bindKey(command, name);
            }
            if (typeof command === "function") {
                command = { exec: command };
            }
            if (typeof command !== "object") {
                return;
            }
            if (!command.name) {
                command.name = name;
            }
            this.addCommand(command);
        }, this);
    }
    removeCommands(commands) {
        Object.keys(commands).forEach(function (name) {
            this.removeCommand(commands[name]);
        }, this);
    }
    bindKeys(keyList) {
        var self = this;
        Object.keys(keyList).forEach(function (key) {
            self.bindKey(key, keyList[key]);
        }, self);
    }
    _buildKeyHash(command) {
        var binding = command.bindKey;
        if (!binding)
            return;
        var key = typeof binding == "string" ? binding : binding[this.platform];
        this.bindKey(key, command);
    }
    parseKeys(keys) {
        if (keys.indexOf(" ") != -1)
            keys = keys.split(/\s+/).pop();
        var parts = keys.toLowerCase().split(/[\-\+]([\-\+])?/).filter(function (x) { return x; });
        var key = parts.pop();
        var keyCode = keyCodes[key];
        if (FUNCTION_KEYS[keyCode])
            key = FUNCTION_KEYS[keyCode].toLowerCase();
        else if (!parts.length)
            return { key: key, hashId: -1 };
        else if (parts.length == 1 && parts[0] == "shift")
            return { key: key.toUpperCase(), hashId: -1 };
        var hashId = 0;
        for (var i = parts.length; i--;) {
            var modifier = KEY_MODS[parts[i]];
            if (modifier === null) {
                throw new Error("invalid modifier " + parts[i] + " in " + keys);
            }
            hashId |= modifier;
        }
        return { key: key, hashId: hashId };
    }
    findKeyCommand(hashId, keyString) {
        var ckbr = this.commandKeyBinding;
        return ckbr[hashId] && ckbr[hashId][keyString];
    }
    handleKeyboard(dataUnused, hashId, keyString, keyCodeUnused, e) {
        var response = {
            command: this.findKeyCommand(hashId, keyString)
        };
        return response;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGFzaEhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMva2V5Ym9hcmQvSGFzaEhhbmRsZXIudHMiXSwibmFtZXMiOlsiSGFzaEhhbmRsZXIiLCJIYXNoSGFuZGxlci5jb25zdHJ1Y3RvciIsIkhhc2hIYW5kbGVyLmFkZENvbW1hbmQiLCJIYXNoSGFuZGxlci5yZW1vdmVDb21tYW5kIiwiSGFzaEhhbmRsZXIuYmluZEtleSIsIkhhc2hIYW5kbGVyLmFkZENvbW1hbmRzIiwiSGFzaEhhbmRsZXIucmVtb3ZlQ29tbWFuZHMiLCJIYXNoSGFuZGxlci5iaW5kS2V5cyIsIkhhc2hIYW5kbGVyLl9idWlsZEtleUhhc2giLCJIYXNoSGFuZGxlci5wYXJzZUtleXMiLCJIYXNoSGFuZGxlci5maW5kS2V5Q29tbWFuZCIsIkhhc2hIYW5kbGVyLmhhbmRsZUtleWJvYXJkIl0sIm1hcHBpbmdzIjoiT0E4Qk8sRUFBQyxhQUFhLEVBQUUsUUFBUSxFQUFDLE1BQU0sYUFBYTtPQUM1QyxRQUFRLE1BQU0sYUFBYTtPQUMzQixFQUFDLEtBQUssRUFBQyxNQUFNLGtCQUFrQjtBQUl0QztJQUtJQSxZQUFZQSxNQUFPQSxFQUFFQSxRQUFpQkE7UUFFbENDLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLFFBQVFBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLEtBQUtBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBO1FBQ3BEQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNuQkEsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUU1QkEsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7SUFDN0JBLENBQUNBO0lBQ0RELFVBQVVBLENBQUNBLE9BQWdCQTtRQUN2QkUsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDOUJBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1FBQ2hDQSxDQUFDQTtRQUVEQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxPQUFPQSxDQUFDQTtRQUV0Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0E7WUFDaEJBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO0lBQ3BDQSxDQUFDQTtJQUVERixhQUFhQSxDQUFDQSxPQUF5QkE7UUFDbkNHLElBQUlBLElBQUlBLEdBQUdBLENBQUNBLE9BQU9BLE9BQU9BLEtBQUtBLFFBQVFBLEdBQUdBLE9BQU9BLEdBQUdBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQ2xFQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUM5QkEsT0FBT0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFJM0JBLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0E7UUFDakNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLE1BQU1BLElBQUlBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQ3JCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDMUJBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLE9BQU9BLENBQUNBO29CQUM1QkEsT0FBT0EsR0FBR0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDaENBLENBQUNBO1FBQ0xBLENBQUNBO0lBQ0xBLENB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QUFRQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUM1QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFDdkJBLEdBQUdBLEdBQUdBLGFBQWFBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBO1FBQy9DQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUNuQkEsTUFBTUEsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsTUFBTUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7UUFDcENBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLElBQUlBLENBQUNBLElBQUlBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLE9BQU9BLENBQUNBO1lBQzlDQSxNQUFNQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxHQUFHQSxDQUFDQSxXQUFXQSxFQUFFQSxFQUFFQSxNQUFNQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQTtRQUVsREEsSUFBSUEsTUFBTUEsR0FBV0EsQ0FBQ0EsQ0FBQ0E7UUFDdkJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBO1lBQzlCQSxJQUFJQSxRQUFRQSxHQUFHQSxRQUFRQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNsQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsS0FBS0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3BCQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSxtQkFBbUJBLEdBQUdBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLENBQUNBO1lBQ3BFQSxDQUFDQTtZQUNEQSxNQUFNQSxJQUFJQSxRQUFRQSxDQUFDQTtRQUN2QkEsQ0FBQ0E7UUFDREEsTUFBTUEsQ0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsR0FBR0EsRUFBRUEsTUFBTUEsRUFBRUEsTUFBTUEsRUFBRUEsQ0FBQ0E7SUFDeENBLENBQUNBO0lBRURULGNBQWNBLENBQUNBLE1BQWNBLEVBQUVBLFNBQWlCQTtRQUM1Q1UsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQTtRQUNsQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7SUFDbkRBLENBQUNBO0lBRURWLGNBQWNBLENBQUNBLFVBQVVBLEVBQUVBLE1BQWNBLEVBQUVBLFNBQWlCQSxFQUFFQSxhQUFjQSxFQUFFQSxDQUFFQTtRQUM1RVcsSUFBSUEsUUFBUUEsR0FBR0E7WUFDWEEsT0FBT0EsRUFBRUEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsTUFBTUEsRUFBRUEsU0FBU0EsQ0FBQ0E7U0FDbERBLENBQUNBO1FBQ0ZBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBO0lBQ3BCQSxDQUFDQTtBQUNMWCxDQUFDQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyogKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKlxuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBsaWNlbnNlOlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMCwgQWpheC5vcmcgQi5WLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqICAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICAgICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqICAgICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgQWpheC5vcmcgQi5WLiBub3IgdGhlXG4gKiAgICAgICBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuICogICAgICAgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKiBcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICogQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEFKQVguT1JHIEIuVi4gQkUgTElBQkxFIEZPUiBBTllcbiAqIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gKiAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7XG4gKiBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkRcbiAqIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKlxuICogKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKiogKi9cblxuaW1wb3J0IHtGVU5DVElPTl9LRVlTLCBLRVlfTU9EU30gZnJvbSBcIi4uL2xpYi9rZXlzXCI7XG5pbXBvcnQga2V5Q29kZXMgZnJvbSBcIi4uL2xpYi9rZXlzXCI7XG5pbXBvcnQge2lzTWFjfSBmcm9tIFwiLi4vbGliL3VzZXJhZ2VudFwiO1xuaW1wb3J0IEVkaXRvciBmcm9tICcuLi9FZGl0b3InO1xuaW1wb3J0IENvbW1hbmQgZnJvbSAnLi4vY29tbWFuZHMvQ29tbWFuZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhhc2hIYW5kbGVyIHtcbiAgICBwdWJsaWMgcGxhdGZvcm06IHN0cmluZztcbiAgICBwdWJsaWMgY29tbWFuZHM6IHsgW25hbWU6IHN0cmluZ106IENvbW1hbmQgfTtcbiAgICBwdWJsaWMgY29tbWFuZEtleUJpbmRpbmc6IHsgW2hhc2hJZDogbnVtYmVyXTogeyBbbmFtZTogc3RyaW5nXTogQ29tbWFuZCB9IH07XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWc/LCBwbGF0Zm9ybT86IHN0cmluZykge1xuXG4gICAgICAgIHRoaXMucGxhdGZvcm0gPSBwbGF0Zm9ybSB8fCAoaXNNYWMgPyBcIm1hY1wiIDogXCJ3aW5cIik7XG4gICAgICAgIHRoaXMuY29tbWFuZHMgPSB7fTtcbiAgICAgICAgdGhpcy5jb21tYW5kS2V5QmluZGluZyA9IHt9O1xuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZHMoY29uZmlnKTtcbiAgICB9XG4gICAgYWRkQ29tbWFuZChjb21tYW5kOiBDb21tYW5kKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbW1hbmRzW2NvbW1hbmQubmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ29tbWFuZChjb21tYW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29tbWFuZHNbY29tbWFuZC5uYW1lXSA9IGNvbW1hbmQ7XG5cbiAgICAgICAgaWYgKGNvbW1hbmQuYmluZEtleSlcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkS2V5SGFzaChjb21tYW5kKTtcbiAgICB9XG5cbiAgICByZW1vdmVDb21tYW5kKGNvbW1hbmQ6IHN0cmluZyB8IENvbW1hbmQpIHtcbiAgICAgICAgdmFyIG5hbWUgPSAodHlwZW9mIGNvbW1hbmQgPT09ICdzdHJpbmcnID8gY29tbWFuZCA6IGNvbW1hbmQubmFtZSk7XG4gICAgICAgIGNvbW1hbmQgPSB0aGlzLmNvbW1hbmRzW25hbWVdO1xuICAgICAgICBkZWxldGUgdGhpcy5jb21tYW5kc1tuYW1lXTtcblxuICAgICAgICAvLyBleGhhdXN0aXZlIHNlYXJjaCBpcyBicnV0ZSBmb3JjZSBidXQgc2luY2UgcmVtb3ZlQ29tbWFuZCBpc1xuICAgICAgICAvLyBub3QgYSBwZXJmb3JtYW5jZSBjcml0aWNhbCBvcGVyYXRpb24gdGhpcyBzaG91bGQgYmUgT0tcbiAgICAgICAgdmFyIGNrYiA9IHRoaXMuY29tbWFuZEtleUJpbmRpbmc7XG4gICAgICAgIGZvciAodmFyIGhhc2hJZCBpbiBja2IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBja2JbaGFzaElkXSkge1xuICAgICAgICAgICAgICAgIGlmIChja2JbaGFzaElkXVtrZXldID09IGNvbW1hbmQpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBja2JbaGFzaElkXVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYmluZEtleShrZXk6IHN0cmluZywgY29tbWFuZDogYW55KSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICBpZiAoIWtleSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBjb21tYW5kID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7IGV4ZWM6IGNvbW1hbmQsIGJpbmRLZXk6IGtleSwgbmFtZTogY29tbWFuZC5uYW1lIHx8IGtleSB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBja2IgPSB0aGlzLmNvbW1hbmRLZXlCaW5kaW5nO1xuICAgICAgICBrZXkuc3BsaXQoXCJ8XCIpLmZvckVhY2goZnVuY3Rpb24oa2V5UGFydCkge1xuICAgICAgICAgICAgdmFyIGJpbmRpbmcgPSBzZWxmLnBhcnNlS2V5cyhrZXlQYXJ0LyosIGNvbW1hbmQqLyk7XG4gICAgICAgICAgICB2YXIgaGFzaElkID0gYmluZGluZy5oYXNoSWQ7XG4gICAgICAgICAgICAoY2tiW2hhc2hJZF0gfHwgKGNrYltoYXNoSWRdID0ge30pKVtiaW5kaW5nLmtleV0gPSBjb21tYW5kO1xuICAgICAgICB9LCBzZWxmKTtcbiAgICB9XG5cbiAgICBhZGRDb21tYW5kcyhjb21tYW5kcykge1xuXG4gICAgICAgIGNvbW1hbmRzICYmIE9iamVjdC5rZXlzKGNvbW1hbmRzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcblxuICAgICAgICAgICAgdmFyIGNvbW1hbmQgPSBjb21tYW5kc1tuYW1lXTtcbiAgICAgICAgICAgIGlmICghY29tbWFuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb21tYW5kID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmluZEtleShjb21tYW5kLCBuYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb21tYW5kID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjb21tYW5kID0geyBleGVjOiBjb21tYW5kIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29tbWFuZCAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFjb21tYW5kLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBjb21tYW5kLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmFkZENvbW1hbmQoY29tbWFuZCk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH1cblxuICAgIHJlbW92ZUNvbW1hbmRzKGNvbW1hbmRzKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGNvbW1hbmRzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ29tbWFuZChjb21tYW5kc1tuYW1lXSk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH1cblxuICAgIGJpbmRLZXlzKGtleUxpc3Q6IHsgW25hbWU6IHN0cmluZ106IChlZGl0b3I6IEVkaXRvcikgPT4gdm9pZCB9KSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmtleXMoa2V5TGlzdCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHNlbGYuYmluZEtleShrZXksIGtleUxpc3Rba2V5XSk7XG4gICAgICAgIH0sIHNlbGYpO1xuICAgIH1cblxuICAgIHB1YmxpYyBfYnVpbGRLZXlIYXNoKGNvbW1hbmQ6IENvbW1hbmQpOiB2b2lkIHtcbiAgICAgICAgdmFyIGJpbmRpbmcgPSBjb21tYW5kLmJpbmRLZXk7XG4gICAgICAgIGlmICghYmluZGluZylcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB2YXIga2V5ID0gdHlwZW9mIGJpbmRpbmcgPT0gXCJzdHJpbmdcIiA/IGJpbmRpbmcgOiBiaW5kaW5nW3RoaXMucGxhdGZvcm1dO1xuICAgICAgICB0aGlzLmJpbmRLZXkoa2V5LCBjb21tYW5kKTtcbiAgICB9XG5cbiAgICAvLyBhY2NlcHRzIGtleXMgaW4gdGhlIGZvcm0gY3RybCtFbnRlciBvciBjdHJsLUVudGVyXG4gICAgLy8ga2V5cyB3aXRob3V0IG1vZGlmaWVycyBvciBzaGlmdCBvbmx5IFxuICAgIHBhcnNlS2V5cyhrZXlzOiBzdHJpbmcpOiB7IGtleTogc3RyaW5nOyBoYXNoSWQ6IG51bWJlciB9IHtcbiAgICAgICAgLy8gdG9kbyBzdXBwb3J0IGtleWNoYWlucyBcbiAgICAgICAgaWYgKGtleXMuaW5kZXhPZihcIiBcIikgIT0gLTEpXG4gICAgICAgICAgICBrZXlzID0ga2V5cy5zcGxpdCgvXFxzKy8pLnBvcCgpO1xuXG4gICAgICAgIHZhciBwYXJ0cyA9IGtleXMudG9Mb3dlckNhc2UoKS5zcGxpdCgvW1xcLVxcK10oW1xcLVxcK10pPy8pLmZpbHRlcihmdW5jdGlvbih4OiBhbnkpIHsgcmV0dXJuIHg7IH0pO1xuICAgICAgICB2YXIga2V5ID0gcGFydHMucG9wKCk7XG5cbiAgICAgICAgdmFyIGtleUNvZGUgPSBrZXlDb2Rlc1trZXldO1xuICAgICAgICBpZiAoRlVOQ1RJT05fS0VZU1trZXlDb2RlXSlcbiAgICAgICAgICAgIGtleSA9IEZVTkNUSU9OX0tFWVNba2V5Q29kZV0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgZWxzZSBpZiAoIXBhcnRzLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiB7IGtleToga2V5LCBoYXNoSWQ6IC0xIH07XG4gICAgICAgIGVsc2UgaWYgKHBhcnRzLmxlbmd0aCA9PSAxICYmIHBhcnRzWzBdID09IFwic2hpZnRcIilcbiAgICAgICAgICAgIHJldHVybiB7IGtleToga2V5LnRvVXBwZXJDYXNlKCksIGhhc2hJZDogLTEgfTtcblxuICAgICAgICB2YXIgaGFzaElkOiBudW1iZXIgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gcGFydHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICB2YXIgbW9kaWZpZXIgPSBLRVlfTU9EU1twYXJ0c1tpXV07XG4gICAgICAgICAgICBpZiAobW9kaWZpZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIG1vZGlmaWVyIFwiICsgcGFydHNbaV0gKyBcIiBpbiBcIiArIGtleXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFzaElkIHw9IG1vZGlmaWVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGtleToga2V5LCBoYXNoSWQ6IGhhc2hJZCB9O1xuICAgIH1cblxuICAgIGZpbmRLZXlDb21tYW5kKGhhc2hJZDogbnVtYmVyLCBrZXlTdHJpbmc6IHN0cmluZyk6IENvbW1hbmQge1xuICAgICAgICB2YXIgY2ticiA9IHRoaXMuY29tbWFuZEtleUJpbmRpbmc7XG4gICAgICAgIHJldHVybiBja2JyW2hhc2hJZF0gJiYgY2ticltoYXNoSWRdW2tleVN0cmluZ107XG4gICAgfVxuXG4gICAgaGFuZGxlS2V5Ym9hcmQoZGF0YVVudXNlZCwgaGFzaElkOiBudW1iZXIsIGtleVN0cmluZzogc3RyaW5nLCBrZXlDb2RlVW51c2VkPywgZT8pOiB7IGNvbW1hbmQ6IENvbW1hbmQgfSB7XG4gICAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgICAgIGNvbW1hbmQ6IHRoaXMuZmluZEtleUNvbW1hbmQoaGFzaElkLCBrZXlTdHJpbmcpXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG59XG4iXX0=