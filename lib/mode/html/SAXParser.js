import SAXTreeBuilder from './SAXTreeBuilder';
import Tokenizer from './Tokenizer';
import TreeParser from './TreeParser';
export default class SAXParser {
    constructor() {
        this.contentHandler = null;
        this._errorHandler = null;
        this._treeBuilder = new SAXTreeBuilder();
        this._tokenizer = new Tokenizer(this._treeBuilder);
        this._scriptingEnabled = false;
    }
    parseFragment(source, context) {
        this._treeBuilder.setFragmentContext(context);
        this._tokenizer.tokenize(source);
        var fragment = this._treeBuilder.getFragment();
        if (fragment) {
            new TreeParser(this.contentHandler).parse(fragment);
        }
    }
    parse(source) {
        this._tokenizer.tokenize(source);
        var document = this._treeBuilder.document;
        if (document) {
            new TreeParser(this.contentHandler).parse(document);
        }
    }
    get scriptingEnabled() {
        return this._scriptingEnabled;
    }
    set scriptingEnabled(scriptingEnabled) {
        this._scriptingEnabled = scriptingEnabled;
        this._treeBuilder.scriptingEnabled = scriptingEnabled;
    }
    get errorHandler() {
        return this._errorHandler;
    }
    set errorHandler(errorHandler) {
        this._errorHandler = errorHandler;
        this._treeBuilder.errorHandler = errorHandler;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU0FYUGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZGUvaHRtbC9TQVhQYXJzZXIudHMiXSwibmFtZXMiOlsiU0FYUGFyc2VyIiwiU0FYUGFyc2VyLmNvbnN0cnVjdG9yIiwiU0FYUGFyc2VyLnBhcnNlRnJhZ21lbnQiLCJTQVhQYXJzZXIucGFyc2UiLCJTQVhQYXJzZXIuc2NyaXB0aW5nRW5hYmxlZCIsIlNBWFBhcnNlci5lcnJvckhhbmRsZXIiXSwibWFwcGluZ3MiOiJPQUFPLGNBQWMsTUFBTSxrQkFBa0I7T0FDdEMsU0FBUyxNQUFNLGFBQWE7T0FDNUIsVUFBVSxNQUFNLGNBQWM7QUFFckM7SUFNSUE7UUFDSUMsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDM0JBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLElBQUlBLENBQUNBO1FBQzFCQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxJQUFJQSxjQUFjQSxFQUFFQSxDQUFDQTtRQUN6Q0EsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0E7UUFDbkRBLElBQUlBLENBQUNBLGlCQUFpQkEsR0FBR0EsS0FBS0EsQ0FBQ0E7SUFFbkNBLENBQUNBO0lBQ0RELGFBQWFBLENBQUNBLE1BQU1BLEVBQUVBLE9BQU9BO1FBQ3pCRSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxrQkFBa0JBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1FBQzlDQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUNqQ0EsSUFBSUEsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0E7UUFDL0NBLEVBQUVBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO1lBQ1hBLElBQUlBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1FBQ3hEQSxDQUFDQTtJQUNMQSxDQUFDQTtJQUVERixLQUFLQSxDQUFDQSxNQUFNQTtRQUNSRyxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUNqQ0EsSUFBSUEsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7UUFDMUNBLEVBQUVBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO1lBQ1hBLElBQUlBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1FBQ3hEQSxDQUFDQTtJQUNMQSxDQUFDQTtJQUVESCxJQUFJQSxnQkFBZ0JBO1FBQ2hCSSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBO0lBQ2xDQSxDQUFDQTtJQUNESixJQUFJQSxnQkFBZ0JBLENBQUNBLGdCQUF5QkE7UUFDMUNJLElBQUlBLENBQUNBLGlCQUFpQkEsR0FBR0EsZ0JBQWdCQSxDQUFDQTtRQUMxQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxnQkFBZ0JBLENBQUNBO0lBQzFEQSxDQUFDQTtJQUVESixJQUFJQSxZQUFZQTtRQUNaSyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQTtJQUM5QkEsQ0FBQ0E7SUFDREwsSUFBSUEsWUFBWUEsQ0FBQ0EsWUFBWUE7UUFDekJLLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLFlBQVlBLENBQUNBO1FBQ2xDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxZQUFZQSxHQUFHQSxZQUFZQSxDQUFDQTtJQUNsREEsQ0FBQ0E7QUFDTEwsQ0FBQ0E7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTQVhUcmVlQnVpbGRlciBmcm9tICcuL1NBWFRyZWVCdWlsZGVyJztcbmltcG9ydCBUb2tlbml6ZXIgZnJvbSAnLi9Ub2tlbml6ZXInO1xuaW1wb3J0IFRyZWVQYXJzZXIgZnJvbSAnLi9UcmVlUGFyc2VyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU0FYUGFyc2VyIHtcbiAgICBjb250ZW50SGFuZGxlcjtcbiAgICBwcml2YXRlIF9lcnJvckhhbmRsZXI7XG4gICAgcHJpdmF0ZSBfdHJlZUJ1aWxkZXI6IFNBWFRyZWVCdWlsZGVyO1xuICAgIHByaXZhdGUgX3Rva2VuaXplcjogVG9rZW5pemVyO1xuICAgIHByaXZhdGUgX3NjcmlwdGluZ0VuYWJsZWQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY29udGVudEhhbmRsZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9lcnJvckhhbmRsZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl90cmVlQnVpbGRlciA9IG5ldyBTQVhUcmVlQnVpbGRlcigpO1xuICAgICAgICB0aGlzLl90b2tlbml6ZXIgPSBuZXcgVG9rZW5pemVyKHRoaXMuX3RyZWVCdWlsZGVyKTtcbiAgICAgICAgdGhpcy5fc2NyaXB0aW5nRW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgfVxuICAgIHBhcnNlRnJhZ21lbnQoc291cmNlLCBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuX3RyZWVCdWlsZGVyLnNldEZyYWdtZW50Q29udGV4dChjb250ZXh0KTtcbiAgICAgICAgdGhpcy5fdG9rZW5pemVyLnRva2VuaXplKHNvdXJjZSk7XG4gICAgICAgIHZhciBmcmFnbWVudCA9IHRoaXMuX3RyZWVCdWlsZGVyLmdldEZyYWdtZW50KCk7XG4gICAgICAgIGlmIChmcmFnbWVudCkge1xuICAgICAgICAgICAgbmV3IFRyZWVQYXJzZXIodGhpcy5jb250ZW50SGFuZGxlcikucGFyc2UoZnJhZ21lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFyc2Uoc291cmNlKSB7XG4gICAgICAgIHRoaXMuX3Rva2VuaXplci50b2tlbml6ZShzb3VyY2UpO1xuICAgICAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLl90cmVlQnVpbGRlci5kb2N1bWVudDtcbiAgICAgICAgaWYgKGRvY3VtZW50KSB7XG4gICAgICAgICAgICBuZXcgVHJlZVBhcnNlcih0aGlzLmNvbnRlbnRIYW5kbGVyKS5wYXJzZShkb2N1bWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgc2NyaXB0aW5nRW5hYmxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NjcmlwdGluZ0VuYWJsZWQ7XG4gICAgfVxuICAgIHNldCBzY3JpcHRpbmdFbmFibGVkKHNjcmlwdGluZ0VuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fc2NyaXB0aW5nRW5hYmxlZCA9IHNjcmlwdGluZ0VuYWJsZWQ7XG4gICAgICAgIHRoaXMuX3RyZWVCdWlsZGVyLnNjcmlwdGluZ0VuYWJsZWQgPSBzY3JpcHRpbmdFbmFibGVkO1xuICAgIH1cblxuICAgIGdldCBlcnJvckhhbmRsZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lcnJvckhhbmRsZXI7XG4gICAgfVxuICAgIHNldCBlcnJvckhhbmRsZXIoZXJyb3JIYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX2Vycm9ySGFuZGxlciA9IGVycm9ySGFuZGxlcjtcbiAgICAgICAgdGhpcy5fdHJlZUJ1aWxkZXIuZXJyb3JIYW5kbGVyID0gZXJyb3JIYW5kbGVyO1xuICAgIH1cbn1cbiJdfQ==