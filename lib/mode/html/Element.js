import ParentNode from './ParentNode';
import NodeType from './NodeType';
export default class Element extends ParentNode {
    constructor(locator, uri, localName, qName, atts, prefixMappings) {
        super(locator);
        this.uri = uri;
        this.localName = localName;
        this.qName = qName;
        this.attributes = atts;
        this.prefixMappings = prefixMappings;
        this.nodeType = NodeType.ELEMENT;
    }
    visit(treeParser) {
        if (this.prefixMappings) {
            for (var key in this.prefixMappings) {
                var mapping = this.prefixMappings[key];
                treeParser.startPrefixMapping(mapping.getPrefix(), mapping.getUri(), this);
            }
        }
        treeParser.startElement(this.uri, this.localName, this.qName, this.attributes, this);
    }
    revisit(treeParser) {
        treeParser.endElement(this.uri, this.localName, this.qName, this.endLocator);
        if (this.prefixMappings) {
            for (var key in this.prefixMappings) {
                var mapping = this.prefixMappings[key];
                treeParser.endPrefixMapping(mapping.getPrefix(), this.endLocator);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlL2h0bWwvRWxlbWVudC50cyJdLCJuYW1lcyI6WyJFbGVtZW50IiwiRWxlbWVudC5jb25zdHJ1Y3RvciIsIkVsZW1lbnQudmlzaXQiLCJFbGVtZW50LnJldmlzaXQiXSwibWFwcGluZ3MiOiJPQUFPLFVBQVUsTUFBTSxjQUFjO09BQzlCLFFBQVEsTUFBTSxZQUFZO0FBRWpDLHFDQUFxQyxVQUFVO0lBWTNDQSxZQUFZQSxPQUFPQSxFQUFFQSxHQUFHQSxFQUFFQSxTQUFTQSxFQUFFQSxLQUFLQSxFQUFFQSxJQUFJQSxFQUFFQSxjQUFlQTtRQUM3REMsTUFBTUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFDZkEsSUFBSUEsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7UUFDZkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsU0FBU0EsQ0FBQ0E7UUFDM0JBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLEtBQUtBLENBQUNBO1FBQ25CQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUN2QkEsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsY0FBY0EsQ0FBQ0E7UUFDckNBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBO0lBQ3JDQSxDQUFDQTtJQU1ERCxLQUFLQSxDQUFDQSxVQUFVQTtRQUNaRSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN0QkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2xDQSxJQUFJQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDdkNBLFVBQVVBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsU0FBU0EsRUFBRUEsRUFDN0NBLE9BQU9BLENBQUNBLE1BQU1BLEVBQUVBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1lBQ2hDQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUNEQSxVQUFVQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxFQUFFQSxJQUFJQSxDQUFDQSxTQUFTQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxJQUFJQSxDQUFDQSxVQUFVQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUN6RkEsQ0FBQ0E7SUFLREYsT0FBT0EsQ0FBQ0EsVUFBVUE7UUFDZEcsVUFBVUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsRUFBRUEsSUFBSUEsQ0FBQ0EsU0FBU0EsRUFBRUEsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFDN0VBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3RCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxJQUFJQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDbENBLElBQUlBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUN2Q0EsVUFBVUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxPQUFPQSxDQUFDQSxTQUFTQSxFQUFFQSxFQUFFQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtZQUN0RUEsQ0FBQ0E7UUFDTEEsQ0FBQ0E7SUFDTEEsQ0FBQ0E7QUFDTEgsQ0FBQ0E7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQYXJlbnROb2RlIGZyb20gJy4vUGFyZW50Tm9kZSc7XG5pbXBvcnQgTm9kZVR5cGUgZnJvbSAnLi9Ob2RlVHlwZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsZW1lbnQgZXh0ZW5kcyBQYXJlbnROb2RlIHtcbiAgICB1cmk7XG4gICAgbG9jYWxOYW1lO1xuICAgIHFOYW1lO1xuICAgIGF0dHJpYnV0ZXM7XG4gICAgcHJlZml4TWFwcGluZ3M7XG4gICAgbm9kZVR5cGU7XG4gICAgLyoqXG4gICAgICogQW4gZWxlbWVudC5cbiAgICAgKiBAdmVyc2lvbiAkSWQkXG4gICAgICogQGF1dGhvciBoc2l2b25lblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxvY2F0b3IsIHVyaSwgbG9jYWxOYW1lLCBxTmFtZSwgYXR0cywgcHJlZml4TWFwcGluZ3M/KSB7XG4gICAgICAgIHN1cGVyKGxvY2F0b3IpO1xuICAgICAgICB0aGlzLnVyaSA9IHVyaTtcbiAgICAgICAgdGhpcy5sb2NhbE5hbWUgPSBsb2NhbE5hbWU7XG4gICAgICAgIHRoaXMucU5hbWUgPSBxTmFtZTtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gYXR0cztcbiAgICAgICAgdGhpcy5wcmVmaXhNYXBwaW5ncyA9IHByZWZpeE1hcHBpbmdzO1xuICAgICAgICB0aGlzLm5vZGVUeXBlID0gTm9kZVR5cGUuRUxFTUVOVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAc2VlIG51LnZhbGlkYXRvci5zYXh0cmVlLk5vZGUjdmlzaXQobnUudmFsaWRhdG9yLnNheHRyZWUuVHJlZVBhcnNlcilcbiAgICAgKi9cbiAgICB2aXNpdCh0cmVlUGFyc2VyKSB7XG4gICAgICAgIGlmICh0aGlzLnByZWZpeE1hcHBpbmdzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5wcmVmaXhNYXBwaW5ncykge1xuICAgICAgICAgICAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5wcmVmaXhNYXBwaW5nc1trZXldO1xuICAgICAgICAgICAgICAgIHRyZWVQYXJzZXIuc3RhcnRQcmVmaXhNYXBwaW5nKG1hcHBpbmcuZ2V0UHJlZml4KCksXG4gICAgICAgICAgICAgICAgICAgIG1hcHBpbmcuZ2V0VXJpKCksIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyZWVQYXJzZXIuc3RhcnRFbGVtZW50KHRoaXMudXJpLCB0aGlzLmxvY2FsTmFtZSwgdGhpcy5xTmFtZSwgdGhpcy5hdHRyaWJ1dGVzLCB0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAc2VlIG51LnZhbGlkYXRvci5zYXh0cmVlLk5vZGUjcmV2aXNpdChudS52YWxpZGF0b3Iuc2F4dHJlZS5UcmVlUGFyc2VyKVxuICAgICAqL1xuICAgIHJldmlzaXQodHJlZVBhcnNlcikge1xuICAgICAgICB0cmVlUGFyc2VyLmVuZEVsZW1lbnQodGhpcy51cmksIHRoaXMubG9jYWxOYW1lLCB0aGlzLnFOYW1lLCB0aGlzLmVuZExvY2F0b3IpO1xuICAgICAgICBpZiAodGhpcy5wcmVmaXhNYXBwaW5ncykge1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMucHJlZml4TWFwcGluZ3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFwcGluZyA9IHRoaXMucHJlZml4TWFwcGluZ3Nba2V5XTtcbiAgICAgICAgICAgICAgICB0cmVlUGFyc2VyLmVuZFByZWZpeE1hcHBpbmcobWFwcGluZy5nZXRQcmVmaXgoKSwgdGhpcy5lbmRMb2NhdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuIl19