export default class Node {
    constructor(locator) {
        if (!locator) {
            this.columnNumber = -1;
            this.lineNumber = -1;
        }
        else {
            this.columnNumber = locator.columnNumber;
            this.lineNumber = locator.lineNumber;
        }
        this.parentNode = null;
        this.nextSibling = null;
        this.firstChild = null;
    }
    visit(treeParser) {
        throw new Error("Not Implemented");
    }
    revisit(treeParser) {
        return;
    }
    detach() {
        if (this.parentNode !== null) {
            this.parentNode.removeChild(this);
            this.parentNode = null;
        }
    }
    get previousSibling() {
        var prev = null;
        var next = this.parentNode.firstChild;
        for (;;) {
            if (this == next) {
                return prev;
            }
            prev = next;
            next = next.nextSibling;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlL2h0bWwvTm9kZS50cyJdLCJuYW1lcyI6WyJOb2RlIiwiTm9kZS5jb25zdHJ1Y3RvciIsIk5vZGUudmlzaXQiLCJOb2RlLnJldmlzaXQiLCJOb2RlLmRldGFjaCIsIk5vZGUucHJldmlvdXNTaWJsaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTtJQVdJQSxZQUFZQSxPQUFPQTtRQUNmQyxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNYQSxJQUFJQSxDQUFDQSxZQUFZQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN2QkEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDekJBLENBQUNBO1FBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ0pBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLE9BQU9BLENBQUNBLFlBQVlBLENBQUNBO1lBQ3pDQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxPQUFPQSxDQUFDQSxVQUFVQSxDQUFDQTtRQUN6Q0EsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDdkJBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBO1FBQ3hCQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUMzQkEsQ0FBQ0E7SUFRREQsS0FBS0EsQ0FBQ0EsVUFBVUE7UUFDWkUsTUFBTUEsSUFBSUEsS0FBS0EsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQTtJQUN2Q0EsQ0FBQ0E7SUFRREYsT0FBT0EsQ0FBQ0EsVUFBVUE7UUFDZEcsTUFBTUEsQ0FBQ0E7SUFDWEEsQ0FBQ0E7SUFTREgsTUFBTUE7UUFDRkksRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsS0FBS0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDM0JBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLFdBQVdBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ2xDQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUMzQkEsQ0FBQ0E7SUFDTEEsQ0FBQ0E7SUFFREosSUFBSUEsZUFBZUE7UUFDZkssSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLElBQUlBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLFVBQVVBLENBQUNBO1FBQ3RDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFLQSxDQUFDQTtZQUNQQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDZkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7WUFDaEJBLENBQUNBO1lBQ0RBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO1lBQ1pBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBO1FBQzVCQSxDQUFDQTtJQUNMQSxDQUFDQTtBQUNMTCxDQUFDQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm9kZSB7XG4gICAgY29sdW1uTnVtYmVyOiBudW1iZXI7XG4gICAgbGluZU51bWJlcjogbnVtYmVyO1xuICAgIHBhcmVudE5vZGU7XG4gICAgbmV4dFNpYmxpbmc7XG4gICAgZmlyc3RDaGlsZDtcbiAgICAvKipcbiAgICAgKiBUaGUgY29tbW9uIG5vZGUgc3VwZXJjbGFzcy5cbiAgICAgKiBAdmVyc2lvbiAkSWQkXG4gICAgICogQGF1dGhvciBoc2l2b25lblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxvY2F0b3IpIHtcbiAgICAgICAgaWYgKCFsb2NhdG9yKSB7XG4gICAgICAgICAgICB0aGlzLmNvbHVtbk51bWJlciA9IC0xO1xuICAgICAgICAgICAgdGhpcy5saW5lTnVtYmVyID0gLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbHVtbk51bWJlciA9IGxvY2F0b3IuY29sdW1uTnVtYmVyO1xuICAgICAgICAgICAgdGhpcy5saW5lTnVtYmVyID0gbG9jYXRvci5saW5lTnVtYmVyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyZW50Tm9kZSA9IG51bGw7XG4gICAgICAgIHRoaXMubmV4dFNpYmxpbmcgPSBudWxsO1xuICAgICAgICB0aGlzLmZpcnN0Q2hpbGQgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZpc2l0IHRoZSBub2RlLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB0cmVlUGFyc2VyIHRoZSB2aXNpdG9yXG4gICAgICogQHRocm93cyBTQVhFeGNlcHRpb24gaWYgc3R1ZmYgZ29lcyB3cm9uZ1xuICAgICAqL1xuICAgIHZpc2l0KHRyZWVQYXJzZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IEltcGxlbWVudGVkXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmlzaXQgdGhlIG5vZGUuXG4gICAgICogXG4gICAgICogQHBhcmFtIHRyZWVQYXJzZXIgdGhlIHZpc2l0b3JcbiAgICAgKiBAdGhyb3dzIFNBWEV4Y2VwdGlvbiBpZiBzdHVmZiBnb2VzIHdyb25nXG4gICAgICovXG4gICAgcmV2aXNpdCh0cmVlUGFyc2VyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFN1YmNsYXNzLXNwZWNpZmljIGFjY2Vzc29ycyB0aGF0IGFyZSBob2lzdGVkIGhlcmUgdG8gXG4gICAgLy8gYXZvaWQgY2FzdGluZy5cblxuICAgIC8qKlxuICAgICAqIERldGFjaCB0aGlzIG5vZGUgZnJvbSBpdHMgcGFyZW50LlxuICAgICAqL1xuICAgIGRldGFjaCgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBwcmV2aW91c1NpYmxpbmcoKSB7XG4gICAgICAgIHZhciBwcmV2ID0gbnVsbDtcbiAgICAgICAgdmFyIG5leHQgPSB0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgZm9yICg7IDspIHtcbiAgICAgICAgICAgIGlmICh0aGlzID09IG5leHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXYgPSBuZXh0O1xuICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICB9XG59Il19