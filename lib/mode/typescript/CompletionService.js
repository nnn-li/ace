var EditorPosition = require('./EditorPosition');
var CompletionService = (function () {
    function CompletionService(editor, workspace) {
        this._editor = editor;
        this._workspace = workspace;
        this._editorPos = new EditorPosition(editor);
    }
    CompletionService.prototype._getCompletionsAtPosition = function (fileName, position, memberMode, callback) {
        if (typeof this._workspace !== 'undefined') {
            var args = { 'fileName': fileName, 'position': position, 'memberMode': memberMode };
            this._workspace.getCompletionsAtPosition(fileName, position, memberMode, callback);
        }
        else {
            callback(new Error("Completions are not available at this time."));
        }
    };
    CompletionService.prototype.getCompletionsAtCursor = function (fileName, cursor, callback) {
        var position = this._editorPos.getPositionChars(cursor);
        var memberMode = false;
        var text = this._editor.session.getLine(cursor.row).slice(0, cursor.column);
        var matches = text.match(/\.([a-zA-Z_0-9\$]*$)/);
        if (matches && matches.length > 0) {
            this.matchText = matches[1];
            memberMode = true;
            position -= this.matchText.length;
        }
        else {
            matches = text.match(/[a-zA-Z_0-9\$]*$/);
            this.matchText = matches[0];
            memberMode = false;
        }
        this._getCompletionsAtPosition(fileName, position, memberMode, callback);
    };
    return CompletionService;
})();
module.exports = CompletionService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tcGxldGlvblNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kZS90eXBlc2NyaXB0L0NvbXBsZXRpb25TZXJ2aWNlLnRzIl0sIm5hbWVzIjpbIkNvbXBsZXRpb25TZXJ2aWNlIiwiQ29tcGxldGlvblNlcnZpY2UuY29uc3RydWN0b3IiLCJDb21wbGV0aW9uU2VydmljZS5fZ2V0Q29tcGxldGlvbnNBdFBvc2l0aW9uIiwiQ29tcGxldGlvblNlcnZpY2UuZ2V0Q29tcGxldGlvbnNBdEN1cnNvciJdLCJtYXBwaW5ncyI6IkFBRUEsSUFBTyxjQUFjLFdBQVcsa0JBQWtCLENBQUMsQ0FBQztBQUdwRDtJQUtJQSwyQkFBWUEsTUFBY0EsRUFBRUEsU0FBd0JBO1FBQ2hEQyxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxNQUFNQSxDQUFDQTtRQUN0QkEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsU0FBU0EsQ0FBQ0E7UUFDNUJBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLElBQUlBLGNBQWNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO0lBQ2pEQSxDQUFDQTtJQUVPRCxxREFBeUJBLEdBQWpDQSxVQUFrQ0EsUUFBZ0JBLEVBQUVBLFFBQWdCQSxFQUFFQSxVQUFtQkEsRUFBRUEsUUFBaUNBO1FBQ3hIRSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxJQUFJQSxDQUFDQSxVQUFVQSxLQUFLQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN6Q0EsSUFBSUEsSUFBSUEsR0FBR0EsRUFBRUEsVUFBVUEsRUFBRUEsUUFBUUEsRUFBRUEsVUFBVUEsRUFBRUEsUUFBUUEsRUFBRUEsWUFBWUEsRUFBRUEsVUFBVUEsRUFBRUEsQ0FBQ0E7WUFDcEZBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLHdCQUF3QkEsQ0FBQ0EsUUFBUUEsRUFBRUEsUUFBUUEsRUFBRUEsVUFBVUEsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFDdkZBLENBQUNBO1FBQ0RBLElBQUlBLENBQUNBLENBQUNBO1lBQ0ZBLFFBQVFBLENBQUNBLElBQUlBLEtBQUtBLENBQUNBLDZDQUE2Q0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdkVBLENBQUNBO0lBQ0xBLENBQUNBO0lBT0RGLGtEQUFzQkEsR0FBdEJBLFVBQXVCQSxRQUFnQkEsRUFBRUEsTUFBc0JBLEVBQUVBLFFBQWlDQTtRQUU5RkcsSUFBSUEsUUFBUUEsR0FBV0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUNoRUEsSUFBSUEsVUFBVUEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFFdkJBLElBQUlBLElBQUlBLEdBQVdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLEVBQUVBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBQ3BGQSxJQUFJQSxPQUFPQSxHQUFhQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxzQkFBc0JBLENBQUNBLENBQUNBO1FBQzNEQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxJQUFJQSxPQUFPQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNoQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDNUJBLFVBQVVBLEdBQUdBLElBQUlBLENBQUNBO1lBRWxCQSxRQUFRQSxJQUFJQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUN0Q0EsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDRkEsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxDQUFDQTtZQUN6Q0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDNUJBLFVBQVVBLEdBQUdBLEtBQUtBLENBQUNBO1FBRXZCQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSx5QkFBeUJBLENBQUNBLFFBQVFBLEVBQUVBLFFBQVFBLEVBQUVBLFVBQVVBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBO0lBQzdFQSxDQUFDQTtJQUNMSCx3QkFBQ0E7QUFBREEsQ0FBQ0EsQUEvQ0QsSUErQ0M7QUFDRCxpQkFBUyxpQkFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFZGl0b3IgPSByZXF1aXJlKCcuLi8uLi9FZGl0b3InKTtcbmltcG9ydCBDdXJzb3JQb3NpdGlvbiA9IHJlcXVpcmUoJy4uLy4uL0N1cnNvclBvc2l0aW9uJylcbmltcG9ydCBFZGl0b3JQb3NpdGlvbiA9IHJlcXVpcmUoJy4vRWRpdG9yUG9zaXRpb24nKTtcbmltcG9ydCB3c20gPSByZXF1aXJlKCcuLi8uLi93b3Jrc3BhY2Uvd29ya3NwYWNlJylcblxuY2xhc3MgQ29tcGxldGlvblNlcnZpY2Uge1xuICAgIHByaXZhdGUgX2VkaXRvcjogRWRpdG9yO1xuICAgIHByaXZhdGUgX3dvcmtzcGFjZTogd3NtLldvcmtzcGFjZTtcbiAgICBwcml2YXRlIF9lZGl0b3JQb3M6IEVkaXRvclBvc2l0aW9uO1xuICAgIHB1YmxpYyBtYXRjaFRleHQ6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihlZGl0b3I6IEVkaXRvciwgd29ya3NwYWNlOiB3c20uV29ya3NwYWNlKSB7XG4gICAgICAgIHRoaXMuX2VkaXRvciA9IGVkaXRvcjtcbiAgICAgICAgdGhpcy5fd29ya3NwYWNlID0gd29ya3NwYWNlO1xuICAgICAgICB0aGlzLl9lZGl0b3JQb3MgPSBuZXcgRWRpdG9yUG9zaXRpb24oZWRpdG9yKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9nZXRDb21wbGV0aW9uc0F0UG9zaXRpb24oZmlsZU5hbWU6IHN0cmluZywgcG9zaXRpb246IG51bWJlciwgbWVtYmVyTW9kZTogYm9vbGVhbiwgY2FsbGJhY2s6IChlcnIsIHJlc3VsdHM/KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fd29ya3NwYWNlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSB7ICdmaWxlTmFtZSc6IGZpbGVOYW1lLCAncG9zaXRpb24nOiBwb3NpdGlvbiwgJ21lbWJlck1vZGUnOiBtZW1iZXJNb2RlIH07XG4gICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2UuZ2V0Q29tcGxldGlvbnNBdFBvc2l0aW9uKGZpbGVOYW1lLCBwb3NpdGlvbiwgbWVtYmVyTW9kZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKFwiQ29tcGxldGlvbnMgYXJlIG5vdCBhdmFpbGFibGUgYXQgdGhpcyB0aW1lLlwiKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb21wbGV0aW9ucyBhdCB0aGUgY3Vyc29yIHBvc2l0aW9uIGFzeW5jaHJvbm91c2x5IGluIGEgY2FsbGFiY2suXG4gICAgICogXG4gICAgICogRklYTUU6IFRoZXJlIGlzIGEgc2lkZS1lZmZlY3Qgb2Ygc2V0dGluZyB0aGUgbWF0Y2hUZXh0IHByb3BlcnR5IHdoaWNoIHNob3VsZCBiZSBwYXJ0IG9mIHRoZSBjYWxsYmFjayByZXN1bHQuXG4gICAgICovXG4gICAgZ2V0Q29tcGxldGlvbnNBdEN1cnNvcihmaWxlTmFtZTogc3RyaW5nLCBjdXJzb3I6IEN1cnNvclBvc2l0aW9uLCBjYWxsYmFjazogKGVyciwgcmVzdWx0cz8pID0+IHZvaWQpOiB2b2lkIHtcblxuICAgICAgICB2YXIgcG9zaXRpb246IG51bWJlciA9IHRoaXMuX2VkaXRvclBvcy5nZXRQb3NpdGlvbkNoYXJzKGN1cnNvcik7XG4gICAgICAgIHZhciBtZW1iZXJNb2RlID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIHRleHQ6IHN0cmluZyA9IHRoaXMuX2VkaXRvci5zZXNzaW9uLmdldExpbmUoY3Vyc29yLnJvdykuc2xpY2UoMCwgY3Vyc29yLmNvbHVtbik7XG4gICAgICAgIHZhciBtYXRjaGVzOiBzdHJpbmdbXSA9IHRleHQubWF0Y2goL1xcLihbYS16QS1aXzAtOVxcJF0qJCkvKTtcbiAgICAgICAgaWYgKG1hdGNoZXMgJiYgbWF0Y2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLm1hdGNoVGV4dCA9IG1hdGNoZXNbMV07XG4gICAgICAgICAgICBtZW1iZXJNb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIEFkanVzdCB0aGUgcG9zaXRpb24uXG4gICAgICAgICAgICBwb3NpdGlvbiAtPSB0aGlzLm1hdGNoVGV4dC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtYXRjaGVzID0gdGV4dC5tYXRjaCgvW2EtekEtWl8wLTlcXCRdKiQvKTtcbiAgICAgICAgICAgIHRoaXMubWF0Y2hUZXh0ID0gbWF0Y2hlc1swXTtcbiAgICAgICAgICAgIG1lbWJlck1vZGUgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIExlYXZlIHRoZSBwb3NpdGlvbiBhcy1pcy5cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9nZXRDb21wbGV0aW9uc0F0UG9zaXRpb24oZmlsZU5hbWUsIHBvc2l0aW9uLCBtZW1iZXJNb2RlLCBjYWxsYmFjayk7XG4gICAgfVxufVxuZXhwb3J0ID0gQ29tcGxldGlvblNlcnZpY2U7XG4iXX0=