import HashHandler from '../../keyboard/HashHandler';
import EventEmitterClass from '../../lib/event_emitter';
import AutoCompleteView from '../../mode/typescript/AutoCompleteView';
function makeCompareFn(text) {
    return function (a, b) {
        var matchFunc = function (entry) {
            return entry.name.indexOf(text) === 0 ? 1 : 0;
        };
        var matchCompare = function () {
            return matchFunc(b) - matchFunc(a);
        };
        var textCompare = function () {
            if (a.name === b.name) {
                return 0;
            }
            else {
                return (a.name > b.name) ? 1 : -1;
            }
        };
        var ret = matchCompare();
        return (ret !== 0) ? ret : textCompare();
    };
}
export default function autoComplete(editor, fileNameProvider, completionService) {
    var AutoComplete = function () {
    };
    var that = new AutoComplete();
    that.isActive = isActive;
    that.activate = activate;
    that.deactivate = deactivate;
    var _eventEmitter = new EventEmitterClass();
    var _active = false;
    var _handler = new HashHandler();
    var _view = new AutoCompleteView(editor, that);
    var _inputText = '';
    _handler.attach = function () {
        editor.addEventListener("change", onEditorChange);
        _eventEmitter._emit("attach", { 'sender': that });
        _active = true;
    };
    _handler.detach = function () {
        editor.removeEventListener("change", onEditorChange);
        _view.hide();
        _eventEmitter._emit("detach", { 'sender': that });
        _active = false;
    };
    _handler.handleKeyboard = function (data, hashId, key, keyCode) {
        if (hashId == -1) {
            if (" -=,[]_/()!';:<>".indexOf(key) != -1) {
                deactivate();
            }
            return null;
        }
        var command = _handler.findKeyCommand(hashId, key);
        if (!command) {
            var defaultCommand = editor.commands.findKeyCommand(hashId, key);
            if (defaultCommand) {
                if (defaultCommand.name == "backspace") {
                    return null;
                }
                deactivate();
            }
            return null;
        }
        if (typeof command !== "string") {
            var args = command.args;
            command = command.command;
        }
        if (typeof command === "string") {
            command = this.commands[command];
        }
        return { 'command': command, 'args': args };
    };
    _handler.bindKeys({ "Up|Ctrl-p": "moveprev", "Down|Ctrl-n": "movenext", "esc|Ctrl-g": "cancel", "Return|Tab": "insert" });
    _handler.addCommands({
        movenext: function (editor) { _view.focusNext(); },
        moveprev: function (editor) { _view.focusPrev(); },
        cancel: function (editor) { deactivate(); },
        insert: function (editor) {
            editor.removeEventListener("change", onEditorChange);
            for (var i = 0; i < _inputText.length; i++) {
                editor.remove("left");
            }
            var curr = _view.current();
            if (curr) {
                editor.insert($(curr).data("name"));
            }
            deactivate();
        }
    });
    function isActive() {
        return _active;
    }
    function activateUsingCursor(cursor) {
        completionService.getCompletionsAtCursor(fileNameProvider(), cursor, function (err, completionInfo) {
            if (!err) {
                var text = completionService.matchText;
                _inputText = text;
                var completions = completionInfo ? completionInfo.entries : null;
                if (completions && _inputText.length > 0) {
                    completions = completions.filter(function (elm) {
                        return elm.name.toLowerCase().indexOf(_inputText.toLowerCase()) === 0;
                    });
                }
                completions = completions ? completions.sort(makeCompareFn(_inputText)) : completions;
                showCompletions(completions);
                var count = completions ? completions.length : 0;
                if (count > 0) {
                    editor.keyBinding.addKeyboardHandler(_handler);
                }
            }
            function showCompletions(infos) {
                if (infos && infos.length > 0) {
                    editor.container.appendChild(_view.wrap);
                    var html = '';
                    for (var n in infos) {
                        var info = infos[n];
                        var name = '<span class="label-name">' + info.name + '</span>';
                        var kind = '<span class="label-kind label-kind-' + info.kind + '">' + info.kind.charAt(0) + '</span>';
                        html += '<li data-name="' + info.name + '">' + kind + name + '</li>';
                    }
                    var coords = editor.renderer.textToScreenCoordinates(cursor.row, cursor.column - text.length);
                    var lineHeight = 9;
                    var topdownOnly = false;
                    _view.show(coords);
                    _view.listElement.innerHTML = html;
                    _view.ensureFocus();
                }
                else {
                    _view.hide();
                }
            }
        });
    }
    function onEditorChange(event) {
        var cursor = editor.getCursorPosition();
        if (event.data.action == "insertText") {
            activateUsingCursor({ row: cursor.row, column: cursor.column + 1 });
        }
        else if (event.data.action == "removeText") {
            if (event.data.text == '\n') {
                deactivate();
            }
            else {
                activateUsingCursor(cursor);
            }
        }
        else {
            activateUsingCursor(cursor);
        }
    }
    function activate() {
        activateUsingCursor(editor.getCursorPosition());
    }
    function deactivate() {
        editor.keyBinding.removeKeyboardHandler(_handler);
    }
    return that;
}
//# sourceMappingURL=data:application/json;base64,