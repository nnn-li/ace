import Range from "../../Range";
export default class EditorPosition {
    constructor(editor) {
        this.editor = editor;
    }
    getPositionChars(pos) {
        var doc = this.editor.getSession().getDocument();
        return this.getChars(doc, pos);
    }
    getPositionFromChars(chars) {
        var doc = this.editor.getSession().getDocument();
        return this.getPosition(doc, chars);
    }
    getCurrentPositionChars() {
        return this.getPositionChars(this.editor.getCursorPosition());
    }
    getCurrentLeftChar() {
        return this.getPositionLeftChar(this.editor.getCursorPosition());
    }
    getTextAtCursorPosition(cursor) {
        var range = new Range(cursor.row, cursor.column, cursor.row, cursor.column + 1);
        return this.editor.getSession().getDocument().getTextRange(range);
    }
    getPositionLeftChar(cursor) {
        var range = new Range(cursor.row, cursor.column, cursor.row, cursor.column - 1);
        return this.editor.getSession().getDocument().getTextRange(range);
    }
    getLinesChars(lines) {
        var count = 0;
        lines.forEach(function (line) {
            return count += line.length + 1;
        });
        return count;
    }
    getChars(doc, pos) {
        return this.getLinesChars(doc.getLines(0, pos.row - 1)) + pos.column;
    }
    getPosition(doc, chars) {
        var i;
        var line;
        var lines = doc.getAllLines();
        var count = 0;
        var row = 0;
        for (i in lines) {
            line = lines[i];
            if (chars < (count + (line.length + 1))) {
                return {
                    row: row,
                    column: chars - count
                };
            }
            count += line.length + 1;
            row += 1;
        }
        return {
            row: row,
            column: chars - count
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWRpdG9yUG9zaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kZS90eXBlc2NyaXB0L0VkaXRvclBvc2l0aW9uLnRzIl0sIm5hbWVzIjpbIkVkaXRvclBvc2l0aW9uIiwiRWRpdG9yUG9zaXRpb24uY29uc3RydWN0b3IiLCJFZGl0b3JQb3NpdGlvbi5nZXRQb3NpdGlvbkNoYXJzIiwiRWRpdG9yUG9zaXRpb24uZ2V0UG9zaXRpb25Gcm9tQ2hhcnMiLCJFZGl0b3JQb3NpdGlvbi5nZXRDdXJyZW50UG9zaXRpb25DaGFycyIsIkVkaXRvclBvc2l0aW9uLmdldEN1cnJlbnRMZWZ0Q2hhciIsIkVkaXRvclBvc2l0aW9uLmdldFRleHRBdEN1cnNvclBvc2l0aW9uIiwiRWRpdG9yUG9zaXRpb24uZ2V0UG9zaXRpb25MZWZ0Q2hhciIsIkVkaXRvclBvc2l0aW9uLmdldExpbmVzQ2hhcnMiLCJFZGl0b3JQb3NpdGlvbi5nZXRDaGFycyIsIkVkaXRvclBvc2l0aW9uLmdldFBvc2l0aW9uIl0sIm1hcHBpbmdzIjoiT0FHTyxLQUFLLE1BQU0sYUFBYTtBQU0vQjtJQUVJQSxZQUFZQSxNQUFjQTtRQUN0QkMsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0E7SUFDekJBLENBQUNBO0lBQ0RELGdCQUFnQkEsQ0FBQ0EsR0FBb0NBO1FBQ2pERSxJQUFJQSxHQUFHQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxVQUFVQSxFQUFFQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQTtRQUNqREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFDbkNBLENBQUNBO0lBQ0RGLG9CQUFvQkEsQ0FBQ0EsS0FBYUE7UUFDOUJHLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLFVBQVVBLEVBQUVBLENBQUNBLFdBQVdBLEVBQUVB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Q0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3RDQSxNQUFNQSxDQUFDQTtvQkFDSEEsR0FBR0EsRUFBRUEsR0FBR0E7b0JBQ1JBLE1BQU1BLEVBQUVBLEtBQUtBLEdBQUdBLEtBQUtBO2lCQUN4QkEsQ0FBQ0E7WUFDTkEsQ0FBQ0E7WUFDREEsS0FBS0EsSUFBSUEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDekJBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBO1FBQ2JBLENBQUNBO1FBQ0RBLE1BQU1BLENBQUNBO1lBQ0hBLEdBQUdBLEVBQUVBLEdBQUdBO1lBQ1JBLE1BQU1BLEVBQUVBLEtBQUtBLEdBQUdBLEtBQUtBO1NBQ3hCQSxDQUFDQTtJQUNOQSxDQUFDQTtBQUNMVixDQUFDQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEN1cnNvclBvc2l0aW9uIGZyb20gJy4uLy4uL0N1cnNvclBvc2l0aW9uJztcbmltcG9ydCBFZGl0b3JEb2N1bWVudCBmcm9tICcuLi8uLi9FZGl0b3JEb2N1bWVudCc7XG5pbXBvcnQgRWRpdG9yIGZyb20gJy4uLy4uL0VkaXRvcic7XG5pbXBvcnQgUmFuZ2UgZnJvbSBcIi4uLy4uL1JhbmdlXCI7XG4vKipcbiAqIEEgd3JhcHBlciBhcm91bmQgYW4gRWRpdG9yIHRvIHBlcmZvcm0gY29udmVyc2lvbnMgYmV0d2VlbiBsaW5lYXIgY2hhcmFjdGVyLCB7cm93O2NvbHVtbn0gYW5kIFRleHRSYW5nZSByZXByZXNlbnRhdGlvbnMuXG4gKiBcbiAqIFRoZSBlZGl0b3IgaXMgaW50ZWdyYWwgdG8gdGhlIGNvbnZlcnNpb24gYmVjYXVzZSBpdCBrbm93cyB0aGUgbGVuZ3RocyBvZiBlYWNoIGxpbmUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVkaXRvclBvc2l0aW9uIHtcbiAgICBwcml2YXRlIGVkaXRvcjogRWRpdG9yO1xuICAgIGNvbnN0cnVjdG9yKGVkaXRvcjogRWRpdG9yKSB7XG4gICAgICAgIHRoaXMuZWRpdG9yID0gZWRpdG9yO1xuICAgIH1cbiAgICBnZXRQb3NpdGlvbkNoYXJzKHBvczogeyByb3c6IG51bWJlcjsgY29sdW1uOiBudW1iZXIgfSk6IG51bWJlciB7XG4gICAgICAgIHZhciBkb2MgPSB0aGlzLmVkaXRvci5nZXRTZXNzaW9uKCkuZ2V0RG9jdW1lbnQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hhcnMoZG9jLCBwb3MpO1xuICAgIH1cbiAgICBnZXRQb3NpdGlvbkZyb21DaGFycyhjaGFyczogbnVtYmVyKTogeyByb3c6IG51bWJlcjsgY29sdW1uOiBudW1iZXIgfSB7XG4gICAgICAgIHZhciBkb2MgPSB0aGlzLmVkaXRvci5nZXRTZXNzaW9uKCkuZ2V0RG9jdW1lbnQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UG9zaXRpb24oZG9jLCBjaGFycyk7XG4gICAgfVxuICAgIGdldEN1cnJlbnRQb3NpdGlvbkNoYXJzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBvc2l0aW9uQ2hhcnModGhpcy5lZGl0b3IuZ2V0Q3Vyc29yUG9zaXRpb24oKSk7XG4gICAgfVxuICAgIGdldEN1cnJlbnRMZWZ0Q2hhcigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQb3NpdGlvbkxlZnRDaGFyKHRoaXMuZWRpdG9yLmdldEN1cnNvclBvc2l0aW9uKCkpO1xuICAgIH1cbiAgICBnZXRUZXh0QXRDdXJzb3JQb3NpdGlvbihjdXJzb3I6IEN1cnNvclBvc2l0aW9uKTogc3RyaW5nIHtcbiAgICAgICAgdmFyIHJhbmdlID0gbmV3IFJhbmdlKGN1cnNvci5yb3csIGN1cnNvci5jb2x1bW4sIGN1cnNvci5yb3csIGN1cnNvci5jb2x1bW4gKyAxKTtcbiAgICAgICAgLy8gVGhlIGZpbmFsIGZ1bmN0aW9uIHdvdWxkIHByb2JhYmx5IGhhdmUgYmVlbiBiZXR0ZXIgbmFtZWQgJ2dldFRleHRJblJhbmdlJy5cbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmdldFNlc3Npb24oKS5nZXREb2N1bWVudCgpLmdldFRleHRSYW5nZShyYW5nZSk7XG4gICAgfVxuICAgIGdldFBvc2l0aW9uTGVmdENoYXIoY3Vyc29yOiBDdXJzb3JQb3NpdGlvbik6IHN0cmluZyB7XG4gICAgICAgIHZhciByYW5nZSA9IG5ldyBSYW5nZShjdXJzb3Iucm93LCBjdXJzb3IuY29sdW1uLCBjdXJzb3Iucm93LCBjdXJzb3IuY29sdW1uIC0gMSk7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXRTZXNzaW9uKCkuZ2V0RG9jdW1lbnQoKS5nZXRUZXh0UmFuZ2UocmFuZ2UpO1xuICAgIH1cbiAgICBnZXRMaW5lc0NoYXJzKGxpbmVzOiBzdHJpbmdbXSk6IG51bWJlciB7XG4gICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgIGxpbmVzLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvdW50ICs9IGxpbmUubGVuZ3RoICsgMTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICB9XG5cbiAgICBnZXRDaGFycyhkb2M6IEVkaXRvckRvY3VtZW50LCBwb3M6IHsgcm93OiBudW1iZXI7IGNvbHVtbjogbnVtYmVyIH0pOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMaW5lc0NoYXJzKGRvYy5nZXRMaW5lcygwLCBwb3Mucm93IC0gMSkpICsgcG9zLmNvbHVtbjtcbiAgICB9XG5cbiAgICBnZXRQb3NpdGlvbihkb2M6IEVkaXRvckRvY3VtZW50LCBjaGFyczogbnVtYmVyKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGluZTogc3RyaW5nO1xuICAgICAgICB2YXIgbGluZXMgPSBkb2MuZ2V0QWxsTGluZXMoKTtcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgICAgdmFyIHJvdyA9IDA7XG4gICAgICAgIC8vIEZJWE1FOiBQcm9iYWJseSBiZXR0ZXIgdG8gaW5zaXN0IHRoYXQgJ2knIGlzIGEgbnVtYmVyIGFuZCB1c2UgdGhlIGxpbmVzLmxlbmd0aFxuICAgICAgICBmb3IgKGkgaW4gbGluZXMpIHtcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lc1tpXTtcbiAgICAgICAgICAgIGlmIChjaGFycyA8IChjb3VudCArIChsaW5lLmxlbmd0aCArIDEpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJvdzogcm93LFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW46IGNoYXJzIC0gY291bnRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY291bnQgKz0gbGluZS5sZW5ndGggKyAxO1xuICAgICAgICAgICAgcm93ICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJvdzogcm93LFxuICAgICAgICAgICAgY29sdW1uOiBjaGFycyAtIGNvdW50XG4gICAgICAgIH07XG4gICAgfVxufVxuIl19