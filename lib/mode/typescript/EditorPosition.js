var EditorPosition = (function () {
    function EditorPosition(editor) {
        this.editor = editor;
    }
    EditorPosition.prototype.getPositionChars = function (pos) {
        var doc = this.editor.getSession().getDocument();
        return this.getChars(doc, pos);
    };
    EditorPosition.prototype.getPositionFromChars = function (chars) {
        var doc = this.editor.getSession().getDocument();
        return this.getPosition(doc, chars);
    };
    EditorPosition.prototype.getCurrentPositionChars = function () {
        return this.getPositionChars(this.editor.getCursorPosition());
    };
    EditorPosition.prototype.getCurrentLeftChar = function () {
        return this.getPositionLeftChar(this.editor.getCursorPosition());
    };
    EditorPosition.prototype.getTextAtCursorPosition = function (cursor) {
        var range;
        range = {
            start: {
                row: cursor.row,
                column: cursor.column
            },
            end: {
                row: cursor.row,
                column: cursor.column + 1
            }
        };
        return this.editor.getSession().getDocument().getTextRange(range);
    };
    EditorPosition.prototype.getPositionLeftChar = function (cursor) {
        var range;
        range = {
            start: {
                row: cursor.row,
                column: cursor.column
            },
            end: {
                row: cursor.row,
                column: cursor.column - 1
            }
        };
        return this.editor.getSession().getDocument().getTextRange(range);
    };
    EditorPosition.prototype.getLinesChars = function (lines) {
        var count = 0;
        lines.forEach(function (line) {
            return count += line.length + 1;
        });
        return count;
    };
    EditorPosition.prototype.getChars = function (doc, pos) {
        return this.getLinesChars(doc.getLines(0, pos.row - 1)) + pos.column;
    };
    EditorPosition.prototype.getPosition = function (doc, chars) {
        var i;
        var line;
        var lines = doc.getAllLines();
        var count = 0;
        var row = 0;
        for (i in lines) {
            line = lines[i];
            if (chars < (count + (line.length + 1))) {
                return {
                    row: row,
                    column: chars - count
                };
            }
            count += line.length + 1;
            row += 1;
        }
        return {
            row: row,
            column: chars - count
        };
    };
    return EditorPosition;
})();
module.exports = EditorPosition;
//# sourceMappingURL=data:application/json;base64,