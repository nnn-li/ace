import Mode from "./Mode";
import JavaScriptHighlightRules from "./javascript_highlight_rules";
import MatchingBraceOutdent from "./matching_brace_outdent";
import { WorkerClient } from "../worker/worker_client";
import CstyleBehaviour from "./behaviour/cstyle";
import CStyleFoldMode from "./folding/cstyle";
export default class JavaScriptMode extends Mode {
    constructor() {
        super();
        this.HighlightRules = JavaScriptHighlightRules;
        this.$outdent = new MatchingBraceOutdent();
        this.$behaviour = new CstyleBehaviour();
        this.foldingRules = new CStyleFoldMode();
        this.lineCommentStart = "//";
        this.blockComment = { start: "/*", end: "*/" };
        this.$id = "ace/mode/javascript";
    }
    getNextLineIndent(state, line, tab) {
        var indent = this.$getIndent(line);
        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);
        var tokens = tokenizedLine.tokens;
        var endState = tokenizedLine.state;
        if (tokens.length && tokens[tokens.length - 1].type == "comment") {
            return indent;
        }
        if (state === "start" || state === "no_regex") {
            var match = line.match(/^.*(?:\bcase\b.*\:|[\{\(\[])\s*$/);
            if (match) {
                indent += tab;
            }
        }
        else if (state === "doc-start") {
            if (endState == "start" || endState == "no_regex") {
                return "";
            }
            var match = line.match(/^\s*(\/?)\*/);
            if (match) {
                if (match[1]) {
                    indent += " ";
                }
                indent += "* ";
            }
        }
        return indent;
    }
    checkOutdent(state, line, input) {
        return this.$outdent.checkOutdent(line, input);
    }
    ;
    autoOutdent(state, session, row) {
        this.$outdent.autoOutdent(session, row);
    }
    ;
    createWorker(session) {
        var worker = new WorkerClient(["ace"], "ace/mode/javascript_worker", "JavaScriptWorker");
        worker.attachToDocument(session.getDocument());
        worker.on("jslint", function (results) {
            session.setAnnotations(results.data);
        });
        worker.on("terminate", function () {
            session.clearAnnotations();
        });
        return worker;
    }
}
//# sourceMappingURL=data:application/json;base64,