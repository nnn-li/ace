import Mirror from "../worker/Mirror";
import SAXParser from "./html/SAXParser";
var errorTypes = {
    "expected-doctype-but-got-start-tag": "info",
    "expected-doctype-but-got-chars": "info",
    "non-html-root": "info",
};
export default class HtmlWorker extends Mirror {
    constructor(sender) {
        super(sender, 400);
        this.context = null;
    }
    setOptions(options) {
        this.context = options.context;
    }
    onUpdate() {
        var value = this.doc.getValue();
        if (!value)
            return;
        var errors = [];
        var parser = new SAXParser();
        if (parser) {
            var noop = function () { };
            parser.contentHandler = {
                startDocument: noop,
                endDocument: noop,
                startElement: noop,
                endElement: noop,
                characters: noop
            };
            parser.errorHandler = {
                error: function (message, location, code) {
                    errors.push({
                        row: location.line,
                        column: location.column,
                        text: message,
                        type: errorTypes[code] || "error"
                    });
                }
            };
            if (this.context)
                parser.parseFragment(value, this.context);
            else
                parser.parse(value);
        }
        this.sender.emit("error", errors);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSHRtbFdvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlL0h0bWxXb3JrZXIudHMiXSwibmFtZXMiOlsiSHRtbFdvcmtlciIsIkh0bWxXb3JrZXIuY29uc3RydWN0b3IiLCJIdG1sV29ya2VyLnNldE9wdGlvbnMiLCJIdG1sV29ya2VyLm9uVXBkYXRlIl0sIm1hcHBpbmdzIjoiT0FnQ08sTUFBTSxNQUFNLGtCQUFrQjtPQUM5QixTQUFTLE1BQU0sa0JBQWtCO0FBRXhDLElBQUksVUFBVSxHQUFHO0lBQ2Isb0NBQW9DLEVBQUUsTUFBTTtJQUM1QyxnQ0FBZ0MsRUFBRSxNQUFNO0lBQ3hDLGVBQWUsRUFBRSxNQUFNO0NBQzFCLENBQUE7QUFFRCx3Q0FBd0MsTUFBTTtJQUUxQ0EsWUFBWUEsTUFBTUE7UUFDZEMsTUFBTUEsTUFBTUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFGdkJBLFlBQU9BLEdBQUdBLElBQUlBLENBQUNBO0lBR2ZBLENBQUNBO0lBRURELFVBQVVBLENBQUNBLE9BQU9BO1FBQ2RFLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBO0lBQ25DQSxDQUFDQTtJQUVERixRQUFRQTtRQUNKRyxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQTtRQUNoQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFDUEEsTUFBTUEsQ0FBQ0E7UUFDWEEsSUFBSUEsTUFBTUEsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDaEJBLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLFNBQVNBLEVBQUVBLENBQUNBO1FBQzdCQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNUQSxJQUFJQSxJQUFJQSxHQUFHQSxjQUFhLENBQUMsQ0FBQ0E7WUFDMUJBLE1BQU1BLENBQUNBLGNBQWNBLEdBQUdBO2dCQUNwQkEsYUFBYUEsRUFBRUEsSUFBSUE7Z0JBQ25CQSxXQUFXQSxFQUFFQSxJQUFJQTtnQkFDakJBLFlBQVlBLEVBQUVBLElBQUlBO2dCQUNsQkEsVUFBVUEsRUFBRUEsSUFBSUE7Z0JBQ2hCQSxVQUFVQSxFQUFFQSxJQUFJQTthQUNuQkEsQ0FBQ0E7WUFDRkEsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0E7Z0JBQ2xCQSxLQUFLQSxFQUFFQSxVQUFTQSxPQUFPQSxFQUFFQSxRQUFRQSxFQUFFQSxJQUFJQTtvQkFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQzt3QkFDUixHQUFHLEVBQUUsUUFBUSxDQUFDLElBQUk7d0JBQ2xCLE1BQU0sRUFBRSxRQUFRLENBQUMsTUFBTTt3QkFDdkIsSUFBSSxFQUFFLE9BQU87d0JBQ2IsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPO3FCQUNwQyxDQUFDLENBQUM7Z0JBQ1AsQ0FBQzthQUNKQSxDQUFDQTtZQUNGQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQTtnQkFDYkEsTUFBTUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsS0FBS0EsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7WUFDOUNBLElBQUlBO2dCQUNBQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUM1QkEsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7SUFDdENBLENBQUNBO0FBQ0xILENBQUNBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqXG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIGxpY2Vuc2U6XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEwLCBBamF4Lm9yZyBCLlYuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICogICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqICAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgICAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogICAgICogTmVpdGhlciB0aGUgbmFtZSBvZiBBamF4Lm9yZyBCLlYuIG5vciB0aGVcbiAqICAgICAgIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gKiAgICAgICBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqIFxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EXG4gKiBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgQUpBWC5PUkcgQi5WLiBCRSBMSUFCTEUgRk9SIEFOWVxuICogRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbiAqIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUztcbiAqIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORFxuICogT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTXG4gKiBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqXG4gKiAqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKiAqL1xuXG5pbXBvcnQge30gZnJvbSBcIi4uL2xpYi9vb3BcIjtcbmltcG9ydCB7fSBmcm9tIFwiLi4vbGliL2xhbmdcIjtcbmltcG9ydCBNaXJyb3IgZnJvbSBcIi4uL3dvcmtlci9NaXJyb3JcIjtcbmltcG9ydCBTQVhQYXJzZXIgZnJvbSBcIi4vaHRtbC9TQVhQYXJzZXJcIjtcblxudmFyIGVycm9yVHlwZXMgPSB7XG4gICAgXCJleHBlY3RlZC1kb2N0eXBlLWJ1dC1nb3Qtc3RhcnQtdGFnXCI6IFwiaW5mb1wiLFxuICAgIFwiZXhwZWN0ZWQtZG9jdHlwZS1idXQtZ290LWNoYXJzXCI6IFwiaW5mb1wiLFxuICAgIFwibm9uLWh0bWwtcm9vdFwiOiBcImluZm9cIixcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSHRtbFdvcmtlciBleHRlbmRzIE1pcnJvciB7XG4gICAgY29udGV4dCA9IG51bGw7XG4gICAgY29uc3RydWN0b3Ioc2VuZGVyKSB7XG4gICAgICAgIHN1cGVyKHNlbmRlciwgNDAwKTtcbiAgICB9XG5cbiAgICBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0O1xuICAgIH1cblxuICAgIG9uVXBkYXRlKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmRvYy5nZXRWYWx1ZSgpO1xuICAgICAgICBpZiAoIXZhbHVlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICAgIHZhciBwYXJzZXIgPSBuZXcgU0FYUGFyc2VyKCk7XG4gICAgICAgIGlmIChwYXJzZXIpIHtcbiAgICAgICAgICAgIHZhciBub29wID0gZnVuY3Rpb24oKSB7IH07XG4gICAgICAgICAgICBwYXJzZXIuY29udGVudEhhbmRsZXIgPSB7XG4gICAgICAgICAgICAgICAgc3RhcnREb2N1bWVudDogbm9vcCxcbiAgICAgICAgICAgICAgICBlbmREb2N1bWVudDogbm9vcCxcbiAgICAgICAgICAgICAgICBzdGFydEVsZW1lbnQ6IG5vb3AsXG4gICAgICAgICAgICAgICAgZW5kRWxlbWVudDogbm9vcCxcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJzOiBub29wXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcGFyc2VyLmVycm9ySGFuZGxlciA9IHtcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24obWVzc2FnZSwgbG9jYXRpb24sIGNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93OiBsb2NhdGlvbi5saW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBsb2NhdGlvbi5jb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZXJyb3JUeXBlc1tjb2RlXSB8fCBcImVycm9yXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQpXG4gICAgICAgICAgICAgICAgcGFyc2VyLnBhcnNlRnJhZ21lbnQodmFsdWUsIHRoaXMuY29udGV4dCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcGFyc2VyLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbmRlci5lbWl0KFwiZXJyb3JcIiwgZXJyb3JzKTtcbiAgICB9XG59XG4iXX0=