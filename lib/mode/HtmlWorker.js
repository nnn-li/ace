import Mirror from "../worker/Mirror";
import SAXParser from "./html/SAXParser";
var errorTypes = {
    "expected-doctype-but-got-start-tag": "info",
    "expected-doctype-but-got-chars": "info",
    "non-html-root": "info",
};
export default class HtmlWorker extends Mirror {
    constructor(sender) {
        super(sender);
        this.setOptions();
        sender.emit('initAfter');
    }
    setOptions(options) {
        if (options) {
            this.context = options.context;
        }
        else {
            this.context = void 0;
        }
        this.doc.getValue() && this.deferredUpdate.schedule(100);
    }
    onUpdate() {
        var value = this.doc.getValue();
        if (!value) {
            return;
        }
        var errors = [];
        var parser = new SAXParser();
        if (parser) {
            var noop = function () { };
            parser.contentHandler = {
                startDocument: noop,
                endDocument: noop,
                startElement: noop,
                endElement: noop,
                characters: noop
            };
            parser.errorHandler = {
                error: function (message, location, code) {
                    errors.push({
                        row: location.line,
                        column: location.column,
                        text: message,
                        type: errorTypes[code] || "error"
                    });
                }
            };
            if (this.context) {
                parser.parseFragment(value, this.context);
            }
            else {
                parser.parse(value);
            }
        }
        this.sender.emit("error", errors);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSHRtbFdvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlL0h0bWxXb3JrZXIudHMiXSwibmFtZXMiOlsiSHRtbFdvcmtlciIsIkh0bWxXb3JrZXIuY29uc3RydWN0b3IiLCJIdG1sV29ya2VyLnNldE9wdGlvbnMiLCJIdG1sV29ya2VyLm9uVXBkYXRlIl0sIm1hcHBpbmdzIjoiT0E2Qk8sTUFBTSxNQUFNLGtCQUFrQjtPQUM5QixTQUFTLE1BQU0sa0JBQWtCO0FBR3hDLElBQUksVUFBVSxHQUFHO0lBQ2Isb0NBQW9DLEVBQUUsTUFBTTtJQUM1QyxnQ0FBZ0MsRUFBRSxNQUFNO0lBQ3hDLGVBQWUsRUFBRSxNQUFNO0NBQzFCLENBQUE7QUFFRCx3Q0FBd0MsTUFBTTtJQUUxQ0EsWUFBWUEsTUFBY0E7UUFDdEJDLE1BQU1BLE1BQU1BLENBQUNBLENBQUNBO1FBQ2RBLElBQUlBLENBQUNBLFVBQVVBLEVBQUVBLENBQUNBO1FBQ2xCQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtJQUM3QkEsQ0FBQ0E7SUFFREQsVUFBVUEsQ0FBQ0EsT0FBcUJBO1FBQzVCRSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNWQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQTtRQUNuQ0EsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDRkEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDMUJBLENBQUNBO1FBQ0RBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLFFBQVFBLEVBQUVBLElBQUlBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO0lBQzdEQSxDQUFDQTtJQUVERixRQUFRQTtRQUNKRyxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQTtRQUNoQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDVEEsTUFBTUEsQ0FBQ0E7UUFDWEEsQ0FBQ0E7UUFDREEsSUFBSUEsTUFBTUEsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDaEJBLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLFNBQVNBLEVBQUVBLENBQUNBO1FBQzdCQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNUQSxJQUFJQSxJQUFJQSxHQUFHQSxjQUFhLENBQUMsQ0FBQ0E7WUFDMUJBLE1BQU1BLENBQUNBLGNBQWNBLEdBQUdBO2dCQUNwQkEsYUFBYUEsRUFBRUEsSUFBSUE7Z0JBQ25CQSxXQUFXQSxFQUFFQSxJQUFJQTtnQkFDakJBLFlBQVlBLEVBQUVBLElBQUlBO2dCQUNsQkEsVUFBVUEsRUFBRUEsSUFBSUE7Z0JBQ2hCQSxVQUFVQSxFQUFFQSxJQUFJQTthQUNuQkEsQ0FBQ0E7WUFDRkEsTUFBTUEsQ0FBQ0EsWUFBWUEsR0FBR0E7Z0JBQ2xCQSxLQUFLQSxFQUFFQSxVQUFTQSxPQUFlQSxFQUFFQSxRQUEwQ0EsRUFBRUEsSUFBWUE7b0JBQ3JGLE1BQU0sQ0FBQyxJQUFJLENBQUM7d0JBQ1IsR0FBRyxFQUFFLFFBQVEsQ0FBQyxJQUFJO3dCQUNsQixNQUFNLEVBQUUsUUFBUSxDQUFDLE1BQU07d0JBQ3ZCLElBQUksRUFBRSxPQUFPO3dCQUNiLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTztxQkFDcEMsQ0FBQyxDQUFDO2dCQUNQLENBQUM7YUFDSkEsQ0FBQ0E7WUFDRkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2ZBLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1lBQzlDQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDRkEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFDeEJBLENBQUNBO1FBQ0xBLENBQUNBO1FBQ0RBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO0lBQ3RDQSxDQUFDQTtBQUNMSCxDQUFDQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyogKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKlxuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBsaWNlbnNlOlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMCwgQWpheC5vcmcgQi5WLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqICAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICAgICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqICAgICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgQWpheC5vcmcgQi5WLiBub3IgdGhlXG4gKiAgICAgICBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuICogICAgICAgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKiBcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICogQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEFKQVguT1JHIEIuVi4gQkUgTElBQkxFIEZPUiBBTllcbiAqIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gKiAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7XG4gKiBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkRcbiAqIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKlxuICogKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKiogKi9cbmltcG9ydCBNaXJyb3IgZnJvbSBcIi4uL3dvcmtlci9NaXJyb3JcIjtcbmltcG9ydCBTQVhQYXJzZXIgZnJvbSBcIi4vaHRtbC9TQVhQYXJzZXJcIjtcbmltcG9ydCBTZW5kZXIgZnJvbSBcIi4uL2xpYi9TZW5kZXJcIjtcblxudmFyIGVycm9yVHlwZXMgPSB7XG4gICAgXCJleHBlY3RlZC1kb2N0eXBlLWJ1dC1nb3Qtc3RhcnQtdGFnXCI6IFwiaW5mb1wiLFxuICAgIFwiZXhwZWN0ZWQtZG9jdHlwZS1idXQtZ290LWNoYXJzXCI6IFwiaW5mb1wiLFxuICAgIFwibm9uLWh0bWwtcm9vdFwiOiBcImluZm9cIixcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSHRtbFdvcmtlciBleHRlbmRzIE1pcnJvciB7XG4gICAgY29udGV4dDtcbiAgICBjb25zdHJ1Y3RvcihzZW5kZXI6IFNlbmRlcikge1xuICAgICAgICBzdXBlcihzZW5kZXIpO1xuICAgICAgICB0aGlzLnNldE9wdGlvbnMoKTtcbiAgICAgICAgc2VuZGVyLmVtaXQoJ2luaXRBZnRlcicpO1xuICAgIH1cblxuICAgIHNldE9wdGlvbnMob3B0aW9ucz86IHsgY29udGV4dCB9KSB7XG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQgPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kb2MuZ2V0VmFsdWUoKSAmJiB0aGlzLmRlZmVycmVkVXBkYXRlLnNjaGVkdWxlKDEwMCk7XG4gICAgfVxuXG4gICAgb25VcGRhdGUoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZG9jLmdldFZhbHVlKCk7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICAgIHZhciBwYXJzZXIgPSBuZXcgU0FYUGFyc2VyKCk7XG4gICAgICAgIGlmIChwYXJzZXIpIHtcbiAgICAgICAgICAgIHZhciBub29wID0gZnVuY3Rpb24oKSB7IH07XG4gICAgICAgICAgICBwYXJzZXIuY29udGVudEhhbmRsZXIgPSB7XG4gICAgICAgICAgICAgICAgc3RhcnREb2N1bWVudDogbm9vcCxcbiAgICAgICAgICAgICAgICBlbmREb2N1bWVudDogbm9vcCxcbiAgICAgICAgICAgICAgICBzdGFydEVsZW1lbnQ6IG5vb3AsXG4gICAgICAgICAgICAgICAgZW5kRWxlbWVudDogbm9vcCxcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJzOiBub29wXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcGFyc2VyLmVycm9ySGFuZGxlciA9IHtcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24obWVzc2FnZTogc3RyaW5nLCBsb2NhdGlvbjogeyBsaW5lOiBudW1iZXI7IGNvbHVtbjogbnVtYmVyIH0sIGNvZGU6IHN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3c6IGxvY2F0aW9uLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46IGxvY2F0aW9uLmNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBlcnJvclR5cGVzW2NvZGVdIHx8IFwiZXJyb3JcIlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dCkge1xuICAgICAgICAgICAgICAgIHBhcnNlci5wYXJzZUZyYWdtZW50KHZhbHVlLCB0aGlzLmNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyc2VyLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbmRlci5lbWl0KFwiZXJyb3JcIiwgZXJyb3JzKTtcbiAgICB9XG59XG4iXX0=