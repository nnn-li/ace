"use strict";
import JavaScriptHighlightRules from "./JavaScriptHighlightRules";
export default class TypeScriptHighlightRiles extends JavaScriptHighlightRules {
    constructor(options) {
        super(options);
        var tsRules = [
            {
                token: ["keyword.operator.ts", "text", "variable.parameter.function.ts", "text"],
                regex: "\\b(module)(\\s*)([a-zA-Z0-9_?.$][\\w?.$]*)(\\s*\\{)"
            },
            {
                token: ["storage.type.variable.ts", "text", "keyword.other.ts", "text"],
                regex: "(super)(\\s*\\()([a-zA-Z0-9,_?.$\\s]+\\s*)(\\))"
            },
            {
                token: ["entity.name.function.ts", "paren.lparen", "paren.rparen"],
                regex: "([a-zA-Z_?.$][\\w?.$]*)(\\()(\\))"
            },
            {
                token: ["variable.parameter.function.ts", "text", "variable.parameter.function.ts"],
                regex: "([a-zA-Z0-9_?.$][\\w?.$]*)(\\s*:\\s*)([a-zA-Z0-9_?.$][\\w?.$]*)"
            },
            {
                token: ["keyword.operator.ts"],
                regex: "(?:\\b(constructor|declare|interface|as|AS|public|private|class|extends|export|super)\\b)"
            },
            {
                token: ["storage.type.variable.ts"],
                regex: "(?:\\b(this\\.|string\\b|bool\\b|number)\\b)"
            },
            {
                token: ["keyword.operator.ts", "storage.type.variable.ts", "keyword.operator.ts", "storage.type.variable.ts"],
                regex: "(class)(\\s+[a-zA-Z0-9_?.$][\\w?.$]*\\s+)(extends)(\\s+[a-zA-Z0-9_?.$][\\w?.$]*\\s+)?"
            },
            {
                token: "keyword",
                regex: "(?:super|export|class|extends|import)\\b"
            }
        ];
        var JSRules = new JavaScriptHighlightRules().getRules();
        JSRules.start = tsRules.concat(JSRules.start);
        this.$rules = JSRules;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZVNjcmlwdEhpZ2hsaWdodFJ1bGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGUvVHlwZVNjcmlwdEhpZ2hsaWdodFJ1bGVzLnRzIl0sIm5hbWVzIjpbIlR5cGVTY3JpcHRIaWdobGlnaHRSaWxlcyIsIlR5cGVTY3JpcHRIaWdobGlnaHRSaWxlcy5jb25zdHJ1Y3RvciJdLCJtYXBwaW5ncyI6IkFBb0NBLFlBQVksQ0FBQztPQUVOLHdCQUF3QixNQUFNLDRCQUE0QjtBQUVqRSxzREFBc0Qsd0JBQXdCO0lBRTFFQSxZQUFZQSxPQUFZQTtRQUNwQkMsTUFBTUEsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFDZkEsSUFBSUEsT0FBT0EsR0FBR0E7WUFFVkE7Z0JBQ0lBLEtBQUtBLEVBQUVBLENBQUNBLHFCQUFxQkEsRUFBRUEsTUFBTUEsRUFBRUEsZ0NBQWdDQSxFQUFFQSxNQUFNQSxDQUFDQTtnQkFDaEZBLEtBQUtBLEVBQUVBLHNEQUFzREE7YUFDaEVBO1lBRURBO2dCQUNJQSxLQUFLQSxFQUFFQSxDQUFDQSwwQkFBMEJBLEVBQUVBLE1BQU1BLEVBQUVBLGtCQUFrQkEsRUFBRUEsTUFBTUEsQ0FBQ0E7Z0JBQ3ZFQSxLQUFLQSxFQUFFQSxpREFBaURBO2FBQzNEQTtZQUVEQTtnQkFDSUEsS0FBS0EsRUFBRUEsQ0FBQ0EseUJBQXlCQSxFQUFFQSxjQUFjQSxFQUFFQSxjQUFjQSxDQUFDQTtnQkFDbEVBLEtBQUtBLEVBQUVBLG1DQUFtQ0E7YUFDN0NBO1lBRURBO2dCQUNJQSxLQUFLQSxFQUFFQSxDQUFDQSxnQ0FBZ0NBLEVBQUVBLE1BQU1BLEVBQUVBLGdDQUFnQ0EsQ0FBQ0E7Z0JBQ25GQSxLQUFLQSxFQUFFQSxpRUFBaUVBO2FBQzNFQTtZQUNEQTtnQkFDSUEsS0FBS0EsRUFBRUEsQ0FBQ0EscUJBQXFCQSxDQUFDQTtnQkFDOUJBLEtBQUtBLEVBQUVBLDJGQUEyRkE7YUFDckdBO1lBQ0RBO2dCQUNJQSxLQUFLQSxFQUFFQSxDQUFDQSwwQkFBMEJBLENBQUNBO2dCQUNuQ0EsS0FBS0EsRUFBRUEsOENBQThDQTthQUN4REE7WUFDREE7Z0JBQ0lBLEtBQUtBLEVBQUVBLENBQUNBLHFCQUFxQkEsRUFBRUEsMEJBQTBCQSxFQUFFQSxxQkFBcUJBLEVBQUVBLDBCQUEwQkEsQ0FBQ0E7Z0JBQzdHQSxLQUFLQSxFQUFFQSx1RkFBdUZBO2FBQ2pHQTtZQUNEQTtnQkFDSUEsS0FBS0EsRUFBRUEsU0FBU0E7Z0JBQ2hCQSxLQUFLQSxFQUFFQSwwQ0FBMENBO2FBQ3BEQTtTQUNKQSxDQUFDQTtRQUVGQSxJQUFJQSxPQUFPQSxHQUFHQSxJQUFJQSx3QkFBd0JBLEVBQUVBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBO1FBRXhEQSxPQUFPQSxDQUFDQSxLQUFLQSxHQUFHQSxPQUFPQSxDQUFDQSxNQUFNQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUM5Q0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsT0FBT0EsQ0FBQ0E7SUFDMUJBLENBQUNBO0FBQ0xELENBQUNBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqXG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIGxpY2Vuc2U6XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyLCBBamF4Lm9yZyBCLlYuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICogICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqICAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgICAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogICAgICogTmVpdGhlciB0aGUgbmFtZSBvZiBBamF4Lm9yZyBCLlYuIG5vciB0aGVcbiAqICAgICAgIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gKiAgICAgICBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqIFxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EXG4gKiBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSAgICBcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEFKQVguT1JHIEIuVi4gQkUgTElBQkxFIEZPUiBBTllcbiAqIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gKiAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7XG4gKiBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkRcbiAqIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKlxuICpcbiAqIENvbnRyaWJ1dG9yKHMpOlxuICpcbiAqIEdhcmVuIEouIFRvcmlraWFuIDxnanRvcmlraWFuIEFUIGdtYWlsIERPVCBjb20+XG4gKiBcbiAqXG4gKlxuICogKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKiogKi9cblwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgSmF2YVNjcmlwdEhpZ2hsaWdodFJ1bGVzIGZyb20gXCIuL0phdmFTY3JpcHRIaWdobGlnaHRSdWxlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUeXBlU2NyaXB0SGlnaGxpZ2h0UmlsZXMgZXh0ZW5kcyBKYXZhU2NyaXB0SGlnaGxpZ2h0UnVsZXMge1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucz86IHt9KSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB2YXIgdHNSdWxlcyA9IFtcbiAgICAgICAgICAgIC8vIE1hdGNoIHN0dWZmIGxpa2U6IG1vZHVsZSBuYW1lIHsuLi59XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdG9rZW46IFtcImtleXdvcmQub3BlcmF0b3IudHNcIiwgXCJ0ZXh0XCIsIFwidmFyaWFibGUucGFyYW1ldGVyLmZ1bmN0aW9uLnRzXCIsIFwidGV4dFwiXSxcbiAgICAgICAgICAgICAgICByZWdleDogXCJcXFxcYihtb2R1bGUpKFxcXFxzKikoW2EtekEtWjAtOV8/LiRdW1xcXFx3Py4kXSopKFxcXFxzKlxcXFx7KVwiXG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIC8vIE1hdGNoIHN0dWZmIGxpa2U6IHN1cGVyKGFyZ3VtZW50LCBsaXN0KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRva2VuOiBbXCJzdG9yYWdlLnR5cGUudmFyaWFibGUudHNcIiwgXCJ0ZXh0XCIsIFwia2V5d29yZC5vdGhlci50c1wiLCBcInRleHRcIl0sXG4gICAgICAgICAgICAgICAgcmVnZXg6IFwiKHN1cGVyKShcXFxccypcXFxcKCkoW2EtekEtWjAtOSxfPy4kXFxcXHNdK1xcXFxzKikoXFxcXCkpXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBNYXRjaCBzdHVmZiBsaWtlOiBmdW5jdGlvbigpIHsuLi59XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdG9rZW46IFtcImVudGl0eS5uYW1lLmZ1bmN0aW9uLnRzXCIsIFwicGFyZW4ubHBhcmVuXCIsIFwicGFyZW4ucnBhcmVuXCJdLFxuICAgICAgICAgICAgICAgIHJlZ2V4OiBcIihbYS16QS1aXz8uJF1bXFxcXHc/LiRdKikoXFxcXCgpKFxcXFwpKVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gTWF0Y2ggc3R1ZmYgbGlrZTogKGZ1bmN0aW9uOiByZXR1cm4gdHlwZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0b2tlbjogW1widmFyaWFibGUucGFyYW1ldGVyLmZ1bmN0aW9uLnRzXCIsIFwidGV4dFwiLCBcInZhcmlhYmxlLnBhcmFtZXRlci5mdW5jdGlvbi50c1wiXSxcbiAgICAgICAgICAgICAgICByZWdleDogXCIoW2EtekEtWjAtOV8/LiRdW1xcXFx3Py4kXSopKFxcXFxzKjpcXFxccyopKFthLXpBLVowLTlfPy4kXVtcXFxcdz8uJF0qKVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRva2VuOiBbXCJrZXl3b3JkLm9wZXJhdG9yLnRzXCJdLFxuICAgICAgICAgICAgICAgIHJlZ2V4OiBcIig/OlxcXFxiKGNvbnN0cnVjdG9yfGRlY2xhcmV8aW50ZXJmYWNlfGFzfEFTfHB1YmxpY3xwcml2YXRlfGNsYXNzfGV4dGVuZHN8ZXhwb3J0fHN1cGVyKVxcXFxiKVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRva2VuOiBbXCJzdG9yYWdlLnR5cGUudmFyaWFibGUudHNcIl0sXG4gICAgICAgICAgICAgICAgcmVnZXg6IFwiKD86XFxcXGIodGhpc1xcXFwufHN0cmluZ1xcXFxifGJvb2xcXFxcYnxudW1iZXIpXFxcXGIpXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdG9rZW46IFtcImtleXdvcmQub3BlcmF0b3IudHNcIiwgXCJzdG9yYWdlLnR5cGUudmFyaWFibGUudHNcIiwgXCJrZXl3b3JkLm9wZXJhdG9yLnRzXCIsIFwic3RvcmFnZS50eXBlLnZhcmlhYmxlLnRzXCJdLFxuICAgICAgICAgICAgICAgIHJlZ2V4OiBcIihjbGFzcykoXFxcXHMrW2EtekEtWjAtOV8/LiRdW1xcXFx3Py4kXSpcXFxccyspKGV4dGVuZHMpKFxcXFxzK1thLXpBLVowLTlfPy4kXVtcXFxcdz8uJF0qXFxcXHMrKT9cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0b2tlbjogXCJrZXl3b3JkXCIsXG4gICAgICAgICAgICAgICAgcmVnZXg6IFwiKD86c3VwZXJ8ZXhwb3J0fGNsYXNzfGV4dGVuZHN8aW1wb3J0KVxcXFxiXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcblxuICAgICAgICB2YXIgSlNSdWxlcyA9IG5ldyBKYXZhU2NyaXB0SGlnaGxpZ2h0UnVsZXMoKS5nZXRSdWxlcygpO1xuXG4gICAgICAgIEpTUnVsZXMuc3RhcnQgPSB0c1J1bGVzLmNvbmNhdChKU1J1bGVzLnN0YXJ0KTtcbiAgICAgICAgdGhpcy4kcnVsZXMgPSBKU1J1bGVzO1xuICAgIH1cbn1cbiJdfQ==