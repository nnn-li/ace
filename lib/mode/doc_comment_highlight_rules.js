import TextHighlightRules from "./text_highlight_rules";
export default class DocCommentHighlightRules extends TextHighlightRules {
    constructor() {
        super();
        this.$rules = {
            "start": [{
                    token: "comment.doc.tag",
                    regex: "@[\\w\\d_]+"
                }, {
                    token: "comment.doc.tag",
                    regex: "\\bTODO\\b"
                }, {
                    defaultToken: "comment.doc"
                }]
        };
    }
    static getStartRule(start) {
        return {
            token: "comment.doc",
            regex: "\\/\\*(?=\\*)",
            next: start
        };
    }
    static getEndRule(start) {
        return {
            token: "comment.doc",
            regex: "\\*\\/",
            next: start
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jX2NvbW1lbnRfaGlnaGxpZ2h0X3J1bGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGUvZG9jX2NvbW1lbnRfaGlnaGxpZ2h0X3J1bGVzLnRzIl0sIm5hbWVzIjpbIkRvY0NvbW1lbnRIaWdobGlnaHRSdWxlcyIsIkRvY0NvbW1lbnRIaWdobGlnaHRSdWxlcy5jb25zdHJ1Y3RvciIsIkRvY0NvbW1lbnRIaWdobGlnaHRSdWxlcy5nZXRTdGFydFJ1bGUiLCJEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMuZ2V0RW5kUnVsZSJdLCJtYXBwaW5ncyI6Ik9BOEJPLGtCQUFrQixNQUFNLHdCQUF3QjtBQUV2RCxzREFBc0Qsa0JBQWtCO0lBQ3BFQTtRQUNJQyxPQUFPQSxDQUFBQTtRQUNQQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQTtZQUNWQSxPQUFPQSxFQUFFQSxDQUFDQTtvQkFDTkEsS0FBS0EsRUFBRUEsaUJBQWlCQTtvQkFDeEJBLEtBQUtBLEVBQUVBLGFBQWFBO2lCQUN2QkEsRUFBRUE7b0JBQ0tBLEtBQUtBLEVBQUVBLGlCQUFpQkE7b0JBQ3hCQSxLQUFLQSxFQUFFQSxZQUFZQTtpQkFDdEJBLEVBQUVBO29CQUNDQSxZQUFZQSxFQUFFQSxhQUFhQTtpQkFDOUJBLENBQUNBO1NBQ1RBLENBQUNBO0lBQ05BLENBQUNBO0lBRURELE9BQWNBLFlBQVlBLENBQUNBLEtBQUtBO1FBQzVCRSxNQUFNQSxDQUFDQTtZQUNIQSxLQUFLQSxFQUFFQSxhQUFhQTtZQUNwQkEsS0FBS0EsRUFBRUEsZUFBZUE7WUFDdEJBLElBQUlBLEVBQUVBLEtBQUtBO1NBQ2RBLENBQUNBO0lBQ05BLENBQUNBO0lBRURGLE9BQWNBLFVBQVVBLENBQUNBLEtBQUtBO1FBQzFCRyxNQUFNQSxDQUFDQTtZQUNIQSxLQUFLQSxFQUFFQSxhQUFhQTtZQUNwQkEsS0FBS0EsRUFBRUEsUUFBUUE7WUFDZkEsSUFBSUEsRUFBRUEsS0FBS0E7U0FDZEEsQ0FBQ0E7SUFDTkEsQ0FBQ0E7QUFDTEgsQ0FBQ0E7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qICoqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKipcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgbGljZW5zZTpcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAsIEFqYXgub3JnIEIuVi5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAgICAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEFqYXgub3JnIEIuVi4gbm9yIHRoZVxuICogICAgICAgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiAqICAgICAgIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICogXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBBSkFYLk9SRyBCLlYuIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuICogTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICpcbiAqICoqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqICovXG5cbmltcG9ydCBUZXh0SGlnaGxpZ2h0UnVsZXMgZnJvbSBcIi4vdGV4dF9oaWdobGlnaHRfcnVsZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9jQ29tbWVudEhpZ2hsaWdodFJ1bGVzIGV4dGVuZHMgVGV4dEhpZ2hsaWdodFJ1bGVzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKVxuICAgICAgICB0aGlzLiRydWxlcyA9IHtcbiAgICAgICAgICAgIFwic3RhcnRcIjogW3tcbiAgICAgICAgICAgICAgICB0b2tlbjogXCJjb21tZW50LmRvYy50YWdcIixcbiAgICAgICAgICAgICAgICByZWdleDogXCJAW1xcXFx3XFxcXGRfXStcIiAvLyBUT0RPOiBmaXggZW1haWwgYWRkcmVzc2VzXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuOiBcImNvbW1lbnQuZG9jLnRhZ1wiLFxuICAgICAgICAgICAgICAgICAgICByZWdleDogXCJcXFxcYlRPRE9cXFxcYlwiXG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VG9rZW46IFwiY29tbWVudC5kb2NcIlxuICAgICAgICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXRTdGFydFJ1bGUoc3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRva2VuOiBcImNvbW1lbnQuZG9jXCIsIC8vIGRvYyBjb21tZW50XG4gICAgICAgICAgICByZWdleDogXCJcXFxcL1xcXFwqKD89XFxcXCopXCIsXG4gICAgICAgICAgICBuZXh0OiBzdGFydFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0RW5kUnVsZShzdGFydCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9rZW46IFwiY29tbWVudC5kb2NcIiwgLy8gY2xvc2luZyBjb21tZW50XG4gICAgICAgICAgICByZWdleDogXCJcXFxcKlxcXFwvXCIsXG4gICAgICAgICAgICBuZXh0OiBzdGFydFxuICAgICAgICB9O1xuICAgIH1cbn0iXX0=