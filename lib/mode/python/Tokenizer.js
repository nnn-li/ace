var asserts = require('./asserts');
var base = require('./base');
var IndentationError = require('./IndentationError');
var TokenError = require('./TokenError');
function group() {
    var x = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        x[_i - 0] = arguments[_i];
    }
    var args = Array.prototype.slice.call(arguments);
    return '(' + args.join('|') + ')';
}
function any(x) { return group.apply(null, arguments) + "*"; }
function maybe(x) { return group.apply(null, arguments) + "?"; }
var Whitespace = "[ \\f\\t]*";
var Comment_ = "#[^\\r\\n]*";
var Ident = "[a-zA-Z_]\\w*";
var Binnumber = '0[bB][01]*';
var Hexnumber = '0[xX][\\da-fA-F]*[lL]?';
var Octnumber = '0[oO]?[0-7]*[lL]?';
var Decnumber = '[1-9]\\d*[lL]?';
var Intnumber = group(Binnumber, Hexnumber, Octnumber, Decnumber);
var Exponent = "[eE][-+]?\\d+";
var Pointfloat = group("\\d+\\.\\d*", "\\.\\d+") + maybe(Exponent);
var Expfloat = '\\d+' + Exponent;
var Floatnumber = group(Pointfloat, Expfloat);
var Imagnumber = group("\\d+[jJ]", Floatnumber + "[jJ]");
var Number_ = group(Imagnumber, Floatnumber, Intnumber);
var Single = "^[^'\\\\]*(?:\\\\.[^'\\\\]*)*'";
var Double_ = '^[^"\\\\]*(?:\\\\.[^"\\\\]*)*"';
var Single3 = "[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''";
var Double3 = '[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""';
var Triple = group("[ubUB]?[rR]?'''", '[ubUB]?[rR]?"""');
var String_ = group("[uU]?[rR]?'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'", '[uU]?[rR]?"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*"');
var Operator = group("\\*\\*=?", ">>=?", "<<=?", "<>", "!=", "//=?", "->", "[+\\-*/%&|^=<>]=?", "~");
var Bracket = '[\\][(){}]';
var Special = group('\\r?\\n', '[:;.,`@]');
var Funny = group(Operator, Bracket, Special);
var ContStr = group("[uUbB]?[rR]?'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*" +
    group("'", '\\\\\\r?\\n'), '[uUbB]?[rR]?"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*' +
    group('"', '\\\\\\r?\\n'));
var PseudoExtras = group('\\\\\\r?\\n', Comment_, Triple);
var PseudoToken = "^" + group(PseudoExtras, Number_, Funny, ContStr, Ident);
var pseudoprog;
var single3prog;
var double3prog;
var endprogs = {};
var triple_quoted = {
    "'''": true, '"""': true,
    "r'''": true, 'r"""': true, "R'''": true, 'R"""': true,
    "u'''": true, 'u"""': true, "U'''": true, 'U"""': true,
    "b'''": true, 'b"""': true, "B'''": true, 'B"""': true,
    "ur'''": true, 'ur"""': true, "Ur'''": true, 'Ur"""': true,
    "uR'''": true, 'uR"""': true, "UR'''": true, 'UR"""': true,
    "br'''": true, 'br"""': true, "Br'''": true, 'Br"""': true,
    "bR'''": true, 'bR"""': true, "BR'''": true, 'BR"""': true
};
var single_quoted = {
    "'": true, '"': true,
    "r'": true, 'r"': true, "R'": true, 'R"': true,
    "u'": true, 'u"': true, "U'": true, 'U"': true,
    "b'": true, 'b"': true, "B'": true, 'B"': true,
    "ur'": true, 'ur"': true, "Ur'": true, 'Ur"': true,
    "uR'": true, 'uR"': true, "UR'": true, 'UR"': true,
    "br'": true, 'br"': true, "Br'": true, 'Br"': true,
    "bR'": true, 'bR"': true, "BR'": true, 'BR"': true
};
(function () {
    for (var k in triple_quoted) { }
    for (var k in single_quoted) { }
}());
var tabsize = 8;
function contains(a, obj) {
    var i = a.length;
    while (i--) {
        if (a[i] === obj) {
            return true;
        }
    }
    return false;
}
function rstrip(input, what) {
    for (var i = input.length; i > 0; --i) {
        if (what.indexOf(input.charAt(i - 1)) === -1)
            break;
    }
    return input.substring(0, i);
}
var Tokenizer = (function () {
    function Tokenizer(fileName, interactive, callback) {
        this.lnum = 0;
        this.parenlev = 0;
        this.continued = false;
        this.namechars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_';
        this.numchars = '0123456789';
        this.contstr = '';
        this.needcont = false;
        this.contline = undefined;
        this.indents = [0];
        this.endprog = /.*/;
        this.strstart = [-1, -1];
        asserts.assert(base.isString(fileName), "fileName must be a string");
        this.fileName = fileName;
        this.interactive = interactive;
        this.callback = callback;
        this.doneFunc = function () {
            for (var i = 1; i < this.indents.length; ++i) {
                if (this.callback(Tokenizer.Tokens.T_DEDENT, '', [this.lnum, 0], [this.lnum, 0], ''))
                    return 'done';
            }
            if (this.callback(Tokenizer.Tokens.T_ENDMARKER, '', [this.lnum, 0], [this.lnum, 0], ''))
                return 'done';
            return 'failed';
        };
    }
    Tokenizer.prototype.generateTokens = function (line) {
        var endmatch;
        var pos;
        var column;
        var end;
        var max;
        var pseudoprog = new RegExp(PseudoToken);
        var single3prog = new RegExp(Single3, "g");
        var double3prog = new RegExp(Double3, "g");
        var endprogs = { "'": new RegExp(Single, "g"), '"': new RegExp(Double_, "g"),
            "'''": single3prog, '"""': double3prog,
            "r'''": single3prog, 'r"""': double3prog,
            "u'''": single3prog, 'u"""': double3prog,
            "b'''": single3prog, 'b"""': double3prog,
            "ur'''": single3prog, 'ur"""': double3prog,
            "br'''": single3prog, 'br"""': double3prog,
            "R'''": single3prog, 'R"""': double3prog,
            "U'''": single3prog, 'U"""': double3prog,
            "B'''": single3prog, 'B"""': double3prog,
            "uR'''": single3prog, 'uR"""': double3prog,
            "Ur'''": single3prog, 'Ur"""': double3prog,
            "UR'''": single3prog, 'UR"""': double3prog,
            "bR'''": single3prog, 'bR"""': double3prog,
            "Br'''": single3prog, 'Br"""': double3prog,
            "BR'''": single3prog, 'BR"""': double3prog,
            'r': null, 'R': null,
            'u': null, 'U': null,
            'b': null, 'B': null
        };
        if (!line)
            line = '';
        this.lnum += 1;
        pos = 0;
        max = line.length;
        if (this.contstr.length > 0) {
            if (!line) {
                throw new TokenError("EOF in multi-line string", this.fileName, this.strstart[0], this.strstart[1]);
            }
            this.endprog.lastIndex = 0;
            endmatch = this.endprog.test(line);
            if (endmatch) {
                pos = end = this.endprog.lastIndex;
                if (this.callback(Tokenizer.Tokens.T_STRING, this.contstr + line.substring(0, end), this.strstart, [this.lnum, end], this.contline + line)) {
                    return 'done';
                }
                this.contstr = '';
                this.needcont = false;
                this.contline = undefined;
            }
            else if (this.needcont && line.substring(line.length - 2) !== "\\\n" && line.substring(line.length - 3) !== "\\\r\n") {
                if (this.callback(Tokenizer.Tokens.T_ERRORTOKEN, this.contstr + line, this.strstart, [this.lnum, line.length], this.contline)) {
                    return 'done';
                }
                this.contstr = '';
                this.contline = undefined;
                return false;
            }
            else {
                this.contstr += line;
                this.contline = this.contline + line;
                return false;
            }
        }
        else if (this.parenlev === 0 && !this.continued) {
            if (!line)
                return this.doneFunc();
            column = 0;
            while (pos < max) {
                if (line.charAt(pos) === ' ')
                    column += 1;
                else if (line.charAt(pos) === '\t')
                    column = (column / tabsize + 1) * tabsize;
                else if (line.charAt(pos) === '\f')
                    column = 0;
                else
                    break;
                pos = pos + 1;
            }
            if (pos === max)
                return this.doneFunc();
            if ("#\r\n".indexOf(line.charAt(pos)) !== -1) {
                if (line.charAt(pos) === '#') {
                    var comment_token = rstrip(line.substring(pos), '\r\n');
                    var nl_pos = pos + comment_token.length;
                    if (this.callback(Tokenizer.Tokens.T_COMMENT, comment_token, [this.lnum, pos], [this.lnum, pos + comment_token.length], line))
                        return 'done';
                    if (this.callback(Tokenizer.Tokens.T_NL, line.substring(nl_pos), [this.lnum, nl_pos], [this.lnum, line.length], line))
                        return 'done';
                    return false;
                }
                else {
                    if (this.callback(Tokenizer.Tokens.T_NL, line.substring(pos), [this.lnum, pos], [this.lnum, line.length], line))
                        return 'done';
                    if (!this.interactive)
                        return false;
                }
            }
            if (column > this.indents[this.indents.length - 1]) {
                this.indents.push(column);
                if (this.callback(Tokenizer.Tokens.T_INDENT, line.substring(0, pos), [this.lnum, 0], [this.lnum, pos], line))
                    return 'done';
            }
            while (column < this.indents[this.indents.length - 1]) {
                if (!contains(this.indents, column)) {
                    throw new IndentationError("unindent does not match any outer indentation level", this.fileName, [this.lnum, 0], [this.lnum, pos], line);
                }
                this.indents.splice(this.indents.length - 1, 1);
                if (this.callback(Tokenizer.Tokens.T_DEDENT, '', [this.lnum, pos], [this.lnum, pos], line)) {
                    return 'done';
                }
            }
        }
        else {
            if (!line) {
                throw new TokenError("EOF in multi-line statement", this.fileName, this.lnum, 0);
            }
            this.continued = false;
        }
        while (pos < max) {
            var capos = line.charAt(pos);
            while (capos === ' ' || capos === '\f' || capos === '\t') {
                pos += 1;
                capos = line.charAt(pos);
            }
            pseudoprog.lastIndex = 0;
            var pseudomatch = pseudoprog.exec(line.substring(pos));
            if (pseudomatch) {
                var start = pos;
                end = start + pseudomatch[1].length;
                var spos = [this.lnum, start];
                var epos = [this.lnum, end];
                pos = end;
                var token = line.substring(start, end);
                var initial = line.charAt(start);
                if (this.numchars.indexOf(initial) !== -1 || (initial === '.' && token !== '.')) {
                    if (this.callback(Tokenizer.Tokens.T_NUMBER, token, spos, epos, line))
                        return 'done';
                }
                else if (initial === '\r' || initial === '\n') {
                    var newl = Tokenizer.Tokens.T_NEWLINE;
                    if (this.parenlev > 0)
                        newl = Tokenizer.Tokens.T_NL;
                    if (this.callback(newl, token, spos, epos, line))
                        return 'done';
                }
                else if (initial === '#') {
                    if (this.callback(Tokenizer.Tokens.T_COMMENT, token, spos, epos, line))
                        return 'done';
                }
                else if (triple_quoted.hasOwnProperty(token)) {
                    this.endprog = endprogs[token];
                    this.endprog.lastIndex = 0;
                    endmatch = this.endprog.test(line.substring(pos));
                    if (endmatch) {
                        pos = this.endprog.lastIndex + pos;
                        token = line.substring(start, pos);
                        if (this.callback(Tokenizer.Tokens.T_STRING, token, spos, [this.lnum, pos], line))
                            return 'done';
                    }
                    else {
                        this.strstart = [this.lnum, start];
                        this.contstr = line.substring(start);
                        this.contline = line;
                        return false;
                    }
                }
                else if (single_quoted.hasOwnProperty(initial) ||
                    single_quoted.hasOwnProperty(token.substring(0, 2)) ||
                    single_quoted.hasOwnProperty(token.substring(0, 3))) {
                    if (token[token.length - 1] === '\n') {
                        this.strstart = [this.lnum, start];
                        this.endprog = endprogs[initial] || endprogs[token[1]] || endprogs[token[2]];
                        this.contstr = line.substring(start);
                        this.needcont = true;
                        this.contline = line;
                        return false;
                    }
                    else {
                        if (this.callback(Tokenizer.Tokens.T_STRING, token, spos, epos, line))
                            return 'done';
                    }
                }
                else if (this.namechars.indexOf(initial) !== -1) {
                    if (this.callback(Tokenizer.Tokens.T_NAME, token, spos, epos, line))
                        return 'done';
                }
                else if (initial === '\\') {
                    if (this.callback(Tokenizer.Tokens.T_NL, token, spos, [this.lnum, pos], line))
                        return 'done';
                    this.continued = true;
                }
                else {
                    if ('([{'.indexOf(initial) !== -1)
                        this.parenlev += 1;
                    else if (')]}'.indexOf(initial) !== -1)
                        this.parenlev -= 1;
                    if (this.callback(Tokenizer.Tokens.T_OP, token, spos, epos, line))
                        return 'done';
                }
            }
            else {
                if (this.callback(Tokenizer.Tokens.T_ERRORTOKEN, line.charAt(pos), [this.lnum, pos], [this.lnum, pos + 1], line)) {
                    return 'done';
                }
                pos += 1;
            }
        }
        return false;
    };
    Tokenizer.Tokens = {
        T_ENDMARKER: 0,
        T_NAME: 1,
        T_NUMBER: 2,
        T_STRING: 3,
        T_NEWLINE: 4,
        T_INDENT: 5,
        T_DEDENT: 6,
        T_LPAR: 7,
        T_RPAR: 8,
        T_LSQB: 9,
        T_RSQB: 10,
        T_COLON: 11,
        T_COMMA: 12,
        T_SEMI: 13,
        T_PLUS: 14,
        T_MINUS: 15,
        T_STAR: 16,
        T_SLASH: 17,
        T_VBAR: 18,
        T_AMPER: 19,
        T_LESS: 20,
        T_GREATER: 21,
        T_EQUAL: 22,
        T_DOT: 23,
        T_PERCENT: 24,
        T_BACKQUOTE: 25,
        T_LBRACE: 26,
        T_RBRACE: 27,
        T_EQEQUAL: 28,
        T_NOTEQUAL: 29,
        T_LESSEQUAL: 30,
        T_GREATEREQUAL: 31,
        T_TILDE: 32,
        T_CIRCUMFLEX: 33,
        T_LEFTSHIFT: 34,
        T_RIGHTSHIFT: 35,
        T_DOUBLESTAR: 36,
        T_PLUSEQUAL: 37,
        T_MINEQUAL: 38,
        T_STAREQUAL: 39,
        T_SLASHEQUAL: 40,
        T_PERCENTEQUAL: 41,
        T_AMPEREQUAL: 42,
        T_VBAREQUAL: 43,
        T_CIRCUMFLEXEQUAL: 44,
        T_LEFTSHIFTEQUAL: 45,
        T_RIGHTSHIFTEQUAL: 46,
        T_DOUBLESTAREQUAL: 47,
        T_DOUBLESLASH: 48,
        T_DOUBLESLASHEQUAL: 49,
        T_AT: 50,
        T_OP: 51,
        T_COMMENT: 52,
        T_NL: 53,
        T_RARROW: 54,
        T_ERRORTOKEN: 55,
        T_N_TOKENS: 56,
        T_NT_OFFSET: 256
    };
    Tokenizer.tokenNames = {
        0: 'T_ENDMARKER', 1: 'T_NAME', 2: 'T_NUMBER', 3: 'T_STRING', 4: 'T_NEWLINE',
        5: 'T_INDENT', 6: 'T_DEDENT', 7: 'T_LPAR', 8: 'T_RPAR', 9: 'T_LSQB',
        10: 'T_RSQB', 11: 'T_COLON', 12: 'T_COMMA', 13: 'T_SEMI', 14: 'T_PLUS',
        15: 'T_MINUS', 16: 'T_STAR', 17: 'T_SLASH', 18: 'T_VBAR', 19: 'T_AMPER',
        20: 'T_LESS', 21: 'T_GREATER', 22: 'T_EQUAL', 23: 'T_DOT', 24: 'T_PERCENT',
        25: 'T_BACKQUOTE', 26: 'T_LBRACE', 27: 'T_RBRACE', 28: 'T_EQEQUAL', 29: 'T_NOTEQUAL',
        30: 'T_LESSEQUAL', 31: 'T_GREATEREQUAL', 32: 'T_TILDE', 33: 'T_CIRCUMFLEX', 34: 'T_LEFTSHIFT',
        35: 'T_RIGHTSHIFT', 36: 'T_DOUBLESTAR', 37: 'T_PLUSEQUAL', 38: 'T_MINEQUAL', 39: 'T_STAREQUAL',
        40: 'T_SLASHEQUAL', 41: 'T_PERCENTEQUAL', 42: 'T_AMPEREQUAL', 43: 'T_VBAREQUAL', 44: 'T_CIRCUMFLEXEQUAL',
        45: 'T_LEFTSHIFTEQUAL', 46: 'T_RIGHTSHIFTEQUAL', 47: 'T_DOUBLESTAREQUAL', 48: 'T_DOUBLESLASH', 49: 'T_DOUBLESLASHEQUAL',
        50: 'T_AT', 51: 'T_OP', 52: 'T_COMMENT', 53: 'T_NL', 54: 'T_RARROW',
        55: 'T_ERRORTOKEN', 56: 'T_N_TOKENS',
        256: 'T_NT_OFFSET'
    };
    return Tokenizer;
})();
module.exports = Tokenizer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9rZW5pemVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZGUvcHl0aG9uL1Rva2VuaXplci50cyJdLCJuYW1lcyI6WyJncm91cCIsImFueSIsIm1heWJlIiwiY29udGFpbnMiLCJyc3RyaXAiLCJUb2tlbml6ZXIiLCJUb2tlbml6ZXIuY29uc3RydWN0b3IiLCJUb2tlbml6ZXIuZ2VuZXJhdGVUb2tlbnMiXSwibWFwcGluZ3MiOiJBQUFBLElBQU8sT0FBTyxXQUFXLFdBQVcsQ0FBQyxDQUFDO0FBQ3RDLElBQU8sSUFBSSxXQUFXLFFBQVEsQ0FBQyxDQUFDO0FBQ2hDLElBQU8sZ0JBQWdCLFdBQVcsb0JBQW9CLENBQUMsQ0FBQztBQUN4RCxJQUFPLFVBQVUsV0FBVyxjQUFjLENBQUMsQ0FBQztBQUd4QztJQUFlQSxXQUFXQTtTQUFYQSxXQUFXQSxDQUFYQSxzQkFBV0EsQ0FBWEEsSUFBV0E7UUFBWEEsMEJBQVdBOztJQUV0QkEsSUFBSUEsSUFBSUEsR0FBR0EsS0FBS0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7SUFDakRBLE1BQU1BLENBQUNBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBO0FBQ3RDQSxDQUFDQTtBQUdELGFBQWEsQ0FBQyxJQUFJQyxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxFQUFFQSxTQUFTQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUc5RCxlQUFlLENBQUMsSUFBSUMsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsRUFBRUEsU0FBU0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFJaEUsSUFBSSxVQUFVLEdBQUcsWUFBWSxDQUFDO0FBQzlCLElBQUksUUFBUSxHQUFHLGFBQWEsQ0FBQztBQUM3QixJQUFJLEtBQUssR0FBRyxlQUFlLENBQUM7QUFFNUIsSUFBSSxTQUFTLEdBQUcsWUFBWSxDQUFDO0FBQzdCLElBQUksU0FBUyxHQUFHLHdCQUF3QixDQUFDO0FBQ3pDLElBQUksU0FBUyxHQUFHLG1CQUFtQixDQUFDO0FBQ3BDLElBQUksU0FBUyxHQUFHLGdCQUFnQixDQUFDO0FBQ2pDLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUVsRSxJQUFJLFFBQVEsR0FBRyxlQUFlLENBQUM7QUFDL0IsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbkUsSUFBSSxRQUFRLEdBQUcsTUFBTSxHQUFHLFFBQVEsQ0FBQztBQUNqQyxJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzlDLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQUUsV0FBVyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQ3pELElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQUUsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBR3hELElBQUksTUFBTSxHQUFHLGdDQUFnQyxDQUFDO0FBRTlDLElBQUksT0FBTyxHQUFFLGdDQUFnQyxDQUFDO0FBRTlDLElBQUksT0FBTyxHQUFHLDZDQUE2QyxDQUFDO0FBRTVELElBQUksT0FBTyxHQUFHLDZDQUE2QyxDQUFDO0FBQzVELElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQ3pELElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxnREFBZ0QsRUFDNUQsZ0RBQWdELENBQUMsQ0FBQztBQUsxRCxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFDMUMsTUFBTSxFQUFFLElBQUksRUFDWixtQkFBbUIsRUFDbkIsR0FBRyxDQUFDLENBQUM7QUFFdEIsSUFBSSxPQUFPLEdBQUcsWUFBWSxDQUFDO0FBQzNCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDM0MsSUFBSSxLQUFLLEdBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFFL0MsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLGlEQUFpRDtJQUNyRCxLQUFLLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxFQUN6QixpREFBaUQ7SUFDakQsS0FBSyxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQzNDLElBQUksWUFBWSxHQUFHLEtBQUssQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBRTFELElBQUksV0FBVyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsWUFBWSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBRTVFLElBQUksVUFBVSxDQUFDO0FBQ2YsSUFBSSxXQUFXLENBQUM7QUFDaEIsSUFBSSxXQUFXLENBQUM7QUFDaEIsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBRWxCLElBQUksYUFBYSxHQUFHO0lBQ3BCLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUk7SUFDeEIsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUk7SUFDdEQsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUk7SUFDdEQsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUk7SUFDdEQsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUk7SUFDMUQsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUk7SUFDMUQsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUk7SUFDMUQsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUk7Q0FDekQsQ0FBQztBQUVGLElBQUksYUFBYSxHQUFHO0lBQ3BCLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUk7SUFDcEIsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7SUFDOUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7SUFDOUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUk7SUFDOUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUk7SUFDbEQsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUk7SUFDbEQsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxF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LEdBQUdBLENBQUNBLEVBQUVBLEdBQUdBLEVBQUVBLElBQUlBLE1BQU1BLENBQUNBLE9BQU9BLEVBQUVBLEdBQUdBLENBQUNBO1lBQ2hGQSxLQUFLQSxFQUFFQSxXQUFXQSxFQUFFQSxLQUFLQSxFQUFFQSxXQUFXQTtZQUN0Q0EsTUFBTUEsRUFBRUEsV0FBV0EsRUFBRUEsTUFBTUEsRUFBRUEsV0FBV0E7WUFDeENBLE1BQU1BLEVBQUVBLFdBQVdBLEVBQUVBLE1BQU1BLEVBQUVBLFdBQVdBO1lBQ3hDQSxNQUFNQSxFQUFFQSxXQUFXQSxFQUFFQSxNQUFNQSxFQUFFQSxXQUFXQTtZQUN4Q0EsT0FBT0EsRUFBRUEsV0FBV0EsRUFBRUEsT0FBT0EsRUFBRUEsV0FBV0E7WUFDMUNBLE9BQU9BLEVBQUVBLFdBQVdBLEVBQUVBLE9BQU9BLEVBQUVBLFdBQVdBO1lBQzFDQSxNQUFNQSxFQUFFQSxXQUFXQSxFQUFFQSxNQUFNQSxFQUFFQSxXQUFXQTtZQUN4Q0EsTUFBTUEsRUFBRUEsV0FBV0EsRUFBRUEsTUFBTUEsRUFBRUEsV0FBV0E7WUFDeENBLE1BQU1BLEVBQUVBLFdBQVdBLEVBQUVBLE1BQU1BLEVBQUVBLFdBQVdBO1lBQ3hDQSxPQUFPQSxFQUFFQSxXQUFXQSxFQUFFQSxPQUFPQSxFQUFFQSxXQUFXQTtZQUMxQ0EsT0FBT0EsRUFBRUEsV0FBV0EsRUFBRUEsT0FBT0EsRUFBRUEsV0FBV0E7WUFDMUNBLE9BQU9BLEVBQUVBLFdBQVdBLEVBQUVBLE9BQU9BLEVBQUVBLFdBQVdBO1lBQzFDQSxPQUFPQSxFQUFFQSxXQUFXQSxFQUFFQSxPQUFPQSxFQUFFQSxXQUFXQTtZQUMxQ0EsT0FBT0EsRUFBRUEsV0FBV0EsRUFBRUEsT0FBT0EsRUFBRUEsV0FBV0E7WUFDMUNBLE9BQU9BLEVBQUVBLFdBQVdBLEVBQUVBLE9BQU9BLEVBQUVBLFdBQVdBO1lBQzFDQSxHQUFHQSxFQUFFQSxJQUFJQSxFQUFFQSxHQUFHQSxFQUFFQSxJQUFJQTtZQUNwQkEsR0FBR0EsRUFBRUEsSUFBSUEsRUFBRUEsR0FBR0EsRUFBRUEsSUFBSUE7WUFDcEJBLEdBQUdBLEVBQUVBLElBQUlBLEVBQUVBLEdBQUdBLEVBQUVBLElBQUlBO1NBQ25CQSxDQUFDQTtRQUVGQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUFDQSxJQUFJQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUVyQkEsSUFBSUEsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFDZkEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDUkEsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFFbEJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBLENBQzVCQSxDQUFDQTtZQUNHQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUNWQSxDQUFDQTtnQkFDR0EsTUFBTUEsSUFBSUEsVUFBVUEsQ0FBQ0EsMEJBQTBCQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN4R0EsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsU0FBU0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDM0JBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ25DQSxFQUFFQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUNiQSxDQUFDQTtnQkFDR0EsR0FBR0EsR0FBR0EsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsU0FBU0EsQ0FBQ0E7Z0JBQ25DQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxFQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxHQUFHQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUMxSUEsQ0FBQ0E7b0JBQ0dBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO2dCQUNsQkEsQ0FBQ0E7Z0JBQ0RBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLEVBQUVBLENBQUNBO2dCQUNsQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsS0FBS0EsQ0FBQ0E7Z0JBQ3RCQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxTQUFTQSxDQUFDQTtZQUM5QkEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsSUFBSUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsTUFBTUEsSUFBSUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsUUFBUUEsQ0FBQ0EsQ0FDckhBLENBQUNBO2dCQUNHQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxFQUFFQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUM5SEEsQ0FBQ0E7b0JBQ0dBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO2dCQUNsQkEsQ0FBQ0E7Z0JBQ0RBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLEVBQUVBLENBQUNBO2dCQUNsQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsU0FBU0EsQ0FBQ0E7Z0JBQzFCQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtZQUNqQkEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FDSkEsQ0FBQ0E7Z0JBQ0dBLElBQUlBLENBQUNBLE9BQU9BLElBQUlBLElBQUlBLENBQUNBO2dCQUNyQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0E7Z0JBQ3JDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtZQUNqQkEsQ0FBQ0E7UUFDTEEsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FDaERBLENBQUNBO1lBQ0dBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBO2dCQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQTtZQUNsQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDWEEsT0FBT0EsR0FBR0EsR0FBR0EsR0FBR0EsRUFDaEJBLENBQUNBO2dCQUNHQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQTtvQkFBQ0EsTUFBTUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxJQUFJQSxDQUFDQTtvQkFBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsTUFBTUEsR0FBQ0EsT0FBT0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsT0FBT0EsQ0FBQ0E7Z0JBQzFFQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxJQUFJQSxDQUFDQTtvQkFBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQy9DQSxJQUFJQTtvQkFBQ0EsS0FBS0EsQ0FBQ0E7Z0JBQ1hBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBO1lBQ2xCQSxDQUFDQTtZQUNEQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxDQUFDQTtnQkFBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0E7WUFFeENBLEVBQUVBLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQzdDQSxDQUFDQTtnQkFDR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FDN0JBLENBQUNBO29CQUNHQSxJQUFJQSxhQUFhQSxHQUFHQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtvQkFDeERBLElBQUlBLE1BQU1BLEdBQUdBLEdBQUdBLEdBQUdBLGFBQWFBLENBQUNBLE1BQU1BLENBQUNBO29CQUN4Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsU0FBU0EsRUFBRUEsYUFBYUEsRUFDL0NBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLEdBQUdBLEdBQUdBLGFBQWFBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO3dCQUN6RUEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7b0JBQ2xCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUNuREEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7d0JBQzdEQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtvQkFDbEJBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO2dCQUNqQkEsQ0FBQ0E7Z0JBQ0RBLElBQUlBLENBQ0pBLENBQUNBO29CQUNHQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUNoREEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7d0JBQzFEQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtvQkFDbEJBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBO3dCQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtnQkFDeENBLENBQUNBO1lBQ0xBLENBQUNBO1lBRURBLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQ25EQSxDQUFDQTtnQkFDR0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7Z0JBQzFCQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxHQUFHQSxDQUFDQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtvQkFDekdBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO1lBQ3RCQSxDQUFDQTtZQUNEQSxPQUFPQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxFQUNyREEsQ0FBQ0E7Z0JBQ0dBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBLENBQ3BDQSxDQUFDQTtvQkFDR0EsTUFBTUEsSUFBSUEsZ0JBQWdCQSxDQUFDQSxxREFBcURBLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLEdBQUdBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO2dCQUM3SUEsQ0FBQ0E7Z0JBQ0RBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO2dCQUNoREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsUUFBUUEsRUFBRUEsRUFBRUEsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsR0FBR0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FDM0ZBLENBQUNBO29CQUNHQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtnQkFDbEJBLENBQUNBO1lBQ0xBLENBQUNBO1FBQ0xBLENBQUNBO1FBQ0RBLElBQUlBLENBQ0pBLENBQUNBO1lBQ0dBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQ1ZBLENBQUNBO2dCQUNHQSxNQUFNQSxJQUFJQSxVQUFVQSxDQUFDQSw2QkFBNkJBLEVBQUVBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1lBQ3JGQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUMzQkEsQ0FBQ0E7UUFFREEsT0FBT0EsR0FBR0EsR0FBR0EsR0FBR0EsRUFDaEJBLENBQUNBO1lBSUdBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQzdCQSxPQUFPQSxLQUFLQSxLQUFLQSxHQUFHQSxJQUFJQSxLQUFLQSxLQUFLQSxJQUFJQSxJQUFJQSxLQUFLQSxLQUFLQSxJQUFJQSxFQUN4REEsQ0FBQ0E7Z0JBQ0dBLEdBQUdBLElBQUlBLENBQUNBLENBQUNBO2dCQUNUQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM3QkEsQ0FBQ0E7WUFDREEsVUFBVUEsQ0FBQ0EsU0FBU0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDekJBLElBQUlBLFdBQVdBLEdBQUdBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBQ3ZEQSxFQUFFQSxDQUFDQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUNoQkEsQ0FBQ0E7Z0JBQ0dBLElBQUlBLEtBQUtBLEdBQUdBLEdBQUdBLENBQUNBO2dCQUNoQkEsR0FBR0EsR0FBR0EsS0FBS0EsR0FBR0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7Z0JBQ3BDQSxJQUFJQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtnQkFDOUJBLElBQUlBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO2dCQUM1QkEsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0E7Z0JBQ1ZBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLEtBQUtBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO2dCQUN2Q0EsSUFBSUEsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2pDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxLQUFLQSxHQUFHQSxJQUFJQSxLQUFLQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUNoRkEsQ0FBQ0E7b0JBQ0dBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLFFBQVFBLEVBQUVBLEtBQUtBLEVBQUVBLElBQUlBLEVBQUVBLElBQUlBLEVBQUVBLElBQUlBLENBQUNB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QSxjQUFjQSxDQUFDQSxPQUFPQSxDQUFDQTtvQkFDdENBLGFBQWFBLENBQUNBLGNBQWNBLENBQUNBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO29CQUNuREEsYUFBYUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FDNURBLENBQUNBO29CQUNHQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxLQUFLQSxJQUFJQSxDQUFDQSxDQUNyQ0EsQ0FBQ0E7d0JBQ0dBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO3dCQUNuQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0JBQzdFQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTt3QkFDckNBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBO3dCQUNyQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0E7d0JBQ3JCQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtvQkFDakJBLENBQUNBO29CQUNEQSxJQUFJQSxDQUNKQSxDQUFDQTt3QkFDR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsUUFBUUEsRUFBRUEsS0FBS0EsRUFBRUEsSUFBSUEsRUFBRUEsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7NEJBQUNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBO29CQUN6RkEsQ0FBQ0E7Z0JBQ0xBLENBQUNBO2dCQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUNoREEsQ0FBQ0E7b0JBQ0dBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLEVBQUVBLEtBQUtBLEVBQUVBLElBQUlBLEVBQUVBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO3dCQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtnQkFDdkZBLENBQUNBO2dCQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxLQUFLQSxJQUFJQSxDQUFDQSxDQUMxQkEsQ0FBQ0E7b0JBQ0dBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLEVBQUVBLEtBQUtBLEVBQUVBLElBQUlBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLEdBQUdBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO3dCQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtvQkFDN0ZBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLENBQUNBO2dCQUMxQkEsQ0FBQ0E7Z0JBQ0RBLElBQUlBLENBQ0pBLENBQUNBO29CQUNHQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ3REQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTt3QkFBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQzNEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxFQUFFQSxLQUFLQSxFQUFFQSxJQUFJQSxFQUFFQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTt3QkFBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7Z0JBQ3JGQSxDQUFDQTtZQUNMQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUNKQSxDQUFDQTtnQkFDR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsWUFBWUEsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsR0FBR0EsR0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FDL0dBLENBQUNBO29CQUNHQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQTtnQkFDbEJBLENBQUNBO2dCQUNEQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNiQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUVEQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtJQUNqQkEsQ0FBQ0E7SUFyVU1GLGdCQUFNQSxHQUFHQTtRQUNaQSxXQUFXQSxFQUFFQSxDQUFDQTtRQUNkQSxNQUFNQSxFQUFFQSxDQUFDQTtRQUNUQSxRQUFRQSxFQUFFQSxDQUFDQTtRQUNYQSxRQUFRQSxFQUFFQSxDQUFDQTtRQUNYQSxTQUFTQSxFQUFFQSxDQUFDQTtRQUNaQSxRQUFRQSxFQUFFQSxDQUFDQTtRQUNYQSxRQUFRQSxFQUFFQSxDQUFDQTtRQUNYQSxNQUFNQSxFQUFFQSxDQUFDQTtRQUNUQSxNQUFNQSxFQUFFQSxDQUFDQTtRQUNUQSxNQUFNQSxFQUFFQSxDQUFDQTtRQUNUQSxNQUFNQSxFQUFFQSxFQUFFQTtRQUNWQSxPQUFPQSxFQUFFQSxFQUFFQTtRQUNYQSxPQUFPQSxFQUFFQSxFQUFFQTtRQUNYQSxNQUFNQSxFQUFFQSxFQUFFQTtRQUNWQSxNQUFNQSxFQUFFQSxFQUFFQTtRQUNWQSxPQUFPQSxFQUFFQSxFQUFFQTtRQUNYQSxNQUFNQSxFQUFFQSxFQUFFQTtRQUNWQSxPQUFPQSxFQUFFQSxFQUFFQTtRQUNYQSxNQUFNQSxFQUFFQSxFQUFFQTtRQUNWQSxPQUFPQSxFQUFFQSxFQUFFQTtRQUNYQSxNQUFNQSxFQUFFQSxFQUFFQTtRQUNWQSxTQUFTQSxFQUFFQSxFQUFFQTtRQUNiQSxPQUFPQSxFQUFFQSxFQUFFQTtRQUNYQSxLQUFLQSxFQUFFQSxFQUFFQTtRQUNUQSxTQUFTQSxFQUFFQSxFQUFFQTtRQUNiQSxXQUFXQSxFQUFFQSxFQUFFQTtRQUNmQSxRQUFRQSxFQUFFQSxFQUFFQTtRQUNaQSxRQUFRQSxFQUFFQSxFQUFFQTtRQUNaQSxTQUFTQSxFQUFFQSxFQUFFQTtRQUNiQSxVQUFVQSxFQUFFQSxFQUFFQTtRQUNkQSxXQUFXQSxFQUFFQSxFQUFFQTtRQUNmQSxjQUFjQSxFQUFFQSxFQUFFQTtRQUNsQkEsT0FBT0EsRUFBRUEsRUFBRUE7UUFDWEEsWUFBWUEsRUFBRUEsRUFBRUE7UUFDaEJBLFdBQVdBLEVBQUVBLEVBQUVBO1FBQ2ZBLFlBQVlBLEVBQUVBLEVBQUVBO1FBQ2hCQSxZQUFZQSxFQUFFQSxFQUFFQTtRQUNoQkEsV0FBV0EsRUFBRUEsRUFBRUE7UUFDZkEsVUFBVUEsRUFBRUEsRUFBRUE7UUFDZEEsV0FBV0EsRUFBRUEsRUFBRUE7UUFDZkEsWUFBWUEsRUFBRUEsRUFBRUE7UUFDaEJBLGNBQWNBLEVBQUVBLEVBQUVBO1FBQ2xCQSxZQUFZ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RUFBRUEsRUFBRUEsWUFBWUE7UUFDcENBLEdBQUdBLEVBQUVBLGFBQWFBO0tBQ3JCQSxDQUFDQTtJQXdQTkEsZ0JBQUNBO0FBQURBLENBQUNBLEFBalhELElBaVhDO0FBRUQsaUJBQVMsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFzc2VydHMgPSByZXF1aXJlKCcuL2Fzc2VydHMnKTtcbmltcG9ydCBiYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG5pbXBvcnQgSW5kZW50YXRpb25FcnJvciA9IHJlcXVpcmUoJy4vSW5kZW50YXRpb25FcnJvcicpO1xuaW1wb3J0IFRva2VuRXJyb3IgPSByZXF1aXJlKCcuL1Rva2VuRXJyb3InKTtcblxuICAgIC8qKiBAcGFyYW0gey4uLip9IHggKi9cbiAgICBmdW5jdGlvbiBncm91cCguLi54OiBhbnlbXSlcbiAgICB7XG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgcmV0dXJuICcoJyArIGFyZ3Muam9pbignfCcpICsgJyknOyBcbiAgICB9XG5cbiAgICAvKiogQHBhcmFtIHsuLi4qfSB4ICovXG4gICAgZnVuY3Rpb24gYW55KHgpIHsgcmV0dXJuIGdyb3VwLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgKyBcIipcIjsgfVxuXG4gICAgLyoqIEBwYXJhbSB7Li4uKn0geCAqL1xuICAgIGZ1bmN0aW9uIG1heWJlKHgpIHsgcmV0dXJuIGdyb3VwLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgKyBcIj9cIjsgfVxuXG4gICAgLyogd2UgaGF2ZSB0byB1c2Ugc3RyaW5nIGFuZCBjdG9yIHRvIGJlIGFibGUgdG8gYnVpbGQgcGF0dGVybnMgdXAuICsgb24gLy4uLi9cbiAgICAgKiBkb2VzIHNvbWV0aGluZyBzdHJhbmdlLiAqL1xuICAgIHZhciBXaGl0ZXNwYWNlID0gXCJbIFxcXFxmXFxcXHRdKlwiO1xuICAgIHZhciBDb21tZW50XyA9IFwiI1teXFxcXHJcXFxcbl0qXCI7XG4gICAgdmFyIElkZW50ID0gXCJbYS16QS1aX11cXFxcdypcIjtcblxuICAgIHZhciBCaW5udW1iZXIgPSAnMFtiQl1bMDFdKic7XG4gICAgdmFyIEhleG51bWJlciA9ICcwW3hYXVtcXFxcZGEtZkEtRl0qW2xMXT8nO1xuICAgIHZhciBPY3RudW1iZXIgPSAnMFtvT10/WzAtN10qW2xMXT8nO1xuICAgIHZhciBEZWNudW1iZXIgPSAnWzEtOV1cXFxcZCpbbExdPyc7XG4gICAgdmFyIEludG51bWJlciA9IGdyb3VwKEJpbm51bWJlciwgSGV4bnVtYmVyLCBPY3RudW1iZXIsIERlY251bWJlcik7XG5cbiAgICB2YXIgRXhwb25lbnQgPSBcIltlRV1bLStdP1xcXFxkK1wiO1xuICAgIHZhciBQb2ludGZsb2F0ID0gZ3JvdXAoXCJcXFxcZCtcXFxcLlxcXFxkKlwiLCBcIlxcXFwuXFxcXGQrXCIpICsgbWF5YmUoRXhwb25lbnQpO1xuICAgIHZhciBFeHBmbG9hdCA9ICdcXFxcZCsnICsgRXhwb25lbnQ7XG4gICAgdmFyIEZsb2F0bnVtYmVyID0gZ3JvdXAoUG9pbnRmbG9hdCwgRXhwZmxvYXQpO1xuICAgIHZhciBJbWFnbnVtYmVyID0gZ3JvdXAoXCJcXFxcZCtbakpdXCIsIEZsb2F0bnVtYmVyICsgXCJbakpdXCIpO1xuICAgIHZhciBOdW1iZXJfID0gZ3JvdXAoSW1hZ251bWJlciwgRmxvYXRudW1iZXIsIEludG51bWJlcik7XG5cbiAgICAvLyB0YWlsIGVuZCBvZiAnIHN0cmluZ1xuICAgIHZhciBTaW5nbGUgPSBcIl5bXidcXFxcXFxcXF0qKD86XFxcXFxcXFwuW14nXFxcXFxcXFxdKikqJ1wiO1xuICAgIC8vIHRhaWwgZW5kIG9mIFwiIHN0cmluZ1xuICAgIHZhciBEb3VibGVfPSAnXlteXCJcXFxcXFxcXF0qKD86XFxcXFxcXFwuW15cIlxcXFxcXFxcXSopKlwiJztcbiAgICAvLyB0YWlsIGVuZCBvZiAnJycgc3RyaW5nXG4gICAgdmFyIFNpbmdsZTMgPSBcIlteJ1xcXFxcXFxcXSooPzooPzpcXFxcXFxcXC58Jyg/IScnKSlbXidcXFxcXFxcXF0qKSonJydcIjtcbiAgICAvLyB0YWlsIGVuZCBvZiBcIlwiXCIgc3RyaW5nXG4gICAgdmFyIERvdWJsZTMgPSAnW15cIlxcXFxcXFxcXSooPzooPzpcXFxcXFxcXC58XCIoPyFcIlwiKSlbXlwiXFxcXFxcXFxdKikqXCJcIlwiJztcbiAgICB2YXIgVHJpcGxlID0gZ3JvdXAoXCJbdWJVQl0/W3JSXT8nJydcIiwgJ1t1YlVCXT9bclJdP1wiXCJcIicpO1xuICAgIHZhciBTdHJpbmdfID0gZ3JvdXAoXCJbdVVdP1tyUl0/J1teXFxcXG4nXFxcXFxcXFxdKig/OlxcXFxcXFxcLlteXFxcXG4nXFxcXFxcXFxdKikqJ1wiLFxuICAgICAgICAgICAgJ1t1VV0/W3JSXT9cIlteXFxcXG5cIlxcXFxcXFxcXSooPzpcXFxcXFxcXC5bXlxcXFxuXCJcXFxcXFxcXF0qKSpcIicpO1xuXG4gICAgLy8gQmVjYXVzZSBvZiBsZWZ0bW9zdC10aGVuLWxvbmdlc3QgbWF0Y2ggc2VtYW50aWNzLCBiZSBzdXJlIHRvIHB1dCB0aGVcbiAgICAvLyBsb25nZXN0IG9wZXJhdG9ycyBmaXJzdCAoZS5nLiwgaWYgPSBjYW1lIGJlZm9yZSA9PSwgPT0gd291bGQgZ2V0XG4gICAgLy8gcmVjb2duaXplZCBhcyB0d28gaW5zdGFuY2VzIG9mID0pLlxuICAgIHZhciBPcGVyYXRvciA9IGdyb3VwKFwiXFxcXCpcXFxcKj0/XCIsIFwiPj49P1wiLCBcIjw8PT9cIiwgXCI8PlwiLCBcIiE9XCIsXG4gICAgICAgICAgICAgICAgICAgICBcIi8vPT9cIiwgXCItPlwiLFxuICAgICAgICAgICAgICAgICAgICAgXCJbK1xcXFwtKi8lJnxePTw+XT0/XCIsXG4gICAgICAgICAgICAgICAgICAgICBcIn5cIik7XG5cbiAgICB2YXIgQnJhY2tldCA9ICdbXFxcXF1bKCl7fV0nO1xuICAgIHZhciBTcGVjaWFsID0gZ3JvdXAoJ1xcXFxyP1xcXFxuJywgJ1s6Oy4sYEBdJyk7XG4gICAgdmFyIEZ1bm55ICA9IGdyb3VwKE9wZXJhdG9yLCBCcmFja2V0LCBTcGVjaWFsKTtcblxuICAgIHZhciBDb250U3RyID0gZ3JvdXAoXCJbdVViQl0/W3JSXT8nW15cXFxcbidcXFxcXFxcXF0qKD86XFxcXFxcXFwuW15cXFxcbidcXFxcXFxcXF0qKSpcIiArXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwKFwiJ1wiLCAnXFxcXFxcXFxcXFxccj9cXFxcbicpLFxuICAgICAgICAgICAgICAgICAgICAnW3VVYkJdP1tyUl0/XCJbXlxcXFxuXCJcXFxcXFxcXF0qKD86XFxcXFxcXFwuW15cXFxcblwiXFxcXFxcXFxdKikqJyArXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwKCdcIicsICdcXFxcXFxcXFxcXFxyP1xcXFxuJykpO1xuICAgIHZhciBQc2V1ZG9FeHRyYXMgPSBncm91cCgnXFxcXFxcXFxcXFxccj9cXFxcbicsIENvbW1lbnRfLCBUcmlwbGUpO1xuICAgIC8vIE5lZWQgdG8gcHJlZml4IHdpdGggXCJeXCIgYXMgd2Ugb25seSB3YW50IHRvIG1hdGNoIHdoYXQncyBuZXh0XG4gICAgdmFyIFBzZXVkb1Rva2VuID0gXCJeXCIgKyBncm91cChQc2V1ZG9FeHRyYXMsIE51bWJlcl8sIEZ1bm55LCBDb250U3RyLCBJZGVudCk7XG5cbiAgICB2YXIgcHNldWRvcHJvZztcbiAgICB2YXIgc2luZ2xlM3Byb2c7XG4gICAgdmFyIGRvdWJsZTNwcm9nO1xuICAgIHZhciBlbmRwcm9ncyA9IHt9O1xuXG4gICAgdmFyIHRyaXBsZV9xdW90ZWQgPSB7XG4gICAgXCInJydcIjogdHJ1ZSwgJ1wiXCJcIic6IHRydWUsXG4gICAgXCJyJycnXCI6IHRydWUsICdyXCJcIlwiJzogdHJ1ZSwgXCJSJycnXCI6IHRydWUsICdSXCJcIlwiJzogdHJ1ZSxcbiAgICBcInUnJydcIjogdHJ1ZSwgJ3VcIlwiXCInOiB0cnVlLCBcIlUnJydcIjogdHJ1ZSwgJ1VcIlwiXCInOiB0cnVlLFxuICAgIFwiYicnJ1wiOiB0cnVlLCAnYlwiXCJcIic6IHRydWUsIFwiQicnJ1wiOiB0cnVlLCAnQlwiXCJcIic6IHRydWUsXG4gICAgXCJ1cicnJ1wiOiB0cnVlLCAndXJcIlwiXCInOiB0cnVlLCBcIlVyJycnXCI6IHRydWUsICdVclwiXCJcIic6IHRydWUsXG4gICAgXCJ1UicnJ1wiOiB0cnVlLCAndVJcIlwiXCInOiB0cnVlLCBcIlVSJycnXCI6IHRydWUsICdVUlwiXCJcIic6IHRydWUsXG4gICAgXCJicicnJ1wiOiB0cnVlLCAnYnJcIlwiXCInOiB0cnVlLCBcIkJyJycnXCI6IHRydWUsICdCclwiXCJcIic6IHRydWUsXG4gICAgXCJiUicnJ1wiOiB0cnVlLCAnYlJcIlwiXCInOiB0cnVlLCBcIkJSJycnXCI6IHRydWUsICdCUlwiXCJcIic6IHRydWVcbiAgICB9O1xuXG4gICAgdmFyIHNpbmdsZV9xdW90ZWQgPSB7XG4gICAgXCInXCI6IHRydWUsICdcIic6IHRydWUsXG4gICAgXCJyJ1wiOiB0cnVlLCAnclwiJzogdHJ1ZSwgXCJSJ1wiOiB0cnVlLCAnUlwiJzogdHJ1ZSxcbiAgICBcInUnXCI6IHRydWUsICd1XCInOiB0cnVlLCBcIlUnXCI6IHRydWUsICdVXCInOiB0cnVlLFxuICAgIFwiYidcIjogdHJ1ZSwgJ2JcIic6IHRydWUsIFwiQidcIjogdHJ1ZSwgJ0JcIic6IHRydWUsXG4gICAgXCJ1cidcIjogdHJ1ZSwgJ3VyXCInOiB0cnVlLCBcIlVyJ1wiOiB0cnVlLCAnVXJcIic6IHRydWUsXG4gICAgXCJ1UidcIjogdHJ1ZSwgJ3VSXCInOiB0cnVlLCBcIlVSJ1wiOiB0cnVlLCAnVVJcIic6IHRydWUsXG4gICAgXCJicidcIjogdHJ1ZSwgJ2JyXCInOiB0cnVlLCBcIkJyJ1wiOiB0cnVlLCAnQnJcIic6IHRydWUsXG4gICAgXCJiUidcIjogdHJ1ZSwgJ2JSXCInOiB0cnVlLCBcIkJSJ1wiOiB0cnVlLCAnQlJcIic6IHRydWVcbiAgICB9O1xuXG4gICAgLy8gaGFjayB0byBtYWtlIGNsb3N1cmUga2VlcCB0aG9zZSBvYmplY3RzLiBub3Qgc3VyZSB3aGF0IGEgYmV0dGVyIHdheSBpcy5cbiAgICAoZnVuY3Rpb24oKSB7XG4gICAgIGZvciAodmFyIGsgaW4gdHJpcGxlX3F1b3RlZCkge31cbiAgICAgZm9yICh2YXIgayBpbiBzaW5nbGVfcXVvdGVkKSB7fVxuICAgICB9KCkpO1xuXG5cbiAgICB2YXIgdGFic2l6ZSA9IDg7XG5cbiAgICBmdW5jdGlvbiBjb250YWlucyhhLCBvYmopXG4gICAge1xuICAgICAgICB2YXIgaSA9IGEubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoaS0tKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoYVtpXSA9PT0gb2JqKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByc3RyaXAoaW5wdXQsIHdoYXQpXG4gICAge1xuICAgICAgICBmb3IgKHZhciBpID0gaW5wdXQubGVuZ3RoOyBpID4gMDsgLS1pKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAod2hhdC5pbmRleE9mKGlucHV0LmNoYXJBdChpIC0gMSkpID09PSAtMSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucHV0LnN1YnN0cmluZygwLCBpKTtcbiAgICB9XG5cbi8qKlxuICogVGhpcyBpcyBhIHBvcnQgb2YgdG9rZW5pemUucHkgYnkgS2EtUGluZyBZZWUuXG4gKlxuICogZWFjaCBjYWxsIHRvIHJlYWRsaW5lIHNob3VsZCByZXR1cm4gb25lIGxpbmUgb2YgaW5wdXQgYXMgYSBzdHJpbmcsIG9yXG4gKiB1bmRlZmluZWQgaWYgaXQncyBmaW5pc2hlZC5cbiAqXG4gKiBjYWxsYmFjayBpcyBjYWxsZWQgZm9yIGVhY2ggdG9rZW4gd2l0aCA1IGFyZ3M6XG4gKiAxLiB0aGUgdG9rZW4gdHlwZVxuICogMi4gdGhlIHRva2VuIHN0cmluZ1xuICogMy4gWyBzdGFydF9yb3csIHN0YXJ0X2NvbCBdXG4gKiA0LiBbIGVuZF9yb3csIGVuZF9jb2wgXVxuICogNS4gbG9naWNhbCBsaW5lIHdoZXJlIHRoZSB0b2tlbiB3YXMgZm91bmQsIGluY2x1ZGluZyBjb250aW51YXRpb24gbGluZXNcbiAqXG4gKiBjYWxsYmFjayBjYW4gcmV0dXJuIHRydWUgdG8gYWJvcnQuXG4gKi9cbmNsYXNzIFRva2VuaXplclxue1xuICAgIHByaXZhdGUgZmlsZU5hbWU6IHN0cmluZztcbiAgICBwcml2YXRlIGludGVyYWN0aXZlOiBib29sZWFuO1xuICAgIHByaXZhdGUgY2FsbGJhY2s6ICh0b2tlblR5cGU6IG51bWJlciwgdG9rZW46IHN0cmluZywgc3RhcnQ6IG51bWJlcltdLCBlbmQ6IG51bWJlcltdLCBsaW5lOnN0cmluZykgPT4gYW55O1xuXG4gICAgcHJpdmF0ZSBkb25lRnVuYzogKCkgPT4gc3RyaW5nO1xuICAgIFxuICAgIHByaXZhdGUgbG51bSA9IDA7XG4gICAgcHJpdmF0ZSBwYXJlbmxldiA9IDA7XG4gICAgcHJpdmF0ZSBjb250aW51ZWQgPSBmYWxzZTtcbiAgICBwcml2YXRlIG5hbWVjaGFycyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXyc7XG4gICAgcHJpdmF0ZSBudW1jaGFycyA9ICcwMTIzNDU2Nzg5JztcbiAgICBwcml2YXRlIGNvbnRzdHIgPSAnJztcbiAgICBwcml2YXRlIG5lZWRjb250ID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBjb250bGluZSA9IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIGluZGVudHMgPSBbMF07XG4gICAgcHJpdmF0ZSBlbmRwcm9nOiBSZWdFeHAgPSAvLiovO1xuICAgIHByaXZhdGUgc3Ryc3RhcnQgPSBbLTEsLTFdO1xuXG4gICAgY29uc3RydWN0b3IoZmlsZU5hbWU6IHN0cmluZywgaW50ZXJhY3RpdmU6IGJvb2xlYW4sIGNhbGxiYWNrOiAodG9rZW5UeXBlOiBudW1iZXIsIHRva2VuOiBzdHJpbmcsIHN0YXJ0OiBudW1iZXJbXSwgZW5kOiBudW1iZXJbXSwgbGluZTpzdHJpbmcpID0+IGFueSlcbiAgICB7XG4gICAgICAgIGFzc2VydHMuYXNzZXJ0KGJhc2UuaXNTdHJpbmcoZmlsZU5hbWUpLCBcImZpbGVOYW1lIG11c3QgYmUgYSBzdHJpbmdcIik7XG5cbiAgICAgICAgdGhpcy5maWxlTmFtZSA9IGZpbGVOYW1lO1xuICAgICAgICB0aGlzLmludGVyYWN0aXZlID0gaW50ZXJhY3RpdmU7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcblxuICAgICAgICB0aGlzLmRvbmVGdW5jID0gZnVuY3Rpb24oKVxuICAgICAgICB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHRoaXMuaW5kZW50cy5sZW5ndGg7ICsraSkgLy8gcG9wIHJlbWFpbmluZyBpbmRlbnQgbGV2ZWxzXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2soVG9rZW5pemVyLlRva2Vucy5UX0RFREVOVCwgJycsIFt0aGlzLmxudW0sIDBdLCBbdGhpcy5sbnVtLCAwXSwgJycpKSByZXR1cm4gJ2RvbmUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2soVG9rZW5pemVyLlRva2Vucy5UX0VORE1BUktFUiwgJycsIFt0aGlzLmxudW0sIDBdLCBbdGhpcy5sbnVtLCAwXSwgJycpKSByZXR1cm4gJ2RvbmUnO1xuXG4gICAgICAgICAgICByZXR1cm4gJ2ZhaWxlZCc7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3ltYm9saWMgKG51bWVyaWMpIGNvbnN0YW50cyBmb3IgdG9rZW5zLlxuICAgICAqL1xuICAgIHN0YXRpYyBUb2tlbnMgPSB7XG4gICAgICAgIFRfRU5ETUFSS0VSOiAwLFxuICAgICAgICBUX05BTUU6IDEsXG4gICAgICAgIFRfTlVNQkVSOiAyLFxuICAgICAgICBUX1NUUklORzogMyxcbiAgICAgICAgVF9ORVdMSU5FOiA0LFxuICAgICAgICBUX0lOREVOVDogNSxcbiAgICAgICAgVF9ERURFTlQ6IDYsXG4gICAgICAgIFRfTFBBUjogNyxcbiAgICAgICAgVF9SUEFSOiA4LFxuICAgICAgICBUX0xTUUI6IDksXG4gICAgICAgIFRfUlNRQjogMTAsXG4gICAgICAgIFRfQ09MT046IDExLFxuICAgICAgICBUX0NPTU1BOiAxMixcbiAgICAgICAgVF9TRU1JOiAxMyxcbiAgICAgICAgVF9QTFVTOiAxNCxcbiAgICAgICAgVF9NSU5VUzogMTUsXG4gICAgICAgIFRfU1RBUjogMTYsXG4gICAgICAgIFRfU0xBU0g6IDE3LFxuICAgICAgICBUX1ZCQVI6IDE4LFxuICAgICAgICBUX0FNUEVSOiAxOSxcbiAgICAgICAgVF9MRVNTOiAyMCxcbiAgICAgICAgVF9HUkVBVEVSOiAyMSxcbiAgICAgICAgVF9FUVVBTDogMjIsXG4gICAgICAgIFRfRE9UOiAyMyxcbiAgICAgICAgVF9QRVJDRU5UOiAyNCxcbiAgICAgICAgVF9CQUNLUVVPVEU6IDI1LFxuICAgICAgICBUX0xCUkFDRTogMjYsXG4gICAgICAgIFRfUkJSQUNFOiAyNyxcbiAgICAgICAgVF9FUUVRVUFMOiAyOCxcbiAgICAgICAgVF9OT1RFUVVBTDogMjksXG4gICAgICAgIFRfTEVTU0VRVUFMOiAzMCxcbiAgICAgICAgVF9HUkVBVEVSRVFVQUw6IDMxLFxuICAgICAgICBUX1RJTERFOiAzMixcbiAgICAgICAgVF9DSVJDVU1GTEVYOiAzMyxcbiAgICAgICAgVF9MRUZUU0hJRlQ6IDM0LFxuICAgICAgICBUX1JJR0hUU0hJRlQ6IDM1LFxuICAgICAgICBUX0RPVUJMRVNUQVI6IDM2LFxuICAgICAgICBUX1BMVVNFUVVBTDogMzcsXG4gICAgICAgIFRfTUlORVFVQUw6IDM4LFxuICAgICAgICBUX1NUQVJFUVVBTDogMzksXG4gICAgICAgIFRfU0xBU0hFUVVBTDogNDAsXG4gICAgICAgIFRfUEVSQ0VOVEVRVUFMOiA0MSxcbiAgICAgICAgVF9BTVBFUkVRVUFMOiA0MixcbiAgICAgICAgVF9WQkFSRVFVQUw6IDQzLFxuICAgICAgICBUX0NJUkNVTUZMRVhFUVVBTDogNDQsXG4gICAgICAgIFRfTEVGVFNISUZURVFVQUw6IDQ1LFxuICAgICAgICBUX1JJR0hUU0hJRlRFUVVBTDogNDYsXG4gICAgICAgIFRfRE9VQkxFU1RBUkVRVUFMOiA0NyxcbiAgICAgICAgVF9ET1VCTEVTTEFTSDogNDgsXG4gICAgICAgIFRfRE9VQkxFU0xBU0hFUVVBTDogNDksXG4gICAgICAgIFRfQVQ6IDUwLFxuICAgICAgICBUX09QOiA1MSxcbiAgICAgICAgVF9DT01NRU5UOiA1MixcbiAgICAgICAgVF9OTDogNTMsXG4gICAgICAgIFRfUkFSUk9XOiA1NCxcbiAgICAgICAgVF9FUlJPUlRPS0VOOiA1NSxcbiAgICAgICAgVF9OX1RPS0VOUzogNTYsXG4gICAgICAgIFRfTlRfT0ZGU0VUOiAyNTZcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTWFwIGZyb20gdG9rZW4gc3ltYm9saWMgKG51bWVyaWMpIGNvbnN0YW50IHRvIChzdHJpbmcpIG5hbWUuIFxuICAgICAqL1xuICAgIHN0YXRpYyB0b2tlbk5hbWVzID0ge1xuICAgICAgICAwOiAnVF9FTkRNQVJLRVInLCAxOiAnVF9OQU1FJywgMjogJ1RfTlVNQkVSJywgMzogJ1RfU1RSSU5HJywgNDogJ1RfTkVXTElORScsXG4gICAgICAgIDU6ICdUX0lOREVOVCcsIDY6ICdUX0RFREVOVCcsIDc6ICdUX0xQQVInLCA4OiAnVF9SUEFSJywgOTogJ1RfTFNRQicsXG4gICAgICAgIDEwOiAnVF9SU1FCJywgMTE6ICdUX0NPTE9OJywgMTI6ICdUX0NPTU1BJywgMTM6ICdUX1NFTUknLCAxNDogJ1RfUExVUycsXG4gICAgICAgIDE1OiAnVF9NSU5VUycsIDE2OiAnVF9TVEFSJywgMTc6ICdUX1NMQVNIJywgMTg6ICdUX1ZCQVInLCAxOTogJ1RfQU1QRVInLFxuICAgICAgICAyMDogJ1RfTEVTUycsIDIxOiAnVF9HUkVBVEVSJywgMjI6ICdUX0VRVUFMJywgMjM6ICdUX0RPVCcsIDI0OiAnVF9QRVJDRU5UJyxcbiAgICAgICAgMjU6ICdUX0JBQ0tRVU9URScsIDI2OiAnVF9MQlJBQ0UnLCAyNzogJ1RfUkJSQUNFJywgMjg6ICdUX0VRRVFVQUwnLCAyOTogJ1RfTk9URVFVQUwnLFxuICAgICAgICAzMDogJ1RfTEVTU0VRVUFMJywgMzE6ICdUX0dSRUFURVJFUVVBTCcsIDMyOiAnVF9USUxERScsIDMzOiAnVF9DSVJDVU1GTEVYJywgMzQ6ICdUX0xFRlRTSElGVCcsXG4gICAgICAgIDM1OiAnVF9SSUdIVFNISUZUJywgMzY6ICdUX0RPVUJMRVNUQVInLCAzNzogJ1RfUExVU0VRVUFMJywgMzg6ICdUX01JTkVRVUFMJywgMzk6ICdUX1NUQVJFUVVBTCcsXG4gICAgICAgIDQwOiAnVF9TTEFTSEVRVUFMJywgNDE6ICdUX1BFUkNFTlRFUVVBTCcsIDQyOiAnVF9BTVBFUkVRVUFMJywgNDM6ICdUX1ZCQVJFUVVBTCcsIDQ0OiAnVF9DSVJDVU1GTEVYRVFVQUwnLFxuICAgICAgICA0NTogJ1RfTEVGVFNISUZURVFVQUwnLCA0NjogJ1RfUklHSFRTSElGVEVRVUFMJywgNDc6ICdUX0RPVUJMRVNUQVJFUVVBTCcsIDQ4OiAnVF9ET1VCTEVTTEFTSCcsIDQ5OiAnVF9ET1VCTEVTTEFTSEVRVUFMJyxcbiAgICAgICAgNTA6ICdUX0FUJywgNTE6ICdUX09QJywgNTI6ICdUX0NPTU1FTlQnLCA1MzogJ1RfTkwnLCA1NDogJ1RfUkFSUk9XJyxcbiAgICAgICAgNTU6ICdUX0VSUk9SVE9LRU4nLCA1NjogJ1RfTl9UT0tFTlMnLFxuICAgICAgICAyNTY6ICdUX05UX09GRlNFVCdcbiAgICB9O1xuICAgIFxuICAgIGdlbmVyYXRlVG9rZW5zKGxpbmU6IHN0cmluZyk6IGFueVxuICAgIHtcbiAgICAgICAgdmFyIGVuZG1hdGNoOiBib29sZWFuO1xuICAgICAgICB2YXIgcG9zOiBudW1iZXI7XG4gICAgICAgIHZhciBjb2x1bW46IG51bWJlcjtcbiAgICAgICAgdmFyIGVuZDogbnVtYmVyO1xuICAgICAgICB2YXIgbWF4OiBudW1iZXI7XG5cblxuICAgICAgICAvLyBibm0gLSBNb3ZlIHRoZXNlIGRlZmluaXRpb25zIGluIHRoaXMgZnVuY3Rpb24gb3RoZXJ3aXNlIHRlc3Qgc3RhdGUgaXMgcHJlc2VydmVkIGJldHdlZW5cbiAgICAgICAgLy8gY2FsbHMgb24gc2luZ2xlM3Byb2cgYW5kIGRvdWJsZTNwcm9nIGNhdXNpbmcgd2VpcmQgZXJyb3JzIHdpdGggaGF2aW5nIG11bHRpcGxlIGluc3RhbmNlc1xuICAgICAgICAvLyBvZiB0cmlwbGUgcXVvdGVkIHN0cmluZ3MgaW4gdGhlIHNhbWUgcHJvZ3JhbS5cblxuICAgICAgICB2YXIgcHNldWRvcHJvZyA9IG5ldyBSZWdFeHAoUHNldWRvVG9rZW4pO1xuICAgICAgICB2YXIgc2luZ2xlM3Byb2cgPSBuZXcgUmVnRXhwKFNpbmdsZTMsIFwiZ1wiKTtcbiAgICAgICAgdmFyIGRvdWJsZTNwcm9nID0gbmV3IFJlZ0V4cChEb3VibGUzLCBcImdcIik7XG5cbiAgICAgICAgdmFyIGVuZHByb2dzID0geyAgICAgXCInXCI6IG5ldyBSZWdFeHAoU2luZ2xlLCBcImdcIiksICdcIic6IG5ldyBSZWdFeHAoRG91YmxlXywgXCJnXCIpLFxuICAgICAgICBcIicnJ1wiOiBzaW5nbGUzcHJvZywgJ1wiXCJcIic6IGRvdWJsZTNwcm9nLFxuICAgICAgICBcInInJydcIjogc2luZ2xlM3Byb2csICdyXCJcIlwiJzogZG91YmxlM3Byb2csXG4gICAgICAgIFwidScnJ1wiOiBzaW5nbGUzcHJvZywgJ3VcIlwiXCInOiBkb3VibGUzcHJvZyxcbiAgICAgICAgXCJiJycnXCI6IHNpbmdsZTNwcm9nLCAnYlwiXCJcIic6IGRvdWJsZTNwcm9nLFxuICAgICAgICBcInVyJycnXCI6IHNpbmdsZTNwcm9nLCAndXJcIlwiXCInOiBkb3VibGUzcHJvZyxcbiAgICAgICAgXCJicicnJ1wiOiBzaW5nbGUzcHJvZywgJ2JyXCJcIlwiJzogZG91YmxlM3Byb2csXG4gICAgICAgIFwiUicnJ1wiOiBzaW5nbGUzcHJvZywgJ1JcIlwiXCInOiBkb3VibGUzcHJvZyxcbiAgICAgICAgXCJVJycnXCI6IHNpbmdsZTNwcm9nLCAnVVwiXCJcIic6IGRvdWJsZTNwcm9nLFxuICAgICAgICBcIkInJydcIjogc2luZ2xlM3Byb2csICdCXCJcIlwiJzogZG91YmxlM3Byb2csXG4gICAgICAgIFwidVInJydcIjogc2luZ2xlM3Byb2csICd1UlwiXCJcIic6IGRvdWJsZTNwcm9nLFxuICAgICAgICBcIlVyJycnXCI6IHNpbmdsZTNwcm9nLCAnVXJcIlwiXCInOiBkb3VibGUzcHJvZyxcbiAgICAgICAgXCJVUicnJ1wiOiBzaW5nbGUzcHJvZywgJ1VSXCJcIlwiJzogZG91YmxlM3Byb2csXG4gICAgICAgIFwiYlInJydcIjogc2luZ2xlM3Byb2csICdiUlwiXCJcIic6IGRvdWJsZTNwcm9nLFxuICAgICAgICBcIkJyJycnXCI6IHNpbmdsZTNwcm9nLCAnQnJcIlwiXCInOiBkb3VibGUzcHJvZyxcbiAgICAgICAgXCJCUicnJ1wiOiBzaW5nbGUzcHJvZywgJ0JSXCJcIlwiJzogZG91YmxlM3Byb2csXG4gICAgICAgICdyJzogbnVsbCwgJ1InOiBudWxsLFxuICAgICAgICAndSc6IG51bGwsICdVJzogbnVsbCxcbiAgICAgICAgJ2InOiBudWxsLCAnQic6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIWxpbmUpIGxpbmUgPSAnJztcblxuICAgICAgICB0aGlzLmxudW0gKz0gMTtcbiAgICAgICAgcG9zID0gMDtcbiAgICAgICAgbWF4ID0gbGluZS5sZW5ndGg7XG5cbiAgICAgICAgaWYgKHRoaXMuY29udHN0ci5sZW5ndGggPiAwKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAoIWxpbmUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFRva2VuRXJyb3IoXCJFT0YgaW4gbXVsdGktbGluZSBzdHJpbmdcIiwgdGhpcy5maWxlTmFtZSwgdGhpcy5zdHJzdGFydFswXSwgdGhpcy5zdHJzdGFydFsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVuZHByb2cubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIGVuZG1hdGNoID0gdGhpcy5lbmRwcm9nLnRlc3QobGluZSk7XG4gICAgICAgICAgICBpZiAoZW5kbWF0Y2gpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcG9zID0gZW5kID0gdGhpcy5lbmRwcm9nLmxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFjayhUb2tlbml6ZXIuVG9rZW5zLlRfU1RSSU5HLCB0aGlzLmNvbnRzdHIgKyBsaW5lLnN1YnN0cmluZygwLGVuZCksIHRoaXMuc3Ryc3RhcnQsIFt0aGlzLmxudW0sIGVuZF0sIHRoaXMuY29udGxpbmUgKyBsaW5lKSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZG9uZSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuY29udHN0ciA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMubmVlZGNvbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5uZWVkY29udCAmJiBsaW5lLnN1YnN0cmluZyhsaW5lLmxlbmd0aCAtIDIpICE9PSBcIlxcXFxcXG5cIiAmJiBsaW5lLnN1YnN0cmluZyhsaW5lLmxlbmd0aCAtIDMpICE9PSBcIlxcXFxcXHJcXG5cIilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFjayhUb2tlbml6ZXIuVG9rZW5zLlRfRVJST1JUT0tFTiwgdGhpcy5jb250c3RyICsgbGluZSwgdGhpcy5zdHJzdGFydCwgW3RoaXMubG51bSwgbGluZS5sZW5ndGhdLCB0aGlzLmNvbnRsaW5lKSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZG9uZSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuY29udHN0ciA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udHN0ciArPSBsaW5lO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGxpbmUgPSB0aGlzLmNvbnRsaW5lICsgbGluZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wYXJlbmxldiA9PT0gMCAmJiAhdGhpcy5jb250aW51ZWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghbGluZSkgcmV0dXJuIHRoaXMuZG9uZUZ1bmMoKTtcbiAgICAgICAgICAgIGNvbHVtbiA9IDA7XG4gICAgICAgICAgICB3aGlsZSAocG9zIDwgbWF4KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmIChsaW5lLmNoYXJBdChwb3MpID09PSAnICcpIGNvbHVtbiArPSAxO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxpbmUuY2hhckF0KHBvcykgPT09ICdcXHQnKSBjb2x1bW4gPSAoY29sdW1uL3RhYnNpemUgKyAxKSp0YWJzaXplO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxpbmUuY2hhckF0KHBvcykgPT09ICdcXGYnKSBjb2x1bW4gPSAwO1xuICAgICAgICAgICAgICAgIGVsc2UgYnJlYWs7XG4gICAgICAgICAgICAgICAgcG9zID0gcG9zICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwb3MgPT09IG1heCkgcmV0dXJuIHRoaXMuZG9uZUZ1bmMoKTtcblxuICAgICAgICAgICAgaWYgKFwiI1xcclxcblwiLmluZGV4T2YobGluZS5jaGFyQXQocG9zKSkgIT09IC0xKSAvLyBza2lwIGNvbW1lbnRzIG9yIGJsYW5rIGxpbmVzXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmUuY2hhckF0KHBvcykgPT09ICcjJylcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb21tZW50X3Rva2VuID0gcnN0cmlwKGxpbmUuc3Vic3RyaW5nKHBvcyksICdcXHJcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5sX3BvcyA9IHBvcyArIGNvbW1lbnRfdG9rZW4ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFjayhUb2tlbml6ZXIuVG9rZW5zLlRfQ09NTUVOVCwgY29tbWVudF90b2tlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RoaXMubG51bSwgcG9zXSwgW3RoaXMubG51bSwgcG9zICsgY29tbWVudF90b2tlbi5sZW5ndGhdLCBsaW5lKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnZG9uZSc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbGxiYWNrKFRva2VuaXplci5Ub2tlbnMuVF9OTCwgbGluZS5zdWJzdHJpbmcobmxfcG9zKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RoaXMubG51bSwgbmxfcG9zXSwgW3RoaXMubG51bSwgbGluZS5sZW5ndGhdLCBsaW5lKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnZG9uZSc7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2soVG9rZW5pemVyLlRva2Vucy5UX05MLCBsaW5lLnN1YnN0cmluZyhwb3MpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGhpcy5sbnVtLCBwb3NdLCBbdGhpcy5sbnVtLCBsaW5lLmxlbmd0aF0sIGxpbmUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkb25lJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmludGVyYWN0aXZlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29sdW1uID4gdGhpcy5pbmRlbnRzW3RoaXMuaW5kZW50cy5sZW5ndGggLSAxXSkgLy8gY291bnQgaW5kZW50cyBvciBkZWRlbnRzXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnRzLnB1c2goY29sdW1uKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFjayhUb2tlbml6ZXIuVG9rZW5zLlRfSU5ERU5ULCBsaW5lLnN1YnN0cmluZygwLCBwb3MpLCBbdGhpcy5sbnVtLCAwXSwgW3RoaXMubG51bSwgcG9zXSwgbGluZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZG9uZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoY29sdW1uIDwgdGhpcy5pbmRlbnRzW3RoaXMuaW5kZW50cy5sZW5ndGggLSAxXSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbnRhaW5zKHRoaXMuaW5kZW50cywgY29sdW1uKSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbmRlbnRhdGlvbkVycm9yKFwidW5pbmRlbnQgZG9lcyBub3QgbWF0Y2ggYW55IG91dGVyIGluZGVudGF0aW9uIGxldmVsXCIsIHRoaXMuZmlsZU5hbWUsIFt0aGlzLmxudW0sIDBdLCBbdGhpcy5sbnVtLCBwb3NdLCBsaW5lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRlbnRzLnNwbGljZSh0aGlzLmluZGVudHMubGVuZ3RoIC0gMSwgMSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2soVG9rZW5pemVyLlRva2Vucy5UX0RFREVOVCwgJycsIFt0aGlzLmxudW0sIHBvc10sIFt0aGlzLmxudW0sIHBvc10sIGxpbmUpKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkb25lJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSAvLyBjb250aW51ZWQgc3RhdGVtZW50XG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghbGluZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVG9rZW5FcnJvcihcIkVPRiBpbiBtdWx0aS1saW5lIHN0YXRlbWVudFwiLCB0aGlzLmZpbGVOYW1lLCB0aGlzLmxudW0sIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jb250aW51ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChwb3MgPCBtYXgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGpzIHJlZ2V4ZXMgZG9uJ3QgcmV0dXJuIGFueSBpbmZvIGFib3V0IG1hdGNoZXMsIG90aGVyIHRoYW4gdGhlXG4gICAgICAgICAgICAvLyBjb250ZW50LiB3ZSdkIGxpa2UgdG8gcHV0IGEgXFx3KyBiZWZvcmUgcHNldWRvbWF0Y2gsIGJ1dCB0aGVuIHdlXG4gICAgICAgICAgICAvLyBjYW4ndCBnZXQgYW55IGRhdGFcbiAgICAgICAgICAgIHZhciBjYXBvcyA9IGxpbmUuY2hhckF0KHBvcyk7XG4gICAgICAgICAgICB3aGlsZSAoY2Fwb3MgPT09ICcgJyB8fCBjYXBvcyA9PT0gJ1xcZicgfHwgY2Fwb3MgPT09ICdcXHQnKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBvcyArPSAxO1xuICAgICAgICAgICAgICAgIGNhcG9zID0gbGluZS5jaGFyQXQocG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBzZXVkb3Byb2cubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIHZhciBwc2V1ZG9tYXRjaCA9IHBzZXVkb3Byb2cuZXhlYyhsaW5lLnN1YnN0cmluZyhwb3MpKTtcbiAgICAgICAgICAgIGlmIChwc2V1ZG9tYXRjaClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBwb3M7XG4gICAgICAgICAgICAgICAgZW5kID0gc3RhcnQgKyBwc2V1ZG9tYXRjaFsxXS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIHNwb3MgPSBbdGhpcy5sbnVtLCBzdGFydF07XG4gICAgICAgICAgICAgICAgdmFyIGVwb3MgPSBbdGhpcy5sbnVtLCBlbmRdO1xuICAgICAgICAgICAgICAgIHBvcyA9IGVuZDtcbiAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSBsaW5lLnN1YnN0cmluZyhzdGFydCwgZW5kKTtcbiAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbCA9IGxpbmUuY2hhckF0KHN0YXJ0KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5udW1jaGFycy5pbmRleE9mKGluaXRpYWwpICE9PSAtMSB8fCAoaW5pdGlhbCA9PT0gJy4nICYmIHRva2VuICE9PSAnLicpKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2soVG9rZW5pemVyLlRva2Vucy5UX05VTUJFUiwgdG9rZW4sIHNwb3MsIGVwb3MsIGxpbmUpKSByZXR1cm4gJ2RvbmUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpbml0aWFsID09PSAnXFxyJyB8fCBpbml0aWFsID09PSAnXFxuJylcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdsID0gVG9rZW5pemVyLlRva2Vucy5UX05FV0xJTkU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmVubGV2ID4gMCkgbmV3bCA9IFRva2VuaXplci5Ub2tlbnMuVF9OTDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2sobmV3bCwgdG9rZW4sIHNwb3MsIGVwb3MsIGxpbmUpKSByZXR1cm4gJ2RvbmUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpbml0aWFsID09PSAnIycpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFjayhUb2tlbml6ZXIuVG9rZW5zLlRfQ09NTUVOVCwgdG9rZW4sIHNwb3MsIGVwb3MsIGxpbmUpKSByZXR1cm4gJ2RvbmUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0cmlwbGVfcXVvdGVkLmhhc093blByb3BlcnR5KHRva2VuKSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW5kcHJvZyA9IGVuZHByb2dzW3Rva2VuXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmRwcm9nLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGVuZG1hdGNoID0gdGhpcy5lbmRwcm9nLnRlc3QobGluZS5zdWJzdHJpbmcocG9zKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmRtYXRjaClcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gdGhpcy5lbmRwcm9nLmxhc3RJbmRleCArIHBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gbGluZS5zdWJzdHJpbmcoc3RhcnQsIHBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFjayhUb2tlbml6ZXIuVG9rZW5zLlRfU1RSSU5HLCB0b2tlbiwgc3BvcywgW3RoaXMubG51bSwgcG9zXSwgbGluZSkpIHJldHVybiAnZG9uZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cnN0YXJ0ID0gW3RoaXMubG51bSwgc3RhcnRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250c3RyID0gbGluZS5zdWJzdHJpbmcoc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250bGluZSA9IGxpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2luZ2xlX3F1b3RlZC5oYXNPd25Qcm9wZXJ0eShpbml0aWFsKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgc2luZ2xlX3F1b3RlZC5oYXNPd25Qcm9wZXJ0eSh0b2tlbi5zdWJzdHJpbmcoMCwgMikpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBzaW5nbGVfcXVvdGVkLmhhc093blByb3BlcnR5KHRva2VuLnN1YnN0cmluZygwLCAzKSkpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW5bdG9rZW4ubGVuZ3RoIC0gMV0gPT09ICdcXG4nKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cnN0YXJ0ID0gW3RoaXMubG51bSwgc3RhcnRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmRwcm9nID0gZW5kcHJvZ3NbaW5pdGlhbF0gfHwgZW5kcHJvZ3NbdG9rZW5bMV1dIHx8IGVuZHByb2dzW3Rva2VuWzJdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHN0ciA9IGxpbmUuc3Vic3RyaW5nKHN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmVlZGNvbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250bGluZSA9IGxpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFjayhUb2tlbml6ZXIuVG9rZW5zLlRfU1RSSU5HLCB0b2tlbiwgc3BvcywgZXBvcywgbGluZSkpIHJldHVybiAnZG9uZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5uYW1lY2hhcnMuaW5kZXhPZihpbml0aWFsKSAhPT0gLTEpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFjayhUb2tlbml6ZXIuVG9rZW5zLlRfTkFNRSwgdG9rZW4sIHNwb3MsIGVwb3MsIGxpbmUpKSByZXR1cm4gJ2RvbmUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpbml0aWFsID09PSAnXFxcXCcpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFjayhUb2tlbml6ZXIuVG9rZW5zLlRfTkwsIHRva2VuLCBzcG9zLCBbdGhpcy5sbnVtLCBwb3NdLCBsaW5lKSkgcmV0dXJuICdkb25lJztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250aW51ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJyhbeycuaW5kZXhPZihpbml0aWFsKSAhPT0gLTEpIHRoaXMucGFyZW5sZXYgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoJyldfScuaW5kZXhPZihpbml0aWFsKSAhPT0gLTEpIHRoaXMucGFyZW5sZXYgLT0gMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2soVG9rZW5pemVyLlRva2Vucy5UX09QLCB0b2tlbiwgc3BvcywgZXBvcywgbGluZSkpIHJldHVybiAnZG9uZSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbGxiYWNrKFRva2VuaXplci5Ub2tlbnMuVF9FUlJPUlRPS0VOLCBsaW5lLmNoYXJBdChwb3MpLCBbdGhpcy5sbnVtLCBwb3NdLCBbdGhpcy5sbnVtLCBwb3MrMV0sIGxpbmUpKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkb25lJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcG9zICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgPSBUb2tlbml6ZXI7XG5cbiJdfQ==