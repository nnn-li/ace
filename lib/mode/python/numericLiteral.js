function floatAST(s) {
    var thing = {
        text: s,
        value: parseFloat(s),
        isFloat: function () { return true; },
        isInt: function () { return false; },
        isLong: function () { return false; },
        toString: function () { return s; }
    };
    return thing;
}
exports.floatAST = floatAST;
function intAST(n) {
    var thing = {
        value: n,
        isFloat: function () { return false; },
        isInt: function () { return true; },
        isLong: function () { return false; },
        toString: function () { return '' + n; }
    };
    return thing;
}
exports.intAST = intAST;
function longAST(s, radix) {
    var thing = {
        text: s,
        radix: radix,
        isFloat: function () { return false; },
        isInt: function () { return false; },
        isLong: function () { return true; },
        toString: function () { return s; }
    };
    return thing;
}
exports.longAST = longAST;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtZXJpY0xpdGVyYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kZS9weXRob24vbnVtZXJpY0xpdGVyYWwudHMiXSwibmFtZXMiOlsiZmxvYXRBU1QiLCJpbnRBU1QiLCJsb25nQVNUIl0sIm1hcHBpbmdzIjoiQUFHQSxrQkFBeUIsQ0FBUztJQUM5QkEsSUFBSUEsS0FBS0EsR0FPTEE7UUFDSUEsSUFBSUEsRUFBRUEsQ0FBQ0E7UUFDUEEsS0FBS0EsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDcEJBLE9BQU9BLEVBQUVBLGNBQWEsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDcENBLEtBQUtBLEVBQUVBLGNBQWEsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbkNBLE1BQU1BLEVBQUVBLGNBQWEsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDcENBLFFBQVFBLEVBQUVBLGNBQVksTUFBTSxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUM7S0FDbkNBLENBQUNBO0lBQ05BLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO0FBQ2pCQSxDQUFDQTtBQWpCZSxnQkFBUSxXQWlCdkIsQ0FBQTtBQUtELGdCQUF1QixDQUFTO0lBQzVCQyxJQUFJQSxLQUFLQSxHQU1MQTtRQUNJQSxLQUFLQSxFQUFFQSxDQUFDQTtRQUNSQSxPQUFPQSxFQUFFQSxjQUFhLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3JDQSxLQUFLQSxFQUFFQSxjQUFhLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2xDQSxNQUFNQSxFQUFFQSxjQUFhLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3BDQSxRQUFRQSxFQUFFQSxjQUFZLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBLENBQUMsQ0FBQztLQUN4Q0EsQ0FBQ0E7SUFDTkEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7QUFDakJBLENBQUNBO0FBZmUsY0FBTSxTQWVyQixDQUFBO0FBS0QsaUJBQXdCLENBQVMsRUFBRSxLQUFhO0lBQzVDQyxJQUFJQSxLQUFLQSxHQU9MQTtRQUNJQSxJQUFJQSxFQUFFQSxDQUFDQTtRQUNQQSxLQUFLQSxFQUFFQSxLQUFLQTtRQUNaQSxPQUFPQSxFQUFFQSxjQUFhLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3JDQSxLQUFLQSxFQUFFQSxjQUFhLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ25DQSxNQUFNQSxFQUFFQSxjQUFhLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25DQSxRQUFRQSxFQUFFQSxjQUFZLE1BQU0sQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDO0tBQ25DQSxDQUFDQTtJQUNOQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtBQUNqQkEsQ0FBQ0E7QUFqQmUsZUFBTyxVQWlCdEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsb2F0QVNUKHM6IHN0cmluZykge1xuICAgIHZhciB0aGluZzoge1xuICAgICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIHZhbHVlOiBudW1iZXI7XG4gICAgICAgIGlzRmxvYXQ6ICgpID0+IGJvb2xlYW47XG4gICAgICAgIGlzSW50OiAoKSA9PiBib29sZWFuO1xuICAgICAgICBpc0xvbmc6ICgpID0+IGJvb2xlYW47XG4gICAgICAgIHRvU3RyaW5nOiAoKSA9PiBzdHJpbmc7XG4gICAgfSA9IHtcbiAgICAgICAgICAgIHRleHQ6IHMsXG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VGbG9hdChzKSxcbiAgICAgICAgICAgIGlzRmxvYXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICAgICAgICAgIGlzSW50OiBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgaXNMb25nOiBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge3JldHVybiBzIH1cbiAgICAgICAgfTtcbiAgICByZXR1cm4gdGhpbmc7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IG5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludEFTVChuOiBudW1iZXIpIHtcbiAgICB2YXIgdGhpbmc6IHtcbiAgICAgICAgdmFsdWU6IG51bWJlcjtcbiAgICAgICAgaXNGbG9hdDogKCkgPT4gYm9vbGVhbjtcbiAgICAgICAgaXNJbnQ6ICgpID0+IGJvb2xlYW47XG4gICAgICAgIGlzTG9uZzogKCkgPT4gYm9vbGVhbjtcbiAgICAgICAgdG9TdHJpbmc6ICgpID0+IHN0cmluZztcbiAgICB9ID0ge1xuICAgICAgICAgICAgdmFsdWU6IG4sXG4gICAgICAgICAgICBpc0Zsb2F0OiBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgaXNJbnQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgICAgICAgICAgIGlzTG9uZzogZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtyZXR1cm4gJycgKyBuIH1cbiAgICAgICAgfTtcbiAgICByZXR1cm4gdGhpbmc7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvbmdBU1Qoczogc3RyaW5nLCByYWRpeDogbnVtYmVyKSB7XG4gICAgdmFyIHRoaW5nOiB7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgcmFkaXg6IG51bWJlcjtcbiAgICAgICAgaXNGbG9hdDogKCkgPT4gYm9vbGVhbjtcbiAgICAgICAgaXNJbnQ6ICgpID0+IGJvb2xlYW47XG4gICAgICAgIGlzTG9uZzogKCkgPT4gYm9vbGVhbjtcbiAgICAgICAgdG9TdHJpbmc6ICgpID0+IHN0cmluZztcbiAgICB9ID0ge1xuICAgICAgICAgICAgdGV4dDogcyxcbiAgICAgICAgICAgIHJhZGl4OiByYWRpeCxcbiAgICAgICAgICAgIGlzRmxvYXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICBpc0ludDogZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgIGlzTG9uZzogZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9LFxuICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge3JldHVybiBzIH1cbiAgICAgICAgfTtcbiAgICByZXR1cm4gdGhpbmc7XG59XG4iXX0=