function typeOf(value) {
    var s = typeof value;
    if (s == 'object') {
        if (value) {
            if (value instanceof Array) {
                return 'array';
            }
            else if (value instanceof Object) {
                return s;
            }
            var className = Object.prototype.toString.call((value));
            if (className == '[object Window]') {
                return 'object';
            }
            if ((className == '[object Array]' ||
                typeof value.length == 'number' &&
                    typeof value.splice != 'undefined' &&
                    typeof value.propertyIsEnumerable != 'undefined' &&
                    !value.propertyIsEnumerable('splice'))) {
                return 'array';
            }
            if ((className == '[object Function]' ||
                typeof value.call != 'undefined' &&
                    typeof value.propertyIsEnumerable != 'undefined' &&
                    !value.propertyIsEnumerable('call'))) {
                return 'function';
            }
        }
        else {
            return 'null';
        }
    }
    else if (s == 'function' && typeof value.call == 'undefined') {
        return 'object';
    }
    return s;
}
exports.typeOf = typeOf;
;
function isNumber(val) {
    return typeof val === 'number';
}
exports.isNumber = isNumber;
function isString(val) {
    return typeof val === 'string';
}
exports.isString = isString;
function isDef(val) {
    return val !== undefined;
}
exports.isDef = isDef;
function isArrayLike(val) {
    var type = typeOf(val);
    return type == 'array' || type == 'object' && typeof val.length == 'number';
}
exports.isArrayLike = isArrayLike;
;
//# sourceMappingURL=data:application/json;base64,