var asserts = require('./asserts');
var base = require('./base');
var tables = require('./tables');
var Tokenizer = require('./Tokenizer');
var OpMap = tables.OpMap;
var ParseTables = tables.ParseTables;
function parseError(message, fileName, begin, end) {
    var e = new SyntaxError(message);
    e.name = "ParseError";
    e['fileName'] = fileName;
    if (base.isDef(begin)) {
        e['lineNumber'] = begin[0];
        e['columnNumber'] = begin[1];
    }
    return e;
}
function findInDfa(a, obj) {
    var i = a.length;
    while (i--) {
        if (a[i][0] === obj[0] && a[i][1] === obj[1]) {
            return true;
        }
    }
    return false;
}
var Node = (function () {
    function Node(type, value, lineno, col_offset, children) {
        this.used_names = {};
        this.type = type;
        this.value = value;
        this.lineno = lineno;
        this.col_offset = col_offset;
        this.children = children;
    }
    return Node;
})();
exports.Node = Node;
var StackEntry = (function () {
    function StackEntry(dfa, state, node) {
        this.dfa = dfa;
        this.state = state;
        this.node = node;
    }
    return StackEntry;
})();
var Parser = (function () {
    function Parser(fileName, grammar) {
        this.fileName = fileName;
        this.grammar = grammar;
    }
    Parser.prototype.setup = function (start) {
        start = start || this.grammar.start;
        var newnode = new Node(start, null, null, null, []);
        this.stack = [new StackEntry(this.grammar.dfas[start], 0, newnode)];
        this.used_names = {};
    };
    Parser.prototype.addtoken = function (type, value, context) {
        var iLabel = this.classify(type, value, context);
        OUTERWHILE: while (true) {
            var tp = this.stack[this.stack.length - 1];
            var states = tp.dfa[0];
            var first = tp.dfa[1];
            var arcs = states[tp.state];
            for (var a = 0; a < arcs.length; ++a) {
                var i = arcs[a][0];
                var newstate = arcs[a][1];
                var t = this.grammar.labels[i][0];
                var v = this.grammar.labels[i][1];
                if (iLabel === i) {
                    asserts.assert(t < 256);
                    this.shift(type, value, newstate, context);
                    var state = newstate;
                    while (states[state].length === 1
                        && states[state][0][0] === 0
                        && states[state][0][1] === state) {
                        this.pop();
                        if (this.stack.length === 0) {
                            return true;
                        }
                        tp = this.stack[this.stack.length - 1];
                        state = tp.state;
                        states = tp.dfa[0];
                        first = tp.dfa[1];
                    }
                    return false;
                }
                else if (t >= 256) {
                    var itsdfa = this.grammar.dfas[t];
                    var itsfirst = itsdfa[1];
                    if (itsfirst.hasOwnProperty(iLabel)) {
                        this.push(t, this.grammar.dfas[t], newstate, context);
                        continue OUTERWHILE;
                    }
                }
            }
            if (findInDfa(arcs, [0, tp.state])) {
                this.pop();
                if (this.stack.length === 0) {
                    throw parseError("too much input", this.fileName);
                }
            }
            else {
                throw parseError("bad input", this.fileName, context[0], context[1]);
            }
        }
    };
    Parser.prototype.classify = function (type, value, context) {
        var iLabel;
        if (type === Tokenizer.Tokens.T_NAME) {
            this.used_names[value] = true;
            iLabel = this.grammar.keywords.hasOwnProperty(value) && this.grammar.keywords[value];
            if (iLabel) {
                return iLabel;
            }
        }
        iLabel = this.grammar.tokens.hasOwnProperty(type) && this.grammar.tokens[type];
        if (!iLabel) {
            throw parseError("bad token", this.fileName, context[0], context[1]);
        }
        return iLabel;
    };
    Parser.prototype.shift = function (type, value, newstate, context) {
        var dfa = this.stack[this.stack.length - 1].dfa;
        var state = this.stack[this.stack.length - 1].state;
        var node = this.stack[this.stack.length - 1].node;
        var newnode = new Node(type, value, context[0][0], context[0][1], []);
        if (newnode) {
            node.children.push(newnode);
        }
        this.stack[this.stack.length - 1] = { dfa: dfa, state: newstate, node: node };
    };
    Parser.prototype.push = function (type, newdfa, newstate, context) {
        var dfa = this.stack[this.stack.length - 1].dfa;
        var node = this.stack[this.stack.length - 1].node;
        this.stack[this.stack.length - 1] = { dfa: dfa, state: newstate, node: node };
        var newnode = new Node(type, null, context[0][0], context[0][1], []);
        this.stack.push({ dfa: newdfa, state: 0, node: newnode });
    };
    Parser.prototype.pop = function () {
        var pop = this.stack.pop();
        var newnode = pop.node;
        if (newnode) {
            if (this.stack.length !== 0) {
                var node = this.stack[this.stack.length - 1].node;
                node.children.push(newnode);
            }
            else {
                this.rootnode = newnode;
                this.rootnode.used_names = this.used_names;
            }
        }
    };
    return Parser;
})();
function makeParser(fileName, style) {
    if (style === undefined)
        style = "file_input";
    var p = new Parser(fileName, ParseTables);
    if (style === "file_input") {
        p.setup(ParseTables.sym.file_input);
    }
    else {
        asserts.fail("todo;");
    }
    var curIndex = 0;
    var lineno = 1;
    var column = 0;
    var prefix = "";
    var T_COMMENT = Tokenizer.Tokens.T_COMMENT;
    var T_NL = Tokenizer.Tokens.T_NL;
    var T_OP = Tokenizer.Tokens.T_OP;
    var tokenizer = new Tokenizer(fileName, style === "single_input", function (type, value, start, end, line) {
        var s_lineno = start[0];
        var s_column = start[1];
        if (type === T_COMMENT || type === T_NL) {
            prefix += value;
            lineno = end[0];
            column = end[1];
            if (value[value.length - 1] === "\n") {
                lineno += 1;
                column = 0;
            }
            return undefined;
        }
        if (type === T_OP) {
            type = OpMap[value];
        }
        if (p.addtoken(type, value, [start, end, line])) {
            return true;
        }
    });
    return function (line) {
        var ret = tokenizer.generateTokens(line);
        if (ret) {
            if (ret !== "done") {
                throw parseError("incomplete input", this.fileName);
            }
            return p.rootnode;
        }
        return null;
    };
}
function parse(fileName, source) {
    var parseFunc = makeParser(fileName);
    if (source.substr(source.length - 1, 1) !== "\n")
        source += "\n";
    var lines = source.split("\n");
    var ret;
    for (var i = 0; i < lines.length; ++i) {
        ret = parseFunc(lines[i] + ((i === lines.length - 1) ? "" : "\n"));
    }
    return ret;
}
exports.parse = parse;
function parseTreeDump(node) {
    var ret = "";
    if (node.type >= 256) {
        ret += ParseTables.number2symbol[node.type] + "\n";
        for (var i = 0; i < node.children.length; ++i) {
            ret += parseTreeDump(node.children[i]);
        }
    }
    else {
        ret += Tokenizer.tokenNames[node.type] + ": " + node.value + "\n";
    }
    return ret;
}
exports.parseTreeDump = parseTreeDump;
//# sourceMappingURL=data:application/json;base64,