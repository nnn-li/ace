var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var oop = require('../lib/oop');
var m = require('../worker/mirror');
var prsr = require('../mode/python/Parser');
var bldr = require('../mode/python/builder');
var cmplr = require('../mode/python/compiler');
var symtbl = require('../mode/python/symtable');
var INFO = 'info';
var WARNING = 'warning';
var ERROR = 'error';
var PythonWorker = (function (_super) {
    __extends(PythonWorker, _super);
    function PythonWorker(sender) {
        _super.call(this, sender, 500);
        this.setOptions();
        this.sender.emit('initAfter');
    }
    PythonWorker.prototype.setOptions = function (options) {
        this.options = options || {};
    };
    PythonWorker.prototype.changeOptions = function (newOptions) {
        oop.mixin(this.options, newOptions);
        this.deferredUpdate.schedule(100);
    };
    PythonWorker.prototype.onUpdate = function () {
        var source = this.doc.getValue();
        var annotations = [];
        try {
            var fileName = '<stdin>';
            var node = prsr.parse(fileName, source);
            var module = bldr.astFromParse(node, fileName);
            var symbolTable = symtbl.symbolTable(module, fileName);
            var compiler = new cmplr.Compiler(fileName, symbolTable, 0, source);
            var compiled = { 'funcname': compiler.cmod(module), 'code': compiler.result.join('') };
        }
        catch (e) {
            try {
                annotations.push({
                    row: e.lineNumber - 1,
                    column: e.columnNumber,
                    text: e.message,
                    type: ERROR
                });
            }
            catch (slippery) {
                console.log(slippery);
            }
        }
        this.sender.emit('syntax', annotations);
    };
    return PythonWorker;
})(m.Mirror);
exports.PythonWorker = PythonWorker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHl0aG9uX3dvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlL3B5dGhvbl93b3JrZXIudHMiXSwibmFtZXMiOlsiUHl0aG9uV29ya2VyIiwiUHl0aG9uV29ya2VyLmNvbnN0cnVjdG9yIiwiUHl0aG9uV29ya2VyLnNldE9wdGlvbnMiLCJQeXRob25Xb3JrZXIuY2hhbmdlT3B0aW9ucyIsIlB5dGhvbldvcmtlci5vblVwZGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFPLEdBQUcsV0FBVyxZQUFZLENBQUMsQ0FBQztBQUNuQyxJQUFPLENBQUMsV0FBVyxrQkFBa0IsQ0FBQyxDQUFDO0FBR3ZDLElBQU8sSUFBSSxXQUFXLHVCQUF1QixDQUFDLENBQUM7QUFFL0MsSUFBTyxJQUFJLFdBQVcsd0JBQXdCLENBQUMsQ0FBQztBQUNoRCxJQUFPLEtBQUssV0FBVyx5QkFBeUIsQ0FBQyxDQUFDO0FBQ2xELElBQU8sTUFBTSxXQUFXLHlCQUF5QixDQUFDLENBQUM7QUFLbkQsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDO0FBSWxCLElBQUksT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUl4QixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUM7QUFLcEI7SUFBa0NBLGdDQUFRQTtJQUd0Q0Esc0JBQVlBLE1BQU1BO1FBQ2RDLGtCQUFNQSxNQUFNQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUVuQkEsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0E7UUFHbEJBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO0lBQ2xDQSxDQUFDQTtJQUVPRCxpQ0FBVUEsR0FBbEJBLFVBQW1CQSxPQUFRQTtRQUN2QkUsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsT0FBT0EsSUFBSUEsRUFBRUEsQ0FBQ0E7SUFDakNBLENBQUNBO0lBRU9GLG9DQUFhQSxHQUFyQkEsVUFBc0JBLFVBQVVBO1FBQzVCRyxHQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxFQUFFQSxVQUFVQSxDQUFDQSxDQUFDQTtRQUNwQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFDdENBLENBQUNBO0lBRU1ILCtCQUFRQSxHQUFmQTtRQUNJSSxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQTtRQUVqQ0EsSUFBSUEsV0FBV0EsR0FBdUVBLEVBQUVBLENBQUNBO1FBRXpGQSxJQUFJQSxDQUFDQTtZQUNEQSxJQUFJQSxRQUFRQSxHQUFXQSxTQUFTQSxDQUFDQTtZQUVqQ0EsSUFBSUEsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7WUFFeENBLElBQUlBLE1BQU1BLEdBQWtCQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUU5REEsSUFBSUEsV0FBV0EsR0FBdUJBLE1BQU1BLENBQUNBLFdBQVdBLENBQUNBLE1BQU1BLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBO1lBRTNFQSxJQUFJQSxRQUFRQSxHQUFHQSxJQUFJQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQSxRQUFRQSxFQUFFQSxXQUFXQSxFQUFFQSxDQUFDQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtZQUVwRUEsSUFBSUEsUUFBUUEsR0FBR0EsRUFBRUEsVUFBVUEsRUFBRUEsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsTUFBTUEsRUFBRUEsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7UUFDM0ZBLENBQ0FBO1FBQUFBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ1BBLElBQUlBLENBQUNBO2dCQUNEQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQTtvQkFDYkEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsVUFBVUEsR0FBR0EsQ0FBQ0E7b0JBQ3JCQSxNQUFNQSxFQUFFQSxDQUFDQSxDQUFDQSxZQUFZQTtvQkFDdEJBLElBQUlBLEVBQUVBLENBQUNBLENBQUNBLE9BQU9BO29CQUNmQSxJQUFJQSxFQUFFQSxLQUFLQTtpQkFDZEEsQ0FBQ0EsQ0FBQ0E7WUFDUEEsQ0FDQUE7WUFBQUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2RBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lBQzFCQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUVEQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxXQUFXQSxDQUFDQSxDQUFDQTtJQUM1Q0EsQ0FBQ0E7SUFDTEosbUJBQUNBO0FBQURBLENBQUNBLEFBdkRELEVBQWtDLENBQUMsQ0FBQyxNQUFNLEVBdUR6QztBQXZEWSxvQkFBWSxlQXVEeEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBvb3AgPSByZXF1aXJlKCcuLi9saWIvb29wJyk7XG5pbXBvcnQgbSA9IHJlcXVpcmUoJy4uL3dvcmtlci9taXJyb3InKTtcbmltcG9ydCBsYW5nID0gcmVxdWlyZSgnLi4vbGliL2xhbmcnKTtcbmltcG9ydCBkY20gPSByZXF1aXJlKCcuLi9kb2N1bWVudCcpO1xuaW1wb3J0IHByc3IgPSByZXF1aXJlKCcuLi9tb2RlL3B5dGhvbi9QYXJzZXInKTtcbmltcG9ydCBhc3RuZHMgPSByZXF1aXJlKCcuLi9tb2RlL3B5dGhvbi9hc3Rub2RlcycpO1xuaW1wb3J0IGJsZHIgPSByZXF1aXJlKCcuLi9tb2RlL3B5dGhvbi9idWlsZGVyJyk7XG5pbXBvcnQgY21wbHIgPSByZXF1aXJlKCcuLi9tb2RlL3B5dGhvbi9jb21waWxlcicpO1xuaW1wb3J0IHN5bXRibCA9IHJlcXVpcmUoJy4uL21vZGUvcHl0aG9uL3N5bXRhYmxlJyk7XG5cbi8qKlxuICogU3ltYm9sIGZvciBhbiBpbmZvcm1hdGlvbiBhbm5vdGF0aW9uIChncmF5IGl0YWxpYyBpIGxldHRlcikuXG4gKi9cbnZhciBJTkZPID0gJ2luZm8nO1xuLyoqXG4gKiBTeW1ib2wgZm9yIGEgd2FybmluZyBhbm5vdGF0aW9uICh5ZWxsb3cgdHJpYW5nbGUgd2l0aCBleGNsYW1hdGlvbikuXG4gKi9cbnZhciBXQVJOSU5HID0gJ3dhcm5pbmcnO1xuLyoqXG4gKiBTeW1ib2wgZm9yIGFuIGVycm9yIGFubm90YXRpb24gKHJlZCBib3ggd2l0aCB4KS5cbiAqL1xudmFyIEVSUk9SID0gJ2Vycm9yJztcblxuLyoqXG4gKlxuICovXG5leHBvcnQgY2xhc3MgUHl0aG9uV29ya2VyIGV4dGVuZHMgbS5NaXJyb3Ige1xuICAgIHByaXZhdGUgb3B0aW9ucztcblxuICAgIGNvbnN0cnVjdG9yKHNlbmRlci8qRklYTUU6IGFjZS5Xb3JrZXJTZW5kZXIqLykge1xuICAgICAgICBzdXBlcihzZW5kZXIsIDUwMCk7XG5cbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKCk7XG5cbiAgICAgICAgLy8gTGV0IHRoZSBzZW5kZXIga25vdyB0aGF0IHRoaXMgd29ya2VyIGhhcyBjb21wbGV0ZWQgaW5pdGlhbGl6YXRpb24uXG4gICAgICAgIHRoaXMuc2VuZGVyLmVtaXQoJ2luaXRBZnRlcicpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0T3B0aW9ucyhvcHRpb25zPykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIH1cblxuICAgIHByaXZhdGUgY2hhbmdlT3B0aW9ucyhuZXdPcHRpb25zKSB7XG4gICAgICAgIG9vcC5taXhpbih0aGlzLm9wdGlvbnMsIG5ld09wdGlvbnMpO1xuICAgICAgICB0aGlzLmRlZmVycmVkVXBkYXRlLnNjaGVkdWxlKDEwMCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uVXBkYXRlKCkge1xuICAgICAgICB2YXIgc291cmNlID0gdGhpcy5kb2MuZ2V0VmFsdWUoKTtcblxuICAgICAgICB2YXIgYW5ub3RhdGlvbnM6IEFycmF5PHsgcm93OiBudW1iZXI7IGNvbHVtbjogbnVtYmVyOyB0ZXh0OiBzdHJpbmc7IHR5cGU6IHN0cmluZyB9PiA9IFtdO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZmlsZU5hbWU6IHN0cmluZyA9ICc8c3RkaW4+JztcblxuICAgICAgICAgICAgdmFyIG5vZGUgPSBwcnNyLnBhcnNlKGZpbGVOYW1lLCBzb3VyY2UpO1xuXG4gICAgICAgICAgICB2YXIgbW9kdWxlOiBhc3RuZHMuTW9kdWxlID0gYmxkci5hc3RGcm9tUGFyc2Uobm9kZSwgZmlsZU5hbWUpO1xuXG4gICAgICAgICAgICB2YXIgc3ltYm9sVGFibGU6IHN5bXRibC5TeW1ib2xUYWJsZSA9IHN5bXRibC5zeW1ib2xUYWJsZShtb2R1bGUsIGZpbGVOYW1lKTtcblxuICAgICAgICAgICAgdmFyIGNvbXBpbGVyID0gbmV3IGNtcGxyLkNvbXBpbGVyKGZpbGVOYW1lLCBzeW1ib2xUYWJsZSwgMCwgc291cmNlKTtcblxuICAgICAgICAgICAgdmFyIGNvbXBpbGVkID0geyAnZnVuY25hbWUnOiBjb21waWxlci5jbW9kKG1vZHVsZSksICdjb2RlJzogY29tcGlsZXIucmVzdWx0LmpvaW4oJycpIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHJvdzogZS5saW5lTnVtYmVyIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBlLmNvbHVtbk51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBFUlJPUlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKHNsaXBwZXJ5KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coc2xpcHBlcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZW5kZXIuZW1pdCgnc3ludGF4JywgYW5ub3RhdGlvbnMpO1xuICAgIH1cbn1cbiJdfQ==