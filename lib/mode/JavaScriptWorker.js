import { mixin } from "../lib/oop";
import Mirror from "../worker/Mirror";
import { JSHINT } from "./javascript/jshint";
function startRegex(arr) {
    return RegExp("^(" + arr.join("|") + ")");
}
var disabledWarningsRe = startRegex([
    "Bad for in variable '(.+)'.",
    'Missing "use strict"'
]);
var errorsRe = startRegex([
    "Unexpected",
    "Expected ",
    "Confusing (plus|minus)",
    "\\{a\\} unterminated regular expression",
    "Unclosed ",
    "Unmatched ",
    "Unbegun comment",
    "Bad invocation",
    "Missing space after",
    "Missing operator at"
]);
var infoRe = startRegex([
    "Expected an assignment",
    "Bad escapement of EOL",
    "Unexpected comma",
    "Unexpected space",
    "Missing radix parameter.",
    "A leading decimal point can",
    "\\['{a}'\\] is better written in dot notation.",
    "'{a}' used out of scope"
]);
export default class JavaScriptWorker extends Mirror {
    constructor(sender) {
        super(sender);
        this.setOptions();
        sender.emit('initAfter');
    }
    setOptions(options) {
        this.options = options || {
            esnext: true,
            moz: true,
            devel: true,
            browser: true,
            node: true,
            laxcomma: true,
            laxbreak: true,
            lastsemic: true,
            onevar: false,
            passfail: false,
            maxerr: 100,
            expr: true,
            multistr: true,
            globalstrict: true
        };
        this.doc.getValue() && this.deferredUpdate.schedule(100);
    }
    changeOptions(newOptions) {
        mixin(this.options, newOptions);
        this.doc.getValue() && this.deferredUpdate.schedule(100);
    }
    isValidJS(str) {
        try {
            eval("throw 0;" + str);
        }
        catch (e) {
            if (e === 0)
                return true;
        }
        return false;
    }
    onUpdate() {
        var value = this.doc.getValue();
        value = value.replace(/^#!.*\n/, "\n");
        if (!value) {
            this.sender.emit("jslint", []);
            return;
        }
        var errors = [];
        var maxErrorLevel = this.isValidJS(value) ? "warning" : "error";
        JSHINT(value, this.options);
        var results = JSHINT.errors;
        var errorAdded = false;
        for (var i = 0; i < results.length; i++) {
            var error = results[i];
            if (!error)
                continue;
            var raw = error.raw;
            var type = "warning";
            if (raw == "Missing semicolon.") {
                var str = error.evidence.substr(error.character);
                str = str.charAt(str.search(/\S/));
                if (maxErrorLevel == "error" && str && /[\w\d{(['"]/.test(str)) {
                    error.reason = 'Missing ";" before statement';
                    type = "error";
                }
                else {
                    type = "info";
                }
            }
            else if (disabledWarningsRe.test(raw)) {
                continue;
            }
            else if (infoRe.test(raw)) {
                type = "info";
            }
            else if (errorsRe.test(raw)) {
                errorAdded = true;
                type = maxErrorLevel;
            }
            else if (raw == "'{a}' is not defined.") {
                type = "warning";
            }
            else if (raw == "'{a}' is defined but never used.") {
                type = "info";
            }
            errors.push({
                row: error.line - 1,
                column: error.character - 1,
                text: error.reason,
                type: type,
                raw: raw
            });
            if (errorAdded) {
            }
        }
        this.sender.emit("jslint", errors);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSmF2YVNjcmlwdFdvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlL0phdmFTY3JpcHRXb3JrZXIudHMiXSwibmFtZXMiOlsic3RhcnRSZWdleCIsIkphdmFTY3JpcHRXb3JrZXIiLCJKYXZhU2NyaXB0V29ya2VyLmNvbnN0cnVjdG9yIiwiSmF2YVNjcmlwdFdvcmtlci5zZXRPcHRpb25zIiwiSmF2YVNjcmlwdFdvcmtlci5jaGFuZ2VPcHRpb25zIiwiSmF2YVNjcmlwdFdvcmtlci5pc1ZhbGlkSlMiLCJKYXZhU2NyaXB0V29ya2VyLm9uVXBkYXRlIl0sIm1hcHBpbmdzIjoiT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFlBQVk7T0FDekIsTUFBTSxNQUFNLGtCQUFrQjtPQUc5QixFQUFDLE1BQU0sRUFBQyxNQUFNLHFCQUFxQjtBQUUxQyxvQkFBb0IsR0FBRztJQUNuQkEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7QUFDOUNBLENBQUNBO0FBRUQsSUFBSSxrQkFBa0IsR0FBRyxVQUFVLENBQUM7SUFDaEMsNkJBQTZCO0lBQzdCLHNCQUFzQjtDQUN6QixDQUFDLENBQUM7QUFFSCxJQUFJLFFBQVEsR0FBRyxVQUFVLENBQUM7SUFDdEIsWUFBWTtJQUNaLFdBQVc7SUFDWCx3QkFBd0I7SUFDeEIseUNBQXlDO0lBQ3pDLFdBQVc7SUFDWCxZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixxQkFBcUI7SUFDckIscUJBQXFCO0NBQ3hCLENBQUMsQ0FBQztBQUNILElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQztJQUNwQix3QkFBd0I7SUFDeEIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsMEJBQTBCO0lBQzFCLDZCQUE2QjtJQUM3QixnREFBZ0Q7SUFDaEQseUJB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akJBLENBQUNBO1FBQ0xBLENBQUNBO1FBRURBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO0lBQ3ZDQSxDQUFDQTtBQUNMTCxDQUFDQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHttaXhpbn0gZnJvbSBcIi4uL2xpYi9vb3BcIjtcbmltcG9ydCBNaXJyb3IgZnJvbSBcIi4uL3dvcmtlci9NaXJyb3JcIjtcbmltcG9ydCBTZW5kZXIgZnJvbSBcIi4uL2xpYi9TZW5kZXJcIjtcblxuaW1wb3J0IHtKU0hJTlR9IGZyb20gXCIuL2phdmFzY3JpcHQvanNoaW50XCI7XG5cbmZ1bmN0aW9uIHN0YXJ0UmVnZXgoYXJyKSB7XG4gICAgcmV0dXJuIFJlZ0V4cChcIl4oXCIgKyBhcnIuam9pbihcInxcIikgKyBcIilcIik7XG59XG5cbnZhciBkaXNhYmxlZFdhcm5pbmdzUmUgPSBzdGFydFJlZ2V4KFtcbiAgICBcIkJhZCBmb3IgaW4gdmFyaWFibGUgJyguKyknLlwiLFxuICAgICdNaXNzaW5nIFwidXNlIHN0cmljdFwiJ1xuXSk7XG5cbnZhciBlcnJvcnNSZSA9IHN0YXJ0UmVnZXgoW1xuICAgIFwiVW5leHBlY3RlZFwiLFxuICAgIFwiRXhwZWN0ZWQgXCIsXG4gICAgXCJDb25mdXNpbmcgKHBsdXN8bWludXMpXCIsXG4gICAgXCJcXFxce2FcXFxcfSB1bnRlcm1pbmF0ZWQgcmVndWxhciBleHByZXNzaW9uXCIsXG4gICAgXCJVbmNsb3NlZCBcIixcbiAgICBcIlVubWF0Y2hlZCBcIixcbiAgICBcIlVuYmVndW4gY29tbWVudFwiLFxuICAgIFwiQmFkIGludm9jYXRpb25cIixcbiAgICBcIk1pc3Npbmcgc3BhY2UgYWZ0ZXJcIixcbiAgICBcIk1pc3Npbmcgb3BlcmF0b3IgYXRcIlxuXSk7XG52YXIgaW5mb1JlID0gc3RhcnRSZWdleChbXG4gICAgXCJFeHBlY3RlZCBhbiBhc3NpZ25tZW50XCIsXG4gICAgXCJCYWQgZXNjYXBlbWVudCBvZiBFT0xcIixcbiAgICBcIlVuZXhwZWN0ZWQgY29tbWFcIixcbiAgICBcIlVuZXhwZWN0ZWQgc3BhY2VcIixcbiAgICBcIk1pc3NpbmcgcmFkaXggcGFyYW1ldGVyLlwiLFxuICAgIFwiQSBsZWFkaW5nIGRlY2ltYWwgcG9pbnQgY2FuXCIsXG4gICAgXCJcXFxcWyd7YX0nXFxcXF0gaXMgYmV0dGVyIHdyaXR0ZW4gaW4gZG90IG5vdGF0aW9uLlwiLFxuICAgIFwiJ3thfScgdXNlZCBvdXQgb2Ygc2NvcGVcIlxuXSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEphdmFTY3JpcHRXb3JrZXIgZXh0ZW5kcyBNaXJyb3Ige1xuICAgIG9wdGlvbnM7XG4gICAgY29uc3RydWN0b3Ioc2VuZGVyOiBTZW5kZXIpIHtcbiAgICAgICAgc3VwZXIoc2VuZGVyKTtcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKCk7XG4gICAgICAgIHNlbmRlci5lbWl0KCdpbml0QWZ0ZXInKTtcbiAgICB9XG5cbiAgICBzZXRPcHRpb25zKG9wdGlvbnM/OiB7fSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHtcbiAgICAgICAgICAgIC8vIHVuZGVmOiB0cnVlLFxuICAgICAgICAgICAgLy8gdW51c2VkOiB0cnVlLFxuICAgICAgICAgICAgZXNuZXh0OiB0cnVlLFxuICAgICAgICAgICAgbW96OiB0cnVlLFxuICAgICAgICAgICAgZGV2ZWw6IHRydWUsXG4gICAgICAgICAgICBicm93c2VyOiB0cnVlLFxuICAgICAgICAgICAgbm9kZTogdHJ1ZSxcbiAgICAgICAgICAgIGxheGNvbW1hOiB0cnVlLFxuICAgICAgICAgICAgbGF4YnJlYWs6IHRydWUsXG4gICAgICAgICAgICBsYXN0c2VtaWM6IHRydWUsXG4gICAgICAgICAgICBvbmV2YXI6IGZhbHNlLFxuICAgICAgICAgICAgcGFzc2ZhaWw6IGZhbHNlLFxuICAgICAgICAgICAgbWF4ZXJyOiAxMDAsXG4gICAgICAgICAgICBleHByOiB0cnVlLFxuICAgICAgICAgICAgbXVsdGlzdHI6IHRydWUsXG4gICAgICAgICAgICBnbG9iYWxzdHJpY3Q6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kb2MuZ2V0VmFsdWUoKSAmJiB0aGlzLmRlZmVycmVkVXBkYXRlLnNjaGVkdWxlKDEwMCk7XG4gICAgfVxuXG4gICAgY2hhbmdlT3B0aW9ucyhuZXdPcHRpb25zKSB7XG4gICAgICAgIG1peGluKHRoaXMub3B0aW9ucywgbmV3T3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZG9jLmdldFZhbHVlKCkgJiYgdGhpcy5kZWZlcnJlZFVwZGF0ZS5zY2hlZHVsZSgxMDApO1xuICAgIH1cblxuICAgIGlzVmFsaWRKUyhzdHI6IHN0cmluZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gZXZhbHVhdGVkIGNvZGUgY2FuIG9ubHkgY3JlYXRlIHZhcmlhYmxlcyBpbiB0aGlzIGZ1bmN0aW9uXG4gICAgICAgICAgICBldmFsKFwidGhyb3cgMDtcIiArIHN0cik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlID09PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIG9uVXBkYXRlKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmRvYy5nZXRWYWx1ZSgpO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL14jIS4qXFxuLywgXCJcXG5cIik7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZGVyLmVtaXQoXCJqc2xpbnRcIiwgW10pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvcnMgPSBbXTtcblxuICAgICAgICAvLyBqc2hpbnQgcmVwb3J0cyBtYW55IGZhbHNlIGVycm9yc1xuICAgICAgICAvLyByZXBvcnQgdGhlbSBhcyBlcnJvciBvbmx5IGlmIGNvZGUgaXMgYWN0dWFsbHkgaW52YWxpZFxuICAgICAgICB2YXIgbWF4RXJyb3JMZXZlbCA9IHRoaXMuaXNWYWxpZEpTKHZhbHVlKSA/IFwid2FybmluZ1wiIDogXCJlcnJvclwiO1xuXG4gICAgICAgIC8vIHZhciBzdGFydCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIEpTSElOVCh2YWx1ZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgdmFyIHJlc3VsdHM6IHsgcmF3OiBzdHJpbmc7IGV2aWRlbmNlOiBzdHJpbmc7IGxpbmU6IG51bWJlcjsgY2hhcmFjdGVyOiBudW1iZXI7IHJlYXNvbj86IHN0cmluZyB9W10gPSBKU0hJTlQuZXJyb3JzO1xuXG4gICAgICAgIHZhciBlcnJvckFkZGVkID0gZmFsc2VcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSByZXN1bHRzW2ldO1xuICAgICAgICAgICAgaWYgKCFlcnJvcilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIHZhciByYXcgPSBlcnJvci5yYXc7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IFwid2FybmluZ1wiO1xuXG4gICAgICAgICAgICBpZiAocmF3ID09IFwiTWlzc2luZyBzZW1pY29sb24uXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RyID0gZXJyb3IuZXZpZGVuY2Uuc3Vic3RyKGVycm9yLmNoYXJhY3Rlcik7XG4gICAgICAgICAgICAgICAgc3RyID0gc3RyLmNoYXJBdChzdHIuc2VhcmNoKC9cXFMvKSk7XG4gICAgICAgICAgICAgICAgaWYgKG1heEVycm9yTGV2ZWwgPT0gXCJlcnJvclwiICYmIHN0ciAmJiAvW1xcd1xcZHsoWydcIl0vLnRlc3Qoc3RyKSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvci5yZWFzb24gPSAnTWlzc2luZyBcIjtcIiBiZWZvcmUgc3RhdGVtZW50JztcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IFwiZXJyb3JcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0eXBlID0gXCJpbmZvXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGlzYWJsZWRXYXJuaW5nc1JlLnRlc3QocmF3KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5mb1JlLnRlc3QocmF3KSkge1xuICAgICAgICAgICAgICAgIHR5cGUgPSBcImluZm9cIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXJyb3JzUmUudGVzdChyYXcpKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JBZGRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHlwZSA9IG1heEVycm9yTGV2ZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyYXcgPT0gXCIne2F9JyBpcyBub3QgZGVmaW5lZC5cIikge1xuICAgICAgICAgICAgICAgIHR5cGUgPSBcIndhcm5pbmdcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJhdyA9PSBcIid7YX0nIGlzIGRlZmluZWQgYnV0IG5ldmVyIHVzZWQuXCIpIHtcbiAgICAgICAgICAgICAgICB0eXBlID0gXCJpbmZvXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVycm9ycy5wdXNoKHtcbiAgICAgICAgICAgICAgICByb3c6IGVycm9yLmxpbmUgLSAxLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogZXJyb3IuY2hhcmFjdGVyIC0gMSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBlcnJvci5yZWFzb24sXG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgICAgICByYXc6IHJhd1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChlcnJvckFkZGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlbmRlci5lbWl0KFwianNsaW50XCIsIGVycm9ycyk7XG4gICAgfVxufVxuLyogKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKlxuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBsaWNlbnNlOlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMCwgQWpheC5vcmcgQi5WLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqICAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICAgICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqICAgICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgQWpheC5vcmcgQi5WLiBub3IgdGhlXG4gKiAgICAgICBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuICogICAgICAgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKiBcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICogQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEFKQVguT1JHIEIuVi4gQkUgTElBQkxFIEZPUiBBTllcbiAqIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gKiAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7XG4gKiBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkRcbiAqIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKlxuICogKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKiogKi9cbiJdfQ==