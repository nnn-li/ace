import { mixin } from "../lib/oop";
import Mirror from "../worker/Mirror";
function startRegex(arr) {
    return RegExp("^(" + arr.join("|") + ")");
}
var disabledWarningsRe = startRegex([
    "Bad for in variable '(.+)'.",
    'Missing "use strict"'
]);
var errorsRe = startRegex([
    "Unexpected",
    "Expected ",
    "Confusing (plus|minus)",
    "\\{a\\} unterminated regular expression",
    "Unclosed ",
    "Unmatched ",
    "Unbegun comment",
    "Bad invocation",
    "Missing space after",
    "Missing operator at"
]);
var infoRe = startRegex([
    "Expected an assignment",
    "Bad escapement of EOL",
    "Unexpected comma",
    "Unexpected space",
    "Missing radix parameter.",
    "A leading decimal point can",
    "\\['{a}'\\] is better written in dot notation.",
    "'{a}' used out of scope"
]);
export default class JavaScriptWorker extends Mirror {
    constructor(sender) {
        super(sender);
        this.setOptions();
        sender.emit('initAfter');
    }
    setOptions(options) {
        this.options = options || {
            esnext: true,
            moz: true,
            devel: true,
            browser: true,
            node: true,
            laxcomma: true,
            laxbreak: true,
            lastsemic: true,
            onevar: false,
            passfail: false,
            maxerr: 100,
            expr: true,
            multistr: true,
            globalstrict: true
        };
        this.doc.getValue() && this.deferredUpdate.schedule(100);
    }
    changeOptions(newOptions) {
        mixin(this.options, newOptions);
        this.doc.getValue() && this.deferredUpdate.schedule(100);
    }
    isValidJS(str) {
        try {
            eval("throw 0;" + str);
        }
        catch (e) {
            if (e === 0)
                return true;
        }
        return false;
    }
    onUpdate() {
        var value = this.doc.getValue();
        value = value.replace(/^#!.*\n/, "\n");
        if (!value) {
            this.sender.emit("jslint", []);
            return;
        }
        var errors = [];
        var maxErrorLevel = this.isValidJS(value) ? "warning" : "error";
        var results = [];
        var errorAdded = false;
        for (var i = 0; i < results.length; i++) {
            var error = results[i];
            if (!error)
                continue;
            var raw = error.raw;
            var type = "warning";
            if (raw == "Missing semicolon.") {
                var str = error.evidence.substr(error.character);
                str = str.charAt(str.search(/\S/));
                if (maxErrorLevel == "error" && str && /[\w\d{(['"]/.test(str)) {
                    error.reason = 'Missing ";" before statement';
                    type = "error";
                }
                else {
                    type = "info";
                }
            }
            else if (disabledWarningsRe.test(raw)) {
                continue;
            }
            else if (infoRe.test(raw)) {
                type = "info";
            }
            else if (errorsRe.test(raw)) {
                errorAdded = true;
                type = maxErrorLevel;
            }
            else if (raw == "'{a}' is not defined.") {
                type = "warning";
            }
            else if (raw == "'{a}' is defined but never used.") {
                type = "info";
            }
            errors.push({
                row: error.line - 1,
                column: error.character - 1,
                text: error.reason,
                type: type,
                raw: raw
            });
            if (errorAdded) {
            }
        }
        this.sender.emit("jslint", errors);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSmF2YVNjcmlwdFdvcmtlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlL0phdmFTY3JpcHRXb3JrZXIudHMiXSwibmFtZXMiOlsic3RhcnRSZWdleCIsIkphdmFTY3JpcHRXb3JrZXIiLCJKYXZhU2NyaXB0V29ya2VyLmNvbnN0cnVjdG9yIiwiSmF2YVNjcmlwdFdvcmtlci5zZXRPcHRpb25zIiwiSmF2YVNjcmlwdFdvcmtlci5jaGFuZ2VPcHRpb25zIiwiSmF2YVNjcmlwdFdvcmtlci5pc1ZhbGlkSlMiLCJKYXZhU2NyaXB0V29ya2VyLm9uVXBkYXRlIl0sIm1hcHBpbmdzIjoiT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFlBQVk7T0FDekIsTUFBTSxNQUFNLGtCQUFrQjtBQUtyQyxvQkFBb0IsR0FBRztJQUNyQkEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7QUFDNUNBLENBQUNBO0FBRUQsSUFBSSxrQkFBa0IsR0FBRyxVQUFVLENBQUM7SUFDbEMsNkJBQTZCO0lBQzdCLHNCQUFzQjtDQUN2QixDQUFDLENBQUM7QUFFSCxJQUFJLFFBQVEsR0FBRyxVQUFVLENBQUM7SUFDeEIsWUFBWTtJQUNaLFdBQVc7SUFDWCx3QkFBd0I7SUFDeEIseUNBQXlDO0lBQ3pDLFdBQVc7SUFDWCxZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixxQkFBcUI7SUFDckIscUJBQXFCO0NBQ3RCLENBQUMsQ0FBQztBQUNILElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQztJQUN0Qix3QkFBd0I7SUFDeEIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsMEJBQTBCO0lBQzFCLDZCQUE2QjtJQUM3QixnREFBZ0Q7SUFDaEQseUJBQXlCO0NBQzFCLENBQUMsQ0FBQztBQUVILDhDQUE4QyxNQUFNO0lBRWxEQyxZQUFZQSxNQUFjQTtRQUN4QkMsTUFBTUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDZEEsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsQ0FBQ0E7UUFDbEJBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO0lBQzNCQSxDQUFDQTtJQUVERCxVQUFVQSxDQUFDQSxPQUFZQTtRQUNyQkUsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsT0FBT0EsSUFBSUE7WUFHeEJBLE1BQU1BLEVBQUVBLElBQUlBO1lBQ1pBLEdBQUdBLEVBQUVBLElBQUlBO1lBQ1RBLEtBQUtBLEVBQUVBLElBQUlBO1lBQ1hBLE9BQU9BLEVBQUVBLElBQUlBO1lBQ2JBLElBQUlBLEVBQUVBLElBQUlBO1lBQ1ZBLFFBQVFBLEVBQUVBLElBQUlBO1lBQ2RBLFFBQVFBLEVBQUVBLElBQUlBO1lBQ2RBLFNBQVNBLEVBQUVBLElBQUlBO1lBQ2ZBLE1BQU1BLEVBQUVBLEtBQUtBO1lBQ2JBLFFBQVFBLEVBQUVBLEtBQUtBO1lBQ2ZBLE1BQU1BLEVBQUVBLEdBQUdBO1lBQ1hBLElBQUlBLEVBQUVBLElBQUlBO1lBQ1ZBLFFBQVFBLEVBQUVBLElBQUlBO1lBQ2RBLFlBQVlBLEVBQUVBLElBQUlBO1NBQ25CQSxDQUFDQTtRQUNGQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxFQUFFQSxJQUFJQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUMzREEsQ0FBQ0E7SUFFREYsYUFBYUEsQ0FBQ0EsVUFBVUE7UUFDdEJHLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLEVBQUVBLFVBQVVBLENBQUNBLENBQUNBO1FBQ2hDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxFQUFFQSxJQUFJQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUMzREEsQ0FBQ0E7SUFFREgsU0FBU0EsQ0FBQ0EsR0FBV0E7UUFDbkJJLElBQUlBLENBQUNBO1lBRUhBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBO1FBQ3pCQSxDQUNBQTtRQUFBQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNUQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtnQkFDVkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBQ0RBLE1BQU1BLENBQUNBLEtBQUtBLENBQUFBO0lBQ2RBLENBQUNBO0lBRURKLFFBQVFBO1FBQ05LLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLFFBQVFBLEVBQUVBLENBQUNBO1FBQ2hDQSxLQUFLQSxHQUFHQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxTQUFTQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUN2Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDWEEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDL0JBLE1BQU1BLENBQUNBO1FBQ1RBLENBQUNBO1FBQ0RBLElBQUlBLE1BQU1BLEdBQUdBLEVBQUVBLENBQUNBO1FBSWhCQSxJQUFJQSxhQUFhQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxTQUFTQSxHQUFHQSxPQUFPQSxDQUFDQTtRQUloRUEsSUFBSUEsT0FBT0EsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFFakJBLElBQUlBLFVBQVVBLEdBQUdBLEtBQUtBLENBQUFBO1FBQ3RCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxPQUFPQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUN4Q0EsSUFBSUEsS0FBS0EsR0FBR0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdkJBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBO2dCQUNUQSxRQUFRQSxDQUFDQTtZQUNYQSxJQUFJQSxHQUFHQSxHQUFHQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQTtZQUNwQkEsSUFBSUEsSUFBSUEsR0FBR0EsU0FBU0EsQ0FBQ0E7WUFFckJBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2hDQSxJQUFJQSxHQUFHQSxHQUFHQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtnQkFDakRBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUNuQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsYUFBYUEsSUFBSUEsT0FBT0EsSUFBSUEsR0FBR0EsSUFBSUEsYUFBYUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQy9EQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFHQSw4QkFBOEJBLENBQUNBO29CQUM5Q0EsSUFBSUEsR0FBR0EsT0FBT0EsQ0FBQ0E7Z0JBQ2pCQSxDQUFDQTtnQkFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7b0JBQ05BLElBQUlBLEdBQUdBLE1BQU1BLENBQUNBO2dCQUNoQkEsQ0FBQ0E7WUFDSEEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDdENBLFFBQVFBLENBQUNBO1lBQ1hBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO2dCQUMxQkEsSUFBSUEsR0FBR0EsTUFBTUEsQ0FBQUE7WUFDZkEsQ0FBQ0E7WUFDREEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzVCQSxVQUFVQSxHQUFHQSxJQUFJQSxDQUFDQTtnQkFDbEJBLElBQUlBLEdBQUdBLGFBQWFBLENBQUNBO1lBQ3ZCQSxDQUFDQTtZQUNEQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSx1QkFBdUJBLENBQUNBLENBQUNBLENBQUNBO2dCQUN4Q0EsSUFBSUEsR0FBR0EsU0FBU0EsQ0FBQ0E7WUFDbkJBLENBQUNBO1lBQ0RBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLGtDQUFrQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ25EQSxJQUFJQSxHQUFHQSxNQUFNQSxDQUFDQTtZQUNoQkEsQ0FBQ0E7WUFFREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7Z0JBQ1ZBLEdBQUdBLEVBQUVBLEtBQUtBLENBQUNBLElBQUlBLEdBQUdBLENBQUNBO2dCQUNuQkEsTUFBTUEsRUFBRUEsS0FBS0EsQ0FBQ0EsU0FBU0EsR0FBR0EsQ0FBQ0E7Z0JBQzNCQSxJQUFJQSxFQUFFQSxLQUFLQSxDQUFDQSxNQUFNQTtnQkFDbEJBLElBQUlBLEVBQUVBLElBQUlBO2dCQUNWQSxHQUFHQSxFQUFFQSxHQUFHQTthQUNUQSxDQUFDQSxDQUFDQTtZQUVIQSxFQUFFQSxDQUFDQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUVqQkEsQ0FBQ0E7UUFDSEEsQ0FBQ0E7UUFFREEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7SUFDckNBLENBQUNBO0FBQ0hMLENBQUNBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge21peGlufSBmcm9tIFwiLi4vbGliL29vcFwiO1xuaW1wb3J0IE1pcnJvciBmcm9tIFwiLi4vd29ya2VyL01pcnJvclwiO1xuaW1wb3J0IFNlbmRlciBmcm9tIFwiLi4vbGliL1NlbmRlclwiO1xuXG4vL3ZhciBsaW50ID0gcmVxdWlyZShcIi4vamF2YXNjcmlwdC9qc2hpbnRcIikuSlNISU5UO1xuXG5mdW5jdGlvbiBzdGFydFJlZ2V4KGFycikge1xuICByZXR1cm4gUmVnRXhwKFwiXihcIiArIGFyci5qb2luKFwifFwiKSArIFwiKVwiKTtcbn1cblxudmFyIGRpc2FibGVkV2FybmluZ3NSZSA9IHN0YXJ0UmVnZXgoW1xuICBcIkJhZCBmb3IgaW4gdmFyaWFibGUgJyguKyknLlwiLFxuICAnTWlzc2luZyBcInVzZSBzdHJpY3RcIidcbl0pO1xuXG52YXIgZXJyb3JzUmUgPSBzdGFydFJlZ2V4KFtcbiAgXCJVbmV4cGVjdGVkXCIsXG4gIFwiRXhwZWN0ZWQgXCIsXG4gIFwiQ29uZnVzaW5nIChwbHVzfG1pbnVzKVwiLFxuICBcIlxcXFx7YVxcXFx9IHVudGVybWluYXRlZCByZWd1bGFyIGV4cHJlc3Npb25cIixcbiAgXCJVbmNsb3NlZCBcIixcbiAgXCJVbm1hdGNoZWQgXCIsXG4gIFwiVW5iZWd1biBjb21tZW50XCIsXG4gIFwiQmFkIGludm9jYXRpb25cIixcbiAgXCJNaXNzaW5nIHNwYWNlIGFmdGVyXCIsXG4gIFwiTWlzc2luZyBvcGVyYXRvciBhdFwiXG5dKTtcbnZhciBpbmZvUmUgPSBzdGFydFJlZ2V4KFtcbiAgXCJFeHBlY3RlZCBhbiBhc3NpZ25tZW50XCIsXG4gIFwiQmFkIGVzY2FwZW1lbnQgb2YgRU9MXCIsXG4gIFwiVW5leHBlY3RlZCBjb21tYVwiLFxuICBcIlVuZXhwZWN0ZWQgc3BhY2VcIixcbiAgXCJNaXNzaW5nIHJhZGl4IHBhcmFtZXRlci5cIixcbiAgXCJBIGxlYWRpbmcgZGVjaW1hbCBwb2ludCBjYW5cIixcbiAgXCJcXFxcWyd7YX0nXFxcXF0gaXMgYmV0dGVyIHdyaXR0ZW4gaW4gZG90IG5vdGF0aW9uLlwiLFxuICBcIid7YX0nIHVzZWQgb3V0IG9mIHNjb3BlXCJcbl0pO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBKYXZhU2NyaXB0V29ya2VyIGV4dGVuZHMgTWlycm9yIHtcbiAgb3B0aW9ucztcbiAgY29uc3RydWN0b3Ioc2VuZGVyOiBTZW5kZXIpIHtcbiAgICBzdXBlcihzZW5kZXIpO1xuICAgIHRoaXMuc2V0T3B0aW9ucygpO1xuICAgIHNlbmRlci5lbWl0KCdpbml0QWZ0ZXInKTtcbiAgfVxuXG4gIHNldE9wdGlvbnMob3B0aW9ucz86IHt9KSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7XG4gICAgICAvLyB1bmRlZjogdHJ1ZSxcbiAgICAgIC8vIHVudXNlZDogdHJ1ZSxcbiAgICAgIGVzbmV4dDogdHJ1ZSxcbiAgICAgIG1vejogdHJ1ZSxcbiAgICAgIGRldmVsOiB0cnVlLFxuICAgICAgYnJvd3NlcjogdHJ1ZSxcbiAgICAgIG5vZGU6IHRydWUsXG4gICAgICBsYXhjb21tYTogdHJ1ZSxcbiAgICAgIGxheGJyZWFrOiB0cnVlLFxuICAgICAgbGFzdHNlbWljOiB0cnVlLFxuICAgICAgb25ldmFyOiBmYWxzZSxcbiAgICAgIHBhc3NmYWlsOiBmYWxzZSxcbiAgICAgIG1heGVycjogMTAwLFxuICAgICAgZXhwcjogdHJ1ZSxcbiAgICAgIG11bHRpc3RyOiB0cnVlLFxuICAgICAgZ2xvYmFsc3RyaWN0OiB0cnVlXG4gICAgfTtcbiAgICB0aGlzLmRvYy5nZXRWYWx1ZSgpICYmIHRoaXMuZGVmZXJyZWRVcGRhdGUuc2NoZWR1bGUoMTAwKTtcbiAgfVxuXG4gIGNoYW5nZU9wdGlvbnMobmV3T3B0aW9ucykge1xuICAgIG1peGluKHRoaXMub3B0aW9ucywgbmV3T3B0aW9ucyk7XG4gICAgdGhpcy5kb2MuZ2V0VmFsdWUoKSAmJiB0aGlzLmRlZmVycmVkVXBkYXRlLnNjaGVkdWxlKDEwMCk7XG4gIH1cblxuICBpc1ZhbGlkSlMoc3RyOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgLy8gZXZhbHVhdGVkIGNvZGUgY2FuIG9ubHkgY3JlYXRlIHZhcmlhYmxlcyBpbiB0aGlzIGZ1bmN0aW9uXG4gICAgICBldmFsKFwidGhyb3cgMDtcIiArIHN0cik7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICBpZiAoZSA9PT0gMClcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgb25VcGRhdGUoKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5kb2MuZ2V0VmFsdWUoKTtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL14jIS4qXFxuLywgXCJcXG5cIik7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgdGhpcy5zZW5kZXIuZW1pdChcImpzbGludFwiLCBbXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnJvcnMgPSBbXTtcblxuICAgIC8vIGpzaGludCByZXBvcnRzIG1hbnkgZmFsc2UgZXJyb3JzXG4gICAgLy8gcmVwb3J0IHRoZW0gYXMgZXJyb3Igb25seSBpZiBjb2RlIGlzIGFjdHVhbGx5IGludmFsaWRcbiAgICB2YXIgbWF4RXJyb3JMZXZlbCA9IHRoaXMuaXNWYWxpZEpTKHZhbHVlKSA/IFwid2FybmluZ1wiIDogXCJlcnJvclwiO1xuXG4gICAgLy8gdmFyIHN0YXJ0ID0gbmV3IERhdGUoKTtcbiAgICAvLyBsaW50KHZhbHVlLCB0aGlzLm9wdGlvbnMpO1xuICAgIHZhciByZXN1bHRzID0gW107Ly9saW50LmVycm9ycztcblxuICAgIHZhciBlcnJvckFkZGVkID0gZmFsc2VcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBlcnJvciA9IHJlc3VsdHNbaV07XG4gICAgICBpZiAoIWVycm9yKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIHZhciByYXcgPSBlcnJvci5yYXc7XG4gICAgICB2YXIgdHlwZSA9IFwid2FybmluZ1wiO1xuXG4gICAgICBpZiAocmF3ID09IFwiTWlzc2luZyBzZW1pY29sb24uXCIpIHtcbiAgICAgICAgdmFyIHN0ciA9IGVycm9yLmV2aWRlbmNlLnN1YnN0cihlcnJvci5jaGFyYWN0ZXIpO1xuICAgICAgICBzdHIgPSBzdHIuY2hhckF0KHN0ci5zZWFyY2goL1xcUy8pKTtcbiAgICAgICAgaWYgKG1heEVycm9yTGV2ZWwgPT0gXCJlcnJvclwiICYmIHN0ciAmJiAvW1xcd1xcZHsoWydcIl0vLnRlc3Qoc3RyKSkge1xuICAgICAgICAgIGVycm9yLnJlYXNvbiA9ICdNaXNzaW5nIFwiO1wiIGJlZm9yZSBzdGF0ZW1lbnQnO1xuICAgICAgICAgIHR5cGUgPSBcImVycm9yXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHlwZSA9IFwiaW5mb1wiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChkaXNhYmxlZFdhcm5pbmdzUmUudGVzdChyYXcpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaW5mb1JlLnRlc3QocmF3KSkge1xuICAgICAgICB0eXBlID0gXCJpbmZvXCJcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGVycm9yc1JlLnRlc3QocmF3KSkge1xuICAgICAgICBlcnJvckFkZGVkID0gdHJ1ZTtcbiAgICAgICAgdHlwZSA9IG1heEVycm9yTGV2ZWw7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChyYXcgPT0gXCIne2F9JyBpcyBub3QgZGVmaW5lZC5cIikge1xuICAgICAgICB0eXBlID0gXCJ3YXJuaW5nXCI7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChyYXcgPT0gXCIne2F9JyBpcyBkZWZpbmVkIGJ1dCBuZXZlciB1c2VkLlwiKSB7XG4gICAgICAgIHR5cGUgPSBcImluZm9cIjtcbiAgICAgIH1cblxuICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICByb3c6IGVycm9yLmxpbmUgLSAxLFxuICAgICAgICBjb2x1bW46IGVycm9yLmNoYXJhY3RlciAtIDEsXG4gICAgICAgIHRleHQ6IGVycm9yLnJlYXNvbixcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgcmF3OiByYXdcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZXJyb3JBZGRlZCkge1xuICAgICAgICAvLyBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNlbmRlci5lbWl0KFwianNsaW50XCIsIGVycm9ycyk7XG4gIH1cbn1cbi8qICoqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKipcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgbGljZW5zZTpcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAsIEFqYXgub3JnIEIuVi5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAgICAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEFqYXgub3JnIEIuVi4gbm9yIHRoZVxuICogICAgICAgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiAqICAgICAgIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICogXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBBSkFYLk9SRyBCLlYuIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuICogTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICpcbiAqICoqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqICovXG4iXX0=