import { mixin } from "../lib/oop";
import Mirror from "../worker/Mirror";
import { JSHINT } from "./javascript/jshint";
function startRegex(arr) {
    return RegExp("^(" + arr.join("|") + ")");
}
var disabledWarningsRe = startRegex([
    "Bad for in variable '(.+)'.",
    'Missing "use strict"'
]);
var errorsRe = startRegex([
    "Unexpected",
    "Expected ",
    "Confusing (plus|minus)",
    "\\{a\\} unterminated regular expression",
    "Unclosed ",
    "Unmatched ",
    "Unbegun comment",
    "Bad invocation",
    "Missing space after",
    "Missing operator at"
]);
var infoRe = startRegex([
    "Expected an assignment",
    "Bad escapement of EOL",
    "Unexpected comma",
    "Unexpected space",
    "Missing radix parameter.",
    "A leading decimal point can",
    "\\['{a}'\\] is better written in dot notation.",
    "'{a}' used out of scope"
]);
export default class JavaScriptWorker extends Mirror {
    constructor(sender) {
        super(sender);
        this.setOptions();
        sender.emit('initAfter');
    }
    setOptions(options) {
        this.options = options || {
            esnext: true,
            moz: true,
            devel: true,
            browser: true,
            node: true,
            laxcomma: true,
            laxbreak: true,
            lastsemic: true,
            onevar: false,
            passfail: false,
            maxerr: 100,
            expr: true,
            multistr: true,
            globalstrict: true
        };
        this.doc.getValue() && this.deferredUpdate.schedule(100);
    }
    changeOptions(newOptions) {
        mixin(this.options, newOptions);
        this.doc.getValue() && this.deferredUpdate.schedule(100);
    }
    isValidJS(str) {
        try {
            eval("throw 0;" + str);
        }
        catch (e) {
            if (e === 0)
                return true;
        }
        return false;
    }
    onUpdate() {
        var value = this.doc.getValue();
        value = value.replace(/^#!.*\n/, "\n");
        if (!value) {
            this.sender.emit("errors", []);
            return;
        }
        var errors = [];
        var maxErrorLevel = this.isValidJS(value) ? "warning" : "error";
        JSHINT(value, this.options);
        var results = JSHINT.errors;
        var errorAdded = false;
        for (var i = 0; i < results.length; i++) {
            var error = results[i];
            if (!error)
                continue;
            var raw = error.raw;
            var type = "warning";
            if (raw == "Missing semicolon.") {
                var str = error.evidence.substr(error.character);
                str = str.charAt(str.search(/\S/));
                if (maxErrorLevel == "error" && str && /[\w\d{(['"]/.test(str)) {
                    error.reason = 'Missing ";" before statement';
                    type = "error";
                }
                else {
                    type = "info";
                }
            }
            else if (disabledWarningsRe.test(raw)) {
                continue;
            }
            else if (infoRe.test(raw)) {
                type = "info";
            }
            else if (errorsRe.test(raw)) {
                errorAdded = true;
                type = maxErrorLevel;
            }
            else if (raw === "'{a}' is not defined.") {
                type = "warning";
            }
            else if (raw === "'{a}' is defined but never used.") {
                type = "info";
            }
            errors.push({
                row: error.line - 1,
                column: error.character - 1,
                text: error.reason,
                type: type
            });
            if (errorAdded) {
            }
        }
        this.sender.emit("errors", errors);
    }
}
//# sourceMappingURL=data:application/json;base64,