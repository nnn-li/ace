import { createElement, scrollbarWidth } from "./lib/dom";
import { addListener } from "./lib/event";
import { EventEmitterClass } from "./lib/event_emitter";
export class ScrollBar extends EventEmitterClass {
    constructor(parent, classSuffix) {
        super();
        this.element = createElement("div");
        this.element.className = "ace_scrollbar ace_scrollbar" + classSuffix;
        this.inner = createElement("div");
        this.inner.className = "ace_scrollbar-inner";
        this.element.appendChild(this.inner);
        parent.appendChild(this.element);
        this.setVisible(false);
        this.skipEvent = false;
        addListener(this.element, "mousedown", event.preventDefault);
    }
    setVisible(isVisible) {
        this.element.style.display = isVisible ? "" : "none";
        this.isVisible = isVisible;
    }
}
export class VScrollBar extends ScrollBar {
    constructor(parent, renderer) {
        super(parent, '-v');
        this._scrollTop = 0;
        renderer.$scrollbarWidth =
            this._width = scrollbarWidth(parent.ownerDocument);
        this.inner.style.width =
            this.element.style.width = (this._width || 15) + 5 + "px";
        addListener(this.element, "scroll", this.onScroll.bind(this));
    }
    onScroll() {
        if (!this.skipEvent) {
            this._scrollTop = this.element.scrollTop;
            this._emit("scroll", { data: this._scrollTop });
        }
        this.skipEvent = false;
    }
    get width() {
        return this.isVisible ? this._width : 0;
    }
    setHeight(height) {
        this.element.style.height = height + "px";
    }
    setInnerHeight(height) {
        this.inner.style.height = height + "px";
    }
    setScrollHeight(height) {
        this.inner.style.height = height + "px";
    }
    setScrollTop(scrollTop) {
        if (this._scrollTop != scrollTop) {
            this.skipEvent = true;
            this._scrollTop = this.element.scrollTop = scrollTop;
        }
    }
    get scrollTop() {
        return this._scrollTop;
    }
}
export class HScrollBar extends ScrollBar {
    constructor(parent, renderer) {
        super(parent, '-h');
        this._scrollLeft = 0;
        this._height = renderer.$scrollbarWidth;
        this.inner.style.height =
            this.element.style.height = (this._height || 15) + 5 + "px";
        addListener(this.element, "scroll", this.onScroll.bind(this));
    }
    onScroll() {
        if (!this.skipEvent) {
            this._scrollLeft = this.element.scrollLeft;
            this._emit("scroll", { data: this._scrollLeft });
        }
        this.skipEvent = false;
    }
    get height() {
        return this.isVisible ? this._height : 0;
    }
    setWidth(width) {
        this.element.style.width = width + "px";
    }
    setInnerWidth(width) {
        this.inner.style.width = width + "px";
    }
    setScrollWidth(width) {
        this.inner.style.width = width + "px";
    }
    setScrollLeft(scrollLeft) {
        if (this._scrollLeft != scrollLeft) {
            this.skipEvent = true;
            this._scrollLeft = this.element.scrollLeft = scrollLeft;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,