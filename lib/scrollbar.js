var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var dom = require("./lib/dom");
var event = require("./lib/event");
var eem = require("./lib/event_emitter");
var ScrollBar = (function (_super) {
    __extends(ScrollBar, _super);
    function ScrollBar(parent, classSuffix) {
        _super.call(this);
        this.element = dom.createElement("div");
        this.element.className = "ace_scrollbar ace_scrollbar" + classSuffix;
        this.inner = dom.createElement("div");
        this.inner.className = "ace_scrollbar-inner";
        this.element.appendChild(this.inner);
        parent.appendChild(this.element);
        this.setVisible(false);
        this.skipEvent = false;
        event.addListener(this.element, "mousedown", event.preventDefault);
    }
    ScrollBar.prototype.setVisible = function (isVisible) {
        this.element.style.display = isVisible ? "" : "none";
        this.isVisible = isVisible;
    };
    return ScrollBar;
})(eem.EventEmitterClass);
exports.ScrollBar = ScrollBar;
var VScrollBar = (function (_super) {
    __extends(VScrollBar, _super);
    function VScrollBar(parent, renderer) {
        _super.call(this, parent, '-v');
        this._scrollTop = 0;
        renderer.$scrollbarWidth =
            this._width = dom.scrollbarWidth(parent.ownerDocument);
        this.inner.style.width =
            this.element.style.width = (this._width || 15) + 5 + "px";
        event.addListener(this.element, "scroll", this.onScroll.bind(this));
    }
    VScrollBar.prototype.onScroll = function () {
        if (!this.skipEvent) {
            this._scrollTop = this.element.scrollTop;
            this._emit("scroll", { data: this._scrollTop });
        }
        this.skipEvent = false;
    };
    Object.defineProperty(VScrollBar.prototype, "width", {
        get: function () {
            return this.isVisible ? this._width : 0;
        },
        enumerable: true,
        configurable: true
    });
    VScrollBar.prototype.setHeight = function (height) {
        this.element.style.height = height + "px";
    };
    VScrollBar.prototype.setInnerHeight = function (height) {
        this.inner.style.height = height + "px";
    };
    VScrollBar.prototype.setScrollHeight = function (height) {
        this.inner.style.height = height + "px";
    };
    VScrollBar.prototype.setScrollTop = function (scrollTop) {
        if (this._scrollTop != scrollTop) {
            this.skipEvent = true;
            this._scrollTop = this.element.scrollTop = scrollTop;
        }
    };
    Object.defineProperty(VScrollBar.prototype, "scrollTop", {
        get: function () {
            return this._scrollTop;
        },
        enumerable: true,
        configurable: true
    });
    return VScrollBar;
})(ScrollBar);
exports.VScrollBar = VScrollBar;
var HScrollBar = (function (_super) {
    __extends(HScrollBar, _super);
    function HScrollBar(parent, renderer) {
        _super.call(this, parent, '-h');
        this._scrollLeft = 0;
        this._height = renderer.$scrollbarWidth;
        this.inner.style.height =
            this.element.style.height = (this._height || 15) + 5 + "px";
        event.addListener(this.element, "scroll", this.onScroll.bind(this));
    }
    HScrollBar.prototype.onScroll = function () {
        if (!this.skipEvent) {
            this._scrollLeft = this.element.scrollLeft;
            this._emit("scroll", { data: this._scrollLeft });
        }
        this.skipEvent = false;
    };
    Object.defineProperty(HScrollBar.prototype, "height", {
        get: function () {
            return this.isVisible ? this._height : 0;
        },
        enumerable: true,
        configurable: true
    });
    HScrollBar.prototype.setWidth = function (width) {
        this.element.style.width = width + "px";
    };
    HScrollBar.prototype.setInnerWidth = function (width) {
        this.inner.style.width = width + "px";
    };
    HScrollBar.prototype.setScrollWidth = function (width) {
        this.inner.style.width = width + "px";
    };
    HScrollBar.prototype.setScrollLeft = function (scrollLeft) {
        if (this._scrollLeft != scrollLeft) {
            this.skipEvent = true;
            this._scrollLeft = this.element.scrollLeft = scrollLeft;
        }
    };
    return HScrollBar;
})(ScrollBar);
exports.HScrollBar = HScrollBar;
//# sourceMappingURL=data:application/json;base64,