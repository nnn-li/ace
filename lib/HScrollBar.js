import { addListener } from "./lib/event";
import ScrollBar from './ScrollBar';
export default class HScrollBar extends ScrollBar {
    constructor(parent, renderer) {
        super(parent, '-h');
        this._scrollLeft = 0;
        this._height = renderer.$scrollbarWidth;
        this.inner.style.height = this.element.style.height = (this._height || 15) + 5 + "px";
        addListener(this.element, "scroll", this.onScroll.bind(this));
    }
    onScroll() {
        if (!this.skipEvent) {
            this._scrollLeft = this.element.scrollLeft;
            this._emit("scroll", { data: this._scrollLeft });
        }
        this.skipEvent = false;
    }
    get height() {
        return this.isVisible ? this._height : 0;
    }
    setWidth(width) {
        this.element.style.width = width + "px";
    }
    setInnerWidth(width) {
        this.inner.style.width = width + "px";
    }
    setScrollWidth(width) {
        this.inner.style.width = width + "px";
    }
    setScrollLeft(scrollLeft) {
        if (this._scrollLeft != scrollLeft) {
            this.skipEvent = true;
            this._scrollLeft = this.element.scrollLeft = scrollLeft;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSFNjcm9sbEJhci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9IU2Nyb2xsQmFyLnRzIl0sIm5hbWVzIjpbIkhTY3JvbGxCYXIiLCJIU2Nyb2xsQmFyLmNvbnN0cnVjdG9yIiwiSFNjcm9sbEJhci5vblNjcm9sbCIsIkhTY3JvbGxCYXIuaGVpZ2h0IiwiSFNjcm9sbEJhci5zZXRXaWR0aCIsIkhTY3JvbGxCYXIuc2V0SW5uZXJXaWR0aCIsIkhTY3JvbGxCYXIuc2V0U2Nyb2xsV2lkdGgiLCJIU2Nyb2xsQmFyLnNldFNjcm9sbExlZnQiXSwibWFwcGluZ3MiOiJPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYTtPQUNsQyxTQUFTLE1BQU0sYUFBYTtBQU9uQyx3Q0FBd0MsU0FBUztJQVc3Q0EsWUFBWUEsTUFBbUJBLEVBQUVBLFFBQXlCQTtRQUN0REMsTUFBTUEsTUFBTUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFWaEJBLGdCQUFXQSxHQUFHQSxDQUFDQSxDQUFDQTtRQWlCcEJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLFFBQVFBLENBQUNBLGVBQWVBLENBQUNBO1FBQ3hDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxJQUFJQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUN0RkEsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsRUFBRUEsUUFBUUEsRUFBRUEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDbEVBLENBQUNBO0lBT0RELFFBQVFBO1FBQ0pFLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xCQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFVQSxDQUFDQTtZQUMzQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsUUFBUUEsRUFBRUEsRUFBRUEsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFDckRBLENBQUNBO1FBQ0RBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLEtBQUtBLENBQUNBO0lBQzNCQSxDQUFDQTtJQU1ERixJQUFJQSxNQUFNQTtRQUNORyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUM3Q0EsQ0FBQ0E7SUFNREgsUUFBUUEsQ0FBQ0EsS0FBYUE7UUFDbEJJLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLEtBQUtBLEdBQUdBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBO0lBQzVDQSxDQUFDQTtJQU9ESixhQUFhQSxDQUFDQSxLQUFhQTtRQUN2QkssSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsS0FBS0EsR0FBR0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDMUNBLENBQUNBO0lBTURMLGNBQWNBLENBQUNBLEtBQWFBO1FBQ3hCTSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxHQUFHQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUMxQ0EsQ0FBQ0E7SUFRRE4sYUFBYUEsQ0FBQ0EsVUFBa0JBO1FBQzVCTyxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxJQUFJQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNqQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDdEJBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLFVBQVVBLEdBQUdBLFVBQVVBLENBQUNBO1FBQzVEQSxDQUFDQTtJQUNMQSxDQUFDQTtBQUNMUCxDQUFDQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYWRkTGlzdGVuZXIgfSBmcm9tIFwiLi9saWIvZXZlbnRcIjtcbmltcG9ydCBTY3JvbGxCYXIgZnJvbSAnLi9TY3JvbGxCYXInO1xuaW1wb3J0IFZpcnR1YWxSZW5kZXJlciBmcm9tIFwiLi9WaXJ0dWFsUmVuZGVyZXJcIjtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgaG9yaXpvbnRhbCBzY3JvbGwgYmFyLlxuICogQGNsYXNzIEhTY3JvbGxCYXJcbiAqKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhTY3JvbGxCYXIgZXh0ZW5kcyBTY3JvbGxCYXIge1xuXG4gICAgcHJpdmF0ZSBfc2Nyb2xsTGVmdCA9IDA7XG4gICAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBgSFNjcm9sbEJhcmAuIGBwYXJlbnRgIGlzIHRoZSBvd25lciBvZiB0aGUgc2Nyb2xsIGJhci5cbiAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudCBBIERPTSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlbmRlcmVyIEFuIGVkaXRvciByZW5kZXJlclxuICAgICAqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudDogSFRNTEVsZW1lbnQsIHJlbmRlcmVyOiBWaXJ0dWFsUmVuZGVyZXIpIHtcbiAgICAgICAgc3VwZXIocGFyZW50LCAnLWgnKTtcblxuICAgICAgICAvLyBpbiBPU1ggbGlvbiB0aGUgc2Nyb2xsYmFycyBhcHBlYXIgdG8gaGF2ZSBubyB3aWR0aC4gSW4gdGhpcyBjYXNlIHJlc2l6ZSB0aGVcbiAgICAgICAgLy8gZWxlbWVudCB0byBzaG93IHRoZSBzY3JvbGxiYXIgYnV0IHN0aWxsIHByZXRlbmQgdGhhdCB0aGUgc2Nyb2xsYmFyIGhhcyBhIHdpZHRoXG4gICAgICAgIC8vIG9mIDBweFxuICAgICAgICAvLyBpbiBGaXJlZm94IDYrIHNjcm9sbGJhciBpcyBoaWRkZW4gaWYgZWxlbWVudCBoYXMgdGhlIHNhbWUgd2lkdGggYXMgc2Nyb2xsYmFyXG4gICAgICAgIC8vIG1ha2UgZWxlbWVudCBhIGxpdHRsZSBiaXQgd2lkZXIgdG8gcmV0YWluIHNjcm9sbGJhciB3aGVuIHBhZ2UgaXMgem9vbWVkIFxuICAgICAgICB0aGlzLl9oZWlnaHQgPSByZW5kZXJlci4kc2Nyb2xsYmFyV2lkdGg7XG4gICAgICAgIHRoaXMuaW5uZXIuc3R5bGUuaGVpZ2h0ID0gdGhpcy5lbGVtZW50LnN0eWxlLmhlaWdodCA9ICh0aGlzLl9oZWlnaHQgfHwgMTUpICsgNSArIFwicHhcIjtcbiAgICAgICAgYWRkTGlzdGVuZXIodGhpcy5lbGVtZW50LCBcInNjcm9sbFwiLCB0aGlzLm9uU2Nyb2xsLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiB0aGUgc2Nyb2xsIGJhciwgd2VsbCwgc2Nyb2xscy5cbiAgICAgKiBAZXZlbnQgc2Nyb2xsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGUgQ29udGFpbnMgb25lIHByb3BlcnR5LCBgXCJkYXRhXCJgLCB3aGljaCBpbmRpY2F0ZXMgdGhlIGN1cnJlbnQgc2Nyb2xsIGxlZnQgcG9zaXRpb25cbiAgICAgKiovXG4gICAgb25TY3JvbGwoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5za2lwRXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Njcm9sbExlZnQgPSB0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgICAgIHRoaXMuX2VtaXQoXCJzY3JvbGxcIiwgeyBkYXRhOiB0aGlzLl9zY3JvbGxMZWZ0IH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2tpcEV2ZW50ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaGVpZ2h0IG9mIHRoZSBzY3JvbGwgYmFyLlxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKiovXG4gICAgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1Zpc2libGUgPyB0aGlzLl9oZWlnaHQgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHdpZHRoIG9mIHRoZSBzY3JvbGwgYmFyLCBpbiBwaXhlbHMuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoIFRoZSBuZXcgd2lkdGhcbiAgICAgKiovXG4gICAgc2V0V2lkdGgod2lkdGg6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpbm5lciB3aWR0aCBvZiB0aGUgc2Nyb2xsIGJhciwgaW4gcGl4ZWxzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCBUaGUgbmV3IGlubmVyIHdpZHRoXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHNldFNjcm9sbFdpZHRoIGluc3RlYWRcbiAgICAgKiovXG4gICAgc2V0SW5uZXJXaWR0aCh3aWR0aDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuaW5uZXIuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzY3JvbGwgd2lkdGggb2YgdGhlIHNjcm9sbCBiYXIsIGluIHBpeGVscy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gd2lkdGggVGhlIG5ldyBzY3JvbGwgd2lkdGhcbiAgICAgKiovXG4gICAgc2V0U2Nyb2xsV2lkdGgod2lkdGg6IG51bWJlcikge1xuICAgICAgICB0aGlzLmlubmVyLnN0eWxlLndpZHRoID0gd2lkdGggKyBcInB4XCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc2Nyb2xsIGxlZnQgb2YgdGhlIHNjcm9sbCBiYXIuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjcm9sbFRvcCBUaGUgbmV3IHNjcm9sbCBsZWZ0XG4gICAgICoqL1xuICAgIC8vIG9uIGNocm9tZSAxNysgZm9yIHNtYWxsIHpvb20gbGV2ZWxzIGFmdGVyIGNhbGxpbmcgdGhpcyBmdW5jdGlvblxuICAgIC8vIHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgIT0gc2Nyb2xsVG9wIHdoaWNoIG1ha2VzIHBhZ2UgdG8gc2Nyb2xsIHVwLlxuICAgIHNldFNjcm9sbExlZnQoc2Nyb2xsTGVmdDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9zY3JvbGxMZWZ0ICE9IHNjcm9sbExlZnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2tpcEV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3Njcm9sbExlZnQgPSB0aGlzLmVsZW1lbnQuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=