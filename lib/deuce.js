import { getInnerText } from "./lib/dom";
import { addListener, removeListener } from "./lib/event";
import Editor from "./Editor";
import EditorDocument from "./EditorDocument";
import EditSession from "./EditSession";
import UndoManager from "./UndoManager";
import VirtualRenderer from "./VirtualRenderer";
import HtmlMode from "./mode/HtmlMode";
export function edit(source) {
    var element;
    if (typeof source === 'string') {
        var id = source;
        element = document.getElementById(id);
        if (!element) {
            throw new Error("edit can't find div #" + id);
        }
    }
    else {
        element = source;
    }
    if (element && element['env'] && element['env'].editor instanceof Editor) {
        return element['env'].editor;
    }
    var value = "";
    if (element && /input|textarea/i.test(element.tagName)) {
        var oldNode = element;
        value = oldNode.value;
        element = document.createElement("pre");
        oldNode.parentNode.replaceChild(element, oldNode);
    }
    else {
        value = getInnerText(element);
        element.innerHTML = '';
    }
    var editSession = createEditSession(new EditorDocument(value), new HtmlMode());
    var editor = new Editor(new VirtualRenderer(element), editSession);
    var env = {
        document: editSession,
        editor: editor,
        onResize: editor.resize.bind(editor, null)
    };
    if (oldNode)
        env['textarea'] = oldNode;
    addListener(window, "resize", env.onResize);
    editor.on("destroy", function () {
        removeListener(window, "resize", env.onResize);
        env.editor.container['env'] = null;
    });
    editor.container['env'] = editor['env'] = env;
    return editor;
}
;
export function createEditSession(doc, mode, callback) {
    var editSession = new EditSession(doc, mode, callback);
    editSession.setUndoManager(new UndoManager());
    return editSession;
}
;
//# sourceMappingURL=data:application/json;base64,