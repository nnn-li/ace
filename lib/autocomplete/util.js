function parForEach(array, fn, callback) {
    var completed = 0;
    var arLength = array.length;
    if (arLength === 0)
        callback();
    for (var i = 0; i < arLength; i++) {
        fn(array[i], function (result, err) {
            completed++;
            if (completed === arLength)
                callback(result, err);
        });
    }
}
exports.parForEach = parForEach;
var ID_REGEX = /[a-zA-Z_0-9\$\-\u00A2-\uFFFF]/;
function retrievePrecedingIdentifier(text, pos, regex) {
    regex = regex || ID_REGEX;
    var buf = [];
    for (var i = pos - 1; i >= 0; i--) {
        if (regex.test(text[i]))
            buf.push(text[i]);
        else
            break;
    }
    return buf.reverse().join("");
}
exports.retrievePrecedingIdentifier = retrievePrecedingIdentifier;
function retrieveFollowingIdentifier(text, pos, regex) {
    regex = regex || ID_REGEX;
    var buf = [];
    for (var i = pos; i < text.length; i++) {
        if (regex.test(text[i]))
            buf.push(text[i]);
        else
            break;
    }
    return buf;
}
exports.retrieveFollowingIdentifier = retrieveFollowingIdentifier;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdXRvY29tcGxldGUvdXRpbC50cyJdLCJuYW1lcyI6WyJwYXJGb3JFYWNoIiwicmV0cmlldmVQcmVjZWRpbmdJZGVudGlmaWVyIiwicmV0cmlldmVGb2xsb3dpbmdJZGVudGlmaWVyIl0sIm1hcHBpbmdzIjoiQUErQkEsb0JBQTJCLEtBQVcsRUFBRSxFQUFFLEVBQUUsUUFBUTtJQUNoREEsSUFBSUEsU0FBU0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFDbEJBLElBQUlBLFFBQVFBLEdBQUdBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBO0lBQzVCQSxFQUFFQSxDQUFDQSxDQUFDQSxRQUFRQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUNmQSxRQUFRQSxFQUFFQSxDQUFDQTtJQUNmQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxRQUFRQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtRQUNoQ0EsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsVUFBU0EsTUFBTUEsRUFBRUEsR0FBR0E7WUFDN0IsU0FBUyxFQUFFLENBQUM7WUFDWixFQUFFLENBQUMsQ0FBQyxTQUFTLEtBQUssUUFBUSxDQUFDO2dCQUN2QixRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7QUFDTEEsQ0FBQ0E7QUFaZSxrQkFBVSxhQVl6QixDQUFBO0FBRUQsSUFBSSxRQUFRLEdBQUcsK0JBQStCLENBQUM7QUFFL0MscUNBQTRDLElBQVksRUFBRSxHQUFXLEVBQUUsS0FBYztJQUNqRkMsS0FBS0EsR0FBR0EsS0FBS0EsSUFBSUEsUUFBUUEsQ0FBQ0E7SUFDMUJBLElBQUlBLEdBQUdBLEdBQWFBLEVBQUVBLENBQUNBO0lBQ3ZCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtRQUM5QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDcEJBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3RCQSxJQUFJQTtZQUNBQSxLQUFLQSxDQUFDQTtJQUNkQSxDQUFDQTtJQUNEQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtBQUNsQ0EsQ0FBQ0E7QUFWZSxtQ0FBMkIsOEJBVTFDLENBQUE7QUFJRCxxQ0FBNEMsSUFBWSxFQUFFLEdBQVcsRUFBRSxLQUFhO0lBQ2hGQyxLQUFLQSxHQUFHQSxLQUFLQSxJQUFJQSxRQUFRQSxDQUFDQTtJQUMxQkEsSUFBSUEsR0FBR0EsR0FBYUEsRUFBRUEsQ0FBQ0E7SUFDdkJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1FBQ3JDQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNwQkEsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLElBQUlBO1lBQ0FBLEtBQUtBLENBQUNBO0lBQ2RBLENBQUNBO0lBQ0RBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO0FBQ2ZBLENBQUNBO0FBVmUsbUNBQTJCLDhCQVUxQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyogKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKlxuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBsaWNlbnNlOlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiwgQWpheC5vcmcgQi5WLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICogICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqICAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gKiAgICAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogICAgICogTmVpdGhlciB0aGUgbmFtZSBvZiBBamF4Lm9yZyBCLlYuIG5vciB0aGVcbiAqICAgICAgIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzXG4gKiAgICAgICBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBBSkFYLk9SRyBCLlYuIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuICogTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICpcbiAqICoqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqICovXG5cbi8vIFRPRE86IE1ha2UgY2FsbGJhY2sgZm9sbG93IE5vZGUuSlMgY29udmVudGlvbj8uIFdobyB1c2VzIHRoaXM/IFdoYXQgYWJvdXQgZm4/XG5leHBvcnQgZnVuY3Rpb24gcGFyRm9yRWFjaChhcnJheToge31bXSwgZm4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIGNvbXBsZXRlZCA9IDA7XG4gICAgdmFyIGFyTGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgIGlmIChhckxlbmd0aCA9PT0gMClcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm4oYXJyYXlbaV0sIGZ1bmN0aW9uKHJlc3VsdCwgZXJyKSB7XG4gICAgICAgICAgICBjb21wbGV0ZWQrKztcbiAgICAgICAgICAgIGlmIChjb21wbGV0ZWQgPT09IGFyTGVuZ3RoKVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3VsdCwgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG52YXIgSURfUkVHRVggPSAvW2EtekEtWl8wLTlcXCRcXC1cXHUwMEEyLVxcdUZGRkZdLztcblxuZXhwb3J0IGZ1bmN0aW9uIHJldHJpZXZlUHJlY2VkaW5nSWRlbnRpZmllcih0ZXh0OiBzdHJpbmcsIHBvczogbnVtYmVyLCByZWdleD86IFJlZ0V4cCk6IHN0cmluZyB7XG4gICAgcmVnZXggPSByZWdleCB8fCBJRF9SRUdFWDtcbiAgICB2YXIgYnVmOiBzdHJpbmdbXSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSBwb3MtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgaWYgKHJlZ2V4LnRlc3QodGV4dFtpXSkpXG4gICAgICAgICAgICBidWYucHVzaCh0ZXh0W2ldKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBidWYucmV2ZXJzZSgpLmpvaW4oXCJcIik7XG59XG5cbi8vIFRPRE86IElzIHRoaXMgY29ycmVjdD8gSXQgZG9lc24ndCBzZWVtIHRvIGJlIHN5bW1ldHJpY2FsLlxuLy8gTm90IHN1cnByaXNpbmdseSwgaXQgZG9lcyBub3QgYXBwZWFyIHRvIGJlIHVzZWQuXG5leHBvcnQgZnVuY3Rpb24gcmV0cmlldmVGb2xsb3dpbmdJZGVudGlmaWVyKHRleHQ6IHN0cmluZywgcG9zOiBudW1iZXIsIHJlZ2V4OiBSZWdFeHApOiBzdHJpbmdbXSB7XG4gICAgcmVnZXggPSByZWdleCB8fCBJRF9SRUdFWDtcbiAgICB2YXIgYnVmOiBzdHJpbmdbXSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSBwb3M7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChyZWdleC50ZXN0KHRleHRbaV0pKVxuICAgICAgICAgICAgYnVmLnB1c2godGV4dFtpXSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gYnVmO1xufVxuIl19