export function parForEach(array, fn, callback) {
    var completed = 0;
    var arLength = array.length;
    if (arLength === 0)
        callback();
    for (var i = 0; i < arLength; i++) {
        fn(array[i], function (result, err) {
            completed++;
            if (completed === arLength)
                callback(result, err);
        });
    }
}
var ID_REGEX = /[a-zA-Z_0-9\$\-\u00A2-\uFFFF]/;
export function retrievePrecedingIdentifier(text, pos, regex) {
    regex = regex || ID_REGEX;
    var buf = [];
    for (var i = pos - 1; i >= 0; i--) {
        if (regex.test(text[i]))
            buf.push(text[i]);
        else
            break;
    }
    return buf.reverse().join("");
}
export function retrieveFollowingIdentifier(text, pos, regex) {
    regex = regex || ID_REGEX;
    var buf = [];
    for (var i = pos; i < text.length; i++) {
        if (regex.test(text[i]))
            buf.push(text[i]);
        else
            break;
    }
    return buf;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdXRvY29tcGxldGUvdXRpbC50cyJdLCJuYW1lcyI6WyJwYXJGb3JFYWNoIiwicmV0cmlldmVQcmVjZWRpbmdJZGVudGlmaWVyIiwicmV0cmlldmVGb2xsb3dpbmdJZGVudGlmaWVyIl0sIm1hcHBpbmdzIjoiQUErQkEsMkJBQTJCLEtBQVcsRUFBRSxFQUFFLEVBQUUsUUFBUTtJQUNoREEsSUFBSUEsU0FBU0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFDbEJBLElBQUlBLFFBQVFBLEdBQUdBLEtBQUtBLENBQUNBLE1BQU1BLENBQUNBO0lBQzVCQSxFQUFFQSxDQUFDQSxDQUFDQSxRQUFRQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUNmQSxRQUFRQSxFQUFFQSxDQUFDQTtJQUNmQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxRQUFRQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtRQUNoQ0EsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsVUFBU0EsTUFBTUEsRUFBRUEsR0FBR0E7WUFDN0IsU0FBUyxFQUFFLENBQUM7WUFDWixFQUFFLENBQUMsQ0FBQyxTQUFTLEtBQUssUUFBUSxDQUFDO2dCQUN2QixRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7QUFDTEEsQ0FBQ0E7QUFFRCxJQUFJLFFBQVEsR0FBRywrQkFBK0IsQ0FBQztBQUUvQyw0Q0FBNEMsSUFBWSxFQUFFLEdBQVcsRUFBRSxLQUFjO0lBQ2pGQyxLQUFLQSxHQUFHQSxLQUFLQSxJQUFJQSxRQUFRQSxDQUFDQTtJQUMxQkEsSUFBSUEsR0FBR0EsR0FBYUEsRUFBRUEsQ0FBQ0E7SUFDdkJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUNBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1FBQzlCQSxFQUFFQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNwQkEsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEJBLElBQUlBO1lBQ0FBLEtBQUtBLENBQUNBO0lBQ2RBLENBQUNBO0lBQ0RBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO0FBQ2xDQSxDQUFDQTtBQUlELDRDQUE0QyxJQUFZLEVBQUUsR0FBVyxFQUFFLEtBQWE7SUFDaEZDLEtBQUtBLEdBQUdBLEtBQUtBLElBQUlBLFFBQVFBLENBQUNBO0lBQzFCQSxJQUFJQSxHQUFHQSxHQUFhQSxFQUFFQSxDQUFDQTtJQUN2QkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7UUFDckNBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ3BCQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0QkEsSUFBSUE7WUFDQUEsS0FBS0EsQ0FBQ0E7SUFDZEEsQ0FBQ0E7SUFDREEsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0E7QUFDZkEsQ0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiAqKioqKiBCRUdJTiBMSUNFTlNFIEJMT0NLICoqKioqXG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIGxpY2Vuc2U6XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyLCBBamF4Lm9yZyBCLlYuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAgICAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEFqYXgub3JnIEIuVi4gbm9yIHRoZVxuICogICAgICAgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiAqICAgICAgIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICogQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEFKQVguT1JHIEIuVi4gQkUgTElBQkxFIEZPUiBBTllcbiAqIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gKiAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7XG4gKiBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkRcbiAqIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKlxuICogKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKiogKi9cblxuLy8gVE9ETzogTWFrZSBjYWxsYmFjayBmb2xsb3cgTm9kZS5KUyBjb252ZW50aW9uPy4gV2hvIHVzZXMgdGhpcz8gV2hhdCBhYm91dCBmbj9cbmV4cG9ydCBmdW5jdGlvbiBwYXJGb3JFYWNoKGFycmF5OiB7fVtdLCBmbiwgY2FsbGJhY2spIHtcbiAgICB2YXIgY29tcGxldGVkID0gMDtcbiAgICB2YXIgYXJMZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGFyTGVuZ3RoID09PSAwKVxuICAgICAgICBjYWxsYmFjaygpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJMZW5ndGg7IGkrKykge1xuICAgICAgICBmbihhcnJheVtpXSwgZnVuY3Rpb24ocmVzdWx0LCBlcnIpIHtcbiAgICAgICAgICAgIGNvbXBsZXRlZCsrO1xuICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA9PT0gYXJMZW5ndGgpXG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVzdWx0LCBlcnIpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbnZhciBJRF9SRUdFWCA9IC9bYS16QS1aXzAtOVxcJFxcLVxcdTAwQTItXFx1RkZGRl0vO1xuXG5leHBvcnQgZnVuY3Rpb24gcmV0cmlldmVQcmVjZWRpbmdJZGVudGlmaWVyKHRleHQ6IHN0cmluZywgcG9zOiBudW1iZXIsIHJlZ2V4PzogUmVnRXhwKTogc3RyaW5nIHtcbiAgICByZWdleCA9IHJlZ2V4IHx8IElEX1JFR0VYO1xuICAgIHZhciBidWY6IHN0cmluZ1tdID0gW107XG4gICAgZm9yICh2YXIgaSA9IHBvcy0xOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAocmVnZXgudGVzdCh0ZXh0W2ldKSlcbiAgICAgICAgICAgIGJ1Zi5wdXNoKHRleHRbaV0pO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIGJ1Zi5yZXZlcnNlKCkuam9pbihcIlwiKTtcbn1cblxuLy8gVE9ETzogSXMgdGhpcyBjb3JyZWN0PyBJdCBkb2Vzbid0IHNlZW0gdG8gYmUgc3ltbWV0cmljYWwuXG4vLyBOb3Qgc3VycHJpc2luZ2x5LCBpdCBkb2VzIG5vdCBhcHBlYXIgdG8gYmUgdXNlZC5cbmV4cG9ydCBmdW5jdGlvbiByZXRyaWV2ZUZvbGxvd2luZ0lkZW50aWZpZXIodGV4dDogc3RyaW5nLCBwb3M6IG51bWJlciwgcmVnZXg6IFJlZ0V4cCk6IHN0cmluZ1tdIHtcbiAgICByZWdleCA9IHJlZ2V4IHx8IElEX1JFR0VYO1xuICAgIHZhciBidWY6IHN0cmluZ1tdID0gW107XG4gICAgZm9yICh2YXIgaSA9IHBvczsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHJlZ2V4LnRlc3QodGV4dFtpXSkpXG4gICAgICAgICAgICBidWYucHVzaCh0ZXh0W2ldKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBidWY7XG59XG4iXX0=