import EditorDocument from "../EditorDocument";
import EditSession from "../EditSession";
import VirtualRenderer from "../VirtualRenderer";
import Editor from "../Editor";
import Range from "../Range";
import { addListener } from "../lib/event";
import { stringRepeat } from "../lib/lang";
import { addCssClass, createElement, importCssString, removeCssClass } from "../lib/dom";
var noop = function () { };
export class ListViewPopup {
    constructor(parentNode) {
        this.$borderSize = 1;
        this.$imageSize = 0;
        this.hoverMarker = new Range(-1, 0, -1, Infinity);
        this.selectionMarker = new Range(-1, 0, -1, Infinity);
        this.isOpen = false;
        this.isTopdown = false;
        this.data = [];
        var self = this;
        function createEditor(el) {
            var renderer = new VirtualRenderer(el);
            renderer.content.style.cursor = "default";
            renderer.setStyle("ace_autocomplete");
            renderer.$cursorLayer.restartTimer = noop;
            renderer.$cursorLayer.element.style.opacity = "0";
            renderer.$maxLines = 8;
            renderer.$keepTextAreaAtCursor = false;
            var model = new EditorDocument("");
            var editSession = new EditSession(model);
            var editor = new Editor(renderer, editSession);
            editor.setHighlightActiveLine(false);
            editor.setShowPrintMargin(false);
            editor.renderer.setShowGutter(false);
            editor.renderer.setHighlightGutterLine(false);
            editor.setOption("displayIndentGuides", false);
            editor.setOption("dragDelay", 150);
            editor.focus = noop;
            editor.$isFocused = true;
            editor.setHighlightActiveLine(false);
            editor.getSession().$searchHighlight.clazz = "ace_highlight-marker";
            return editor;
        }
        var el = createElement("div");
        this.editor = createEditor(el);
        if (parentNode) {
            parentNode.appendChild(el);
        }
        el.style.display = "none";
        this.editor.on("mousedown", function (e) {
            var pos = e.getDocumentPosition();
            self.editor.selection.moveToPosition(pos);
            self.selectionMarker.start.row = self.selectionMarker.end.row = pos.row;
            e.stop();
        });
        this.selectionMarkerId = this.editor.getSession().addMarker(this.selectionMarker, "ace_active-line", "fullLine");
        this.setSelectOnHover(false);
        this.editor.on("mousemove", function (e) {
            if (!self.lastMouseEvent) {
                self.lastMouseEvent = e;
                return;
            }
            if (self.lastMouseEvent.x === e.x && self.lastMouseEvent.y === e.y) {
                return;
            }
            self.lastMouseEvent = e;
            self.lastMouseEventScrollTop = self.editor.renderer.scrollTop;
            var row = self.lastMouseEvent.getDocumentPosition().row;
            if (self.hoverMarker.start.row != row) {
                if (!self.hoverMarkerId) {
                    self.setRow(row);
                }
                self.setHoverMarker(row);
            }
        });
        this.editor.renderer.on("beforeRender", function () {
            if (self.lastMouseEvent && self.hoverMarker.start.row != -1) {
                self.lastMouseEvent.$pos = null;
                var row = self.lastMouseEvent.getDocumentPosition().row;
                if (!self.hoverMarkerId) {
                    self.setRow(row);
                }
                self.setHoverMarker(row, true);
            }
        });
        this.editor.renderer.on("afterRender", function () {
            var row = self.getRow();
            var t = self.editor.renderer.$textLayer;
            var selected = t.element.childNodes[row - t.config.firstRow];
            if (selected == t['selectedNode'])
                return;
            if (t['selectedNode'])
                removeCssClass(t['selectedNode'], "ace_selected");
            t['selectedNode'] = selected;
            if (selected)
                addCssClass(selected, "ace_selected");
        });
        function hideHoverMarker() { self.setHoverMarker(-1); }
        addListener(this.editor.container, "mouseout", hideHoverMarker);
        this.editor.on("hide", hideHoverMarker);
        this.editor.on("changeSelection", hideHoverMarker);
        this.editor.getSession().doc.getLength = function () {
            return self.data.length;
        };
        this.editor.getSession().doc.getLine = function (i) {
            var data = self.data[i];
            if (typeof data == "string") {
                return data;
            }
            return (data && data.value) || "";
        };
        var bgTokenizer = this.editor.getSession().bgTokenizer;
        bgTokenizer.$tokenizeRow = function (dataIndex) {
            var data = self.data[dataIndex];
            var tokens = [];
            if (!data)
                return tokens;
            if (typeof data == "string")
                data = { value: data };
            if (!data.caption)
                data.caption = data.value || data.name;
            var last = -1;
            var flag, c;
            for (var cIndex = 0, length = data.caption.length; cIndex < length; cIndex++) {
                c = data.caption[cIndex];
                flag = data.matchMask & (1 << cIndex) ? 1 : 0;
                if (last !== flag) {
                    tokens.push({ type: data.className || "" + (flag ? "completion-highlight" : ""), value: c });
                    last = flag;
                }
                else {
                    tokens[tokens.length - 1].value += c;
                }
            }
            if (data.meta) {
                var maxW = self.editor.renderer.$size.scrollerWidth / self.editor.renderer.layerConfig.characterWidth;
                if (data.meta.length + data.caption.length < maxW - 2)
                    tokens.push({ type: "rightAlignedText", value: data.meta });
            }
            return tokens;
        };
        bgTokenizer.$updateOnChange = noop;
        bgTokenizer.start = noop;
        this.editor.getSession().$computeWidth = function () {
            return self.screenWidth = 0;
        };
        this.editor.on("changeSelection", function () {
            if (this.isOpen) {
                this.setRow(this.popup.selection.lead.row);
            }
        });
    }
    show(pos, lineHeight, topdownOnly) {
        var el = this.editor.container;
        var screenHeight = window.innerHeight;
        var screenWidth = window.innerWidth;
        var renderer = this.editor.renderer;
        var maxH = renderer.$maxLines * lineHeight * 1.4;
        var top = pos.top + this.$borderSize;
        if (top + maxH > screenHeight - lineHeight && !topdownOnly) {
            el.style.top = "";
            el.style.bottom = screenHeight - top + "px";
            this.isTopdown = false;
        }
        else {
            top += lineHeight;
            el.style.top = top + "px";
            el.style.bottom = "";
            this.isTopdown = true;
        }
        el.style.display = "";
        renderer.$textLayer.checkForSizeChanges();
        var left = pos.left;
        if (left + el.offsetWidth > screenWidth) {
            left = screenWidth - el.offsetWidth;
        }
        el.style.left = left + "px";
        this.editor._signal("show");
        this.lastMouseEvent = null;
        this.isOpen = true;
    }
    hide() {
        this.editor.container.style.display = "none";
        this.editor._signal("hide");
        this.isOpen = false;
    }
    setData(list) {
        this.data = list || [];
        this.editor.setValue(stringRepeat("\n", list.length), -1);
        this.setRow(0);
    }
    getData(row) {
        return this.data[row];
    }
    on(eventName, callback, capturing) {
        return this.editor.on(eventName, callback, capturing);
    }
    getTextLeftOffset() {
        return this.$borderSize + this.editor.renderer.$padding + this.$imageSize;
    }
    setSelectOnHover(val) {
        if (!val) {
            this.hoverMarkerId = this.editor.getSession().addMarker(this.hoverMarker, "ace_line-hover", "fullLine");
        }
        else if (this.hoverMarkerId) {
            this.editor.getSession().removeMarker(this.hoverMarkerId);
            this.hoverMarkerId = null;
        }
    }
    setHoverMarker(row, suppressRedraw) {
        if (row !== this.hoverMarker.start.row) {
            this.hoverMarker.start.row = this.hoverMarker.end.row = row;
            if (!suppressRedraw) {
                this.editor.getSession()._emit("changeBackMarker");
            }
            this.editor._emit("changeHoverMarker");
        }
    }
    getHoveredRow() {
        return this.hoverMarker.start.row;
    }
    getRow() {
        return this.selectionMarker.start.row;
    }
    setRow(row) {
        row = Math.max(-1, Math.min(this.data.length, row));
        if (this.selectionMarker.start.row != row) {
            this.editor.selection.clearSelection();
            this.selectionMarker.start.row = this.selectionMarker.end.row = row || 0;
            this.editor.getSession()._emit("changeBackMarker");
            this.editor.moveCursorTo(row || 0, 0);
            if (this.isOpen) {
                this.editor._signal("select");
            }
        }
    }
    setTheme(theme) {
        this.editor.setTheme(theme);
    }
    setFontSize(fontSize) {
        this.editor.setFontSize(fontSize);
    }
    get focus() {
        return this.editor.focus;
    }
    getLength() {
        return this.editor.getSession().getLength();
    }
    get container() {
        return this.editor.container;
    }
}
importCssString("\
.ace_editor.ace_autocomplete .ace_marker-layer .ace_active-line {\
    background-color: #CAD6FA;\
    z-index: 1;\
}\
.ace_editor.ace_autocomplete .ace_line-hover {\
    border: 1px solid #abbffe;\
    margin-top: -1px;\
    background: rgba(233,233,253,0.4);\
}\
.ace_editor.ace_autocomplete .ace_line-hover {\
    position: absolute;\
    z-index: 2;\
}\
.ace_editor.ace_autocomplete .ace_scroller {\
   background: none;\
   border: none;\
   box-shadow: none;\
}\
.ace_rightAlignedText {\
    color: gray;\
    display: inline-block;\
    position: absolute;\
    right: 4px;\
    text-align: right;\
    z-index: -1;\
}\
.ace_editor.ace_autocomplete .ace_completion-highlight{\
    color: #000;\
    text-shadow: 0 0 0.01em;\
}\
.ace_editor.ace_autocomplete {\
    width: 280px;\
    z-index: 200000;\
    background: #fbfbfb;\
    color: #444;\
    border: 1px lightgray solid;\
    position: fixed;\
    box-shadow: 2px 3px 5px rgba(0,0,0,.2);\
    line-height: 1.4;\
}");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXV0b2NvbXBsZXRlL3BvcHVwLnRzIl0sIm5hbWVzIjpbIkxpc3RWaWV3UG9wdXAiLCJMaXN0Vmlld1BvcHVwLmNvbnN0cnVjdG9yIiwiTGlzdFZpZXdQb3B1cC5jb25zdHJ1Y3Rvci5jcmVhdGVFZGl0b3IiLCJMaXN0Vmlld1BvcHVwLmNvbnN0cnVjdG9yLmhpZGVIb3Zlck1hcmtlciIsIkxpc3RWaWV3UG9wdXAuc2hvdyIsIkxpc3RWaWV3UG9wdXAuaGlkZSIsIkxpc3RWaWV3UG9wdXAuc2V0RGF0YSIsIkxpc3RWaWV3UG9wdXAuZ2V0RGF0YSIsIkxpc3RWaWV3UG9wdXAub24iLCJMaXN0Vmlld1BvcHVwLmdldFRleHRMZWZ0T2Zmc2V0IiwiTGlzdFZpZXdQb3B1cC5zZXRTZWxlY3RPbkhvdmVyIiwiTGlzdFZpZXdQb3B1cC5zZXRIb3Zlck1hcmtlciIsIkxpc3RWaWV3UG9wdXAuZ2V0SG92ZXJlZFJvdyIsIkxpc3RWaWV3UG9wdXAuZ2V0Um93IiwiTGlzdFZpZXdQb3B1cC5zZXRSb3ciLCJMaXN0Vmlld1BvcHVwLnNldFRoZW1lIiwiTGlzdFZpZXdQb3B1cC5zZXRGb250U2l6ZSIsIkxpc3RWaWV3UG9wdXAuZm9jdXMiLCJMaXN0Vmlld1BvcHVwLmdldExlbmd0aCIsIkxpc3RWaWV3UG9wdXAuY29udGFpbmVyIl0sIm1hcHBpbmdzIjoiT0E4Qk8sY0FBYyxNQUFNLG1CQUFtQjtPQUN2QyxXQUFXLE1BQU0sZ0JBQWdCO09BQ2pDLGVBQWUsTUFBTSxvQkFBb0I7T0FDekMsTUFBTSxNQUFNLFdBQVc7T0FDdkIsS0FBSyxNQUFNLFVBQVU7T0FDckIsRUFBQyxXQUFXLEVBQUMsTUFBTSxjQUFjO09BQ2pDLEVBQUMsWUFBWSxFQUFDLE1BQU0sYUFBYTtPQUVqQyxFQUFDLFdBQVcsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBQyxNQUFNLFlBQVk7QUFFdEYsSUFBSSxJ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QSxDQUFDQSxTQUFTQSxDQUFDQTtRQUMvQkEsSUFBSUEsWUFBWUEsR0FBR0EsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7UUFDdENBLElBQUlBLFdBQVdBLEdBQUdBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBO1FBQ3BDQSxJQUFJQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQTtRQUVwQ0EsSUFBSUEsSUFBSUEsR0FBR0EsUUFBUUEsQ0FBQ0EsU0FBU0EsR0FBR0EsVUFBVUEsR0FBR0EsR0FBR0EsQ0FBQ0E7UUFDakRBLElBQUlBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBO1FBQ3JDQSxFQUFFQSxDQUFDQSxDQUFDQSxHQUFHQSxHQUFHQSxJQUFJQSxHQUFHQSxZQUFZQSxHQUFHQSxVQUFVQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN6REEsRUFBRUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBQ0E7WUFDbEJBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLEdBQUdBLFlBQVlBLEdBQUdBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBO1lBQzVDQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUMzQkEsQ0FBQ0E7UUFDREEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDRkEsR0FBR0EsSUFBSUEsVUFBVUEsQ0FBQ0E7WUFDbEJBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBO1lBQzFCQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxHQUFHQSxFQUFFQSxDQUFDQTtZQUNyQkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDMUJBLENBQUNBO1FBRURBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLE9BQU9BLEdBQUdBLEVBQUVBLENBQUNBO1FBQ3RCQSxRQUFRQSxDQUFDQSxVQUFVQSxDQUFDQSxtQkFBbUJBLEVBQUVBLENBQUNBO1FBRTFDQSxJQUFJQSxJQUFJQSxHQUFHQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNwQkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsR0FBR0EsRUFBRUEsQ0FBQ0EsV0FBV0EsR0FBR0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdENBLElBQUlBLEdBQUdBLFdBQVdBLEdBQUdBLEVBQUVBLENBQUNBLFdBQVdBLENBQUNBO1FBQ3hDQSxDQUFDQTtRQUVEQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUU1QkEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDNUJBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLElBQUlBLENBQUNBO1FBQzNCQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUN2QkEsQ0FBQ0E7SUFDREosSUFBSUE7UUFDQUssSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsT0FBT0EsR0FBR0EsTUFBTUEsQ0FBQ0E7UUFDN0NBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBQzVCQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxLQUFLQSxDQUFDQTtJQUN4QkEsQ0FBQ0E7SUFDREwsT0FBT0EsQ0FBQ0EsSUFBSUE7UUFDUk0sSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0E7UUFDdkJBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQzFEQSxJQUFJ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QSxVQUFVQSxFQUFFQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQTtJQUNoREEsQ0FBQ0E7SUFFRGxCLElBQUlBLFNBQVNBO1FBQ1RtQixNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxTQUFTQSxDQUFDQTtJQUNqQ0EsQ0FBQ0E7QUFDTG5CLENBQUNBO0FBRUQsZUFBZSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBd0NkLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qICoqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKipcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgbGljZW5zZTpcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIsIEFqYXgub3JnIEIuVi5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqICAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICAgICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqICAgICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgQWpheC5vcmcgQi5WLiBub3IgdGhlXG4gKiAgICAgICBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuICogICAgICAgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EXG4gKiBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgQUpBWC5PUkcgQi5WLiBCRSBMSUFCTEUgRk9SIEFOWVxuICogRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbiAqIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUztcbiAqIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORFxuICogT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTXG4gKiBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqXG4gKiAqKioqKiBFTkQgTElDRU5TRSBCTE9DSyAqKioqKiAqL1xuXG5pbXBvcnQgRWRpdG9yRG9jdW1lbnQgZnJvbSBcIi4uL0VkaXRvckRvY3VtZW50XCI7XG5pbXBvcnQgRWRpdFNlc3Npb24gZnJvbSBcIi4uL0VkaXRTZXNzaW9uXCI7XG5pbXBvcnQgVmlydHVhbFJlbmRlcmVyIGZyb20gXCIuLi9WaXJ0dWFsUmVuZGVyZXJcIjtcbmltcG9ydCBFZGl0b3IgZnJvbSBcIi4uL0VkaXRvclwiO1xuaW1wb3J0IFJhbmdlIGZyb20gXCIuLi9SYW5nZVwiO1xuaW1wb3J0IHthZGRMaXN0ZW5lcn0gZnJvbSBcIi4uL2xpYi9ldmVudFwiO1xuaW1wb3J0IHtzdHJpbmdSZXBlYXR9IGZyb20gXCIuLi9saWIvbGFuZ1wiO1xuaW1wb3J0IEV2ZW50RW1pdHRlckNsYXNzIGZyb20gXCIuLi9saWIvZXZlbnRfZW1pdHRlclwiO1xuaW1wb3J0IHthZGRDc3NDbGFzcywgY3JlYXRlRWxlbWVudCwgaW1wb3J0Q3NzU3RyaW5nLCByZW1vdmVDc3NDbGFzc30gZnJvbSBcIi4uL2xpYi9kb21cIjtcblxudmFyIG5vb3AgPSBmdW5jdGlvbigpIHsgfTtcblxuZXhwb3J0IGludGVyZmFjZSBMaXN0VmlldyB7XG4gICAgaXNPcGVuOiBib29sZWFuO1xuICAgIGZvY3VzO1xuICAgIGNvbnRhaW5lcjtcbiAgICBvbihldmVudE5hbWU6IHN0cmluZywgY2FsbGJhY2ssIGNhcHR1cmluZz86IGJvb2xlYW4pO1xuICAgIGdldERhdGEocm93OiBudW1iZXIpO1xuICAgIHNldERhdGEoZGF0YTogc3RyaW5nW10pO1xuICAgIGdldFJvdygpO1xuICAgIHNldFJvdyhyb3c6IG51bWJlcik7XG4gICAgZ2V0VGV4dExlZnRPZmZzZXQoKTogbnVtYmVyO1xuICAgIHNob3cocG9zLCBsaW5lSGVpZ2h0LCB0b3Bkb3duT25seT8pOiB2b2lkO1xuICAgIGhpZGUoKTtcbiAgICBzZXRUaGVtZSh0aGVtZTogc3RyaW5nKTogdm9pZDtcbiAgICBzZXRGb250U2l6ZShmb250U2l6ZSk6IHZvaWQ7XG4gICAgZ2V0TGVuZ3RoKCk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIExpc3RWaWV3UG9wdXAgaW1wbGVtZW50cyBMaXN0VmlldyB7XG4gICAgcHJpdmF0ZSBlZGl0b3I6IEVkaXRvcjtcbiAgICBwcml2YXRlICRib3JkZXJTaXplID0gMTtcbiAgICBwcml2YXRlICRpbWFnZVNpemUgPSAwO1xuICAgIHByaXZhdGUgaG92ZXJNYXJrZXIgPSBuZXcgUmFuZ2UoLTEsIDAsIC0xLCBJbmZpbml0eSk7XG4gICAgcHJpdmF0ZSBob3Zlck1hcmtlcklkOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBzZWxlY3Rpb25NYXJrZXIgPSBuZXcgUmFuZ2UoLTEsIDAsIC0xLCBJbmZpbml0eSk7XG4gICAgcHJpdmF0ZSBzZWxlY3Rpb25NYXJrZXJJZDogbnVtYmVyO1xuICAgIHB1YmxpYyBpc09wZW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIGlzVG9wZG93biA9IGZhbHNlO1xuICAgIHByaXZhdGUgbGFzdE1vdXNlRXZlbnQ6IGFueTtcbiAgICBwcml2YXRlIGxhc3RNb3VzZUV2ZW50U2Nyb2xsVG9wO1xuICAgIHByaXZhdGUgZGF0YTogYW55W10gPSBbXTtcbiAgICBwcml2YXRlIHNjcmVlbldpZHRoO1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudE5vZGU6IE5vZGUpIHtcbiAgICAgICAgLy8gQ2FjaGUgdGhlICd0aGlzJyBwb2ludGVyIGZvciBldmVudCBoYW5kbGVycy5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUVkaXRvcihlbDogSFRNTERpdkVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXJlciA9IG5ldyBWaXJ0dWFsUmVuZGVyZXIoZWwpO1xuXG4gICAgICAgICAgICByZW5kZXJlci5jb250ZW50LnN0eWxlLmN1cnNvciA9IFwiZGVmYXVsdFwiO1xuICAgICAgICAgICAgcmVuZGVyZXIuc2V0U3R5bGUoXCJhY2VfYXV0b2NvbXBsZXRlXCIpO1xuICAgICAgICAgICAgcmVuZGVyZXIuJGN1cnNvckxheWVyLnJlc3RhcnRUaW1lciA9IG5vb3A7XG4gICAgICAgICAgICByZW5kZXJlci4kY3Vyc29yTGF5ZXIuZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XG4gICAgICAgICAgICByZW5kZXJlci4kbWF4TGluZXMgPSA4O1xuICAgICAgICAgICAgcmVuZGVyZXIuJGtlZXBUZXh0QXJlYUF0Q3Vyc29yID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHZhciBtb2RlbCA9IG5ldyBFZGl0b3JEb2N1bWVudChcIlwiKTtcbiAgICAgICAgICAgIHZhciBlZGl0U2Vzc2lvbiA9IG5ldyBFZGl0U2Vzc2lvbihtb2RlbCk7XG4gICAgICAgICAgICB2YXIgZWRpdG9yID0gbmV3IEVkaXRvcihyZW5kZXJlciwgZWRpdFNlc3Npb24pO1xuXG4gICAgICAgICAgICBlZGl0b3Iuc2V0SGlnaGxpZ2h0QWN0aXZlTGluZShmYWxzZSk7XG4gICAgICAgICAgICBlZGl0b3Iuc2V0U2hvd1ByaW50TWFyZ2luKGZhbHNlKTtcbiAgICAgICAgICAgIGVkaXRvci5yZW5kZXJlci5zZXRTaG93R3V0dGVyKGZhbHNlKTtcbiAgICAgICAgICAgIGVkaXRvci5yZW5kZXJlci5zZXRIaWdobGlnaHRHdXR0ZXJMaW5lKGZhbHNlKTtcblxuICAgICAgICAgICAgZWRpdG9yLnNldE9wdGlvbihcImRpc3BsYXlJbmRlbnRHdWlkZXNcIiwgZmFsc2UpO1xuICAgICAgICAgICAgZWRpdG9yLnNldE9wdGlvbihcImRyYWdEZWxheVwiLCAxNTApO1xuXG4gICAgICAgICAgICBlZGl0b3IuZm9jdXMgPSBub29wO1xuICAgICAgICAgICAgZWRpdG9yLiRpc0ZvY3VzZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICBlZGl0b3Iuc2V0SGlnaGxpZ2h0QWN0aXZlTGluZShmYWxzZSk7XG4gICAgICAgICAgICAvLyBGSVhNRTogVGhpcyBtdXN0IGJlIGEgUmVnRXhwLlxuICAgICAgICAgICAgLy8gZWRpdG9yLnNlc3Npb24uaGlnaGxpZ2h0KFwiXCIpO1xuICAgICAgICAgICAgZWRpdG9yLmdldFNlc3Npb24oKS4kc2VhcmNoSGlnaGxpZ2h0LmNsYXp6ID0gXCJhY2VfaGlnaGxpZ2h0LW1hcmtlclwiO1xuXG4gICAgICAgICAgICByZXR1cm4gZWRpdG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVsOiBIVE1MRGl2RWxlbWVudCA9IDxIVE1MRGl2RWxlbWVudD5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLmVkaXRvciA9IGNyZWF0ZUVkaXRvcihlbCk7XG5cbiAgICAgICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgICAgICB0aGlzLmVkaXRvci5vbihcIm1vdXNlZG93blwiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgcG9zID0gZS5nZXREb2N1bWVudFBvc2l0aW9uKCk7XG4gICAgICAgICAgICBzZWxmLmVkaXRvci5zZWxlY3Rpb24ubW92ZVRvUG9zaXRpb24ocG9zKTtcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0aW9uTWFya2VyLnN0YXJ0LnJvdyA9IHNlbGYuc2VsZWN0aW9uTWFya2VyLmVuZC5yb3cgPSBwb3Mucm93O1xuICAgICAgICAgICAgZS5zdG9wKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc2VsZWN0aW9uTWFya2VySWQgPSB0aGlzLmVkaXRvci5nZXRTZXNzaW9uKCkuYWRkTWFya2VyKHRoaXMuc2VsZWN0aW9uTWFya2VyLCBcImFjZV9hY3RpdmUtbGluZVwiLCBcImZ1bGxMaW5lXCIpO1xuXG4gICAgICAgIHRoaXMuc2V0U2VsZWN0T25Ib3ZlcihmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5lZGl0b3Iub24oXCJtb3VzZW1vdmVcIiwgZnVuY3Rpb24oZTogTW91c2VFdmVudCkge1xuICAgICAgICAgICAgaWYgKCFzZWxmLmxhc3RNb3VzZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc2VsZi5sYXN0TW91c2VFdmVudCA9IGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGYubGFzdE1vdXNlRXZlbnQueCA9PT0gZS54ICYmIHNlbGYubGFzdE1vdXNlRXZlbnQueSA9PT0gZS55KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5sYXN0TW91c2VFdmVudCA9IGU7XG4gICAgICAgICAgICBzZWxmLmxhc3RNb3VzZUV2ZW50U2Nyb2xsVG9wID0gc2VsZi5lZGl0b3IucmVuZGVyZXIuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgdmFyIHJvdyA9IHNlbGYubGFzdE1vdXNlRXZlbnQuZ2V0RG9jdW1lbnRQb3NpdGlvbigpLnJvdztcbiAgICAgICAgICAgIGlmIChzZWxmLmhvdmVyTWFya2VyLnN0YXJ0LnJvdyAhPSByb3cpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYuaG92ZXJNYXJrZXJJZCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldFJvdyhyb3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmLnNldEhvdmVyTWFya2VyKHJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVkaXRvci5yZW5kZXJlci5vbihcImJlZm9yZVJlbmRlclwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmxhc3RNb3VzZUV2ZW50ICYmIHNlbGYuaG92ZXJNYXJrZXIuc3RhcnQucm93ICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5sYXN0TW91c2VFdmVudC4kcG9zID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgcm93ID0gc2VsZi5sYXN0TW91c2VFdmVudC5nZXREb2N1bWVudFBvc2l0aW9uKCkucm93O1xuICAgICAgICAgICAgICAgIGlmICghc2VsZi5ob3Zlck1hcmtlcklkKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0Um93KHJvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYuc2V0SG92ZXJNYXJrZXIocm93LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWRpdG9yLnJlbmRlcmVyLm9uKFwiYWZ0ZXJSZW5kZXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgcm93ID0gc2VsZi5nZXRSb3coKTtcbiAgICAgICAgICAgIHZhciB0ID0gc2VsZi5lZGl0b3IucmVuZGVyZXIuJHRleHRMYXllcjtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IDxIVE1MRWxlbWVudD50LmVsZW1lbnQuY2hpbGROb2Rlc1tyb3cgLSB0LmNvbmZpZy5maXJzdFJvd107XG4gICAgICAgICAgICAvLyBGSVhNRTogREdIIERvbid0IGtub3cgd2h5IHNlbGVjdGVkTm9kZSBpcyBub3QgZm91bmQuXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWQgPT0gdFsnc2VsZWN0ZWROb2RlJ10pXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHRbJ3NlbGVjdGVkTm9kZSddKVxuICAgICAgICAgICAgICAgIHJlbW92ZUNzc0NsYXNzKHRbJ3NlbGVjdGVkTm9kZSddLCBcImFjZV9zZWxlY3RlZFwiKTtcbiAgICAgICAgICAgIHRbJ3NlbGVjdGVkTm9kZSddID0gc2VsZWN0ZWQ7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWQpXG4gICAgICAgICAgICAgICAgYWRkQ3NzQ2xhc3Moc2VsZWN0ZWQsIFwiYWNlX3NlbGVjdGVkXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBoaWRlSG92ZXJNYXJrZXIoKSB7IHNlbGYuc2V0SG92ZXJNYXJrZXIoLTEpIH1cblxuICAgICAgICBhZGRMaXN0ZW5lcih0aGlzLmVkaXRvci5jb250YWluZXIsIFwibW91c2VvdXRcIiwgaGlkZUhvdmVyTWFya2VyKTtcbiAgICAgICAgdGhpcy5lZGl0b3Iub24oXCJoaWRlXCIsIGhpZGVIb3Zlck1hcmtlcik7XG4gICAgICAgIHRoaXMuZWRpdG9yLm9uKFwiY2hhbmdlU2VsZWN0aW9uXCIsIGhpZGVIb3Zlck1hcmtlcik7XG5cbiAgICAgICAgdGhpcy5lZGl0b3IuZ2V0U2Vzc2lvbigpLmRvYy5nZXRMZW5ndGggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmRhdGEubGVuZ3RoO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmVkaXRvci5nZXRTZXNzaW9uKCkuZG9jLmdldExpbmUgPSBmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHNlbGYuZGF0YVtpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKGRhdGEgJiYgZGF0YS52YWx1ZSkgfHwgXCJcIjtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgYmdUb2tlbml6ZXIgPSB0aGlzLmVkaXRvci5nZXRTZXNzaW9uKCkuYmdUb2tlbml6ZXI7XG4gICAgICAgIGJnVG9rZW5pemVyLiR0b2tlbml6ZVJvdyA9IGZ1bmN0aW9uKGRhdGFJbmRleCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBzZWxmLmRhdGFbZGF0YUluZGV4XTtcbiAgICAgICAgICAgIHZhciB0b2tlbnMgPSBbXTtcbiAgICAgICAgICAgIGlmICghZGF0YSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgZGF0YSA9IHsgdmFsdWU6IGRhdGEgfTtcbiAgICAgICAgICAgIGlmICghZGF0YS5jYXB0aW9uKVxuICAgICAgICAgICAgICAgIGRhdGEuY2FwdGlvbiA9IGRhdGEudmFsdWUgfHwgZGF0YS5uYW1lO1xuXG4gICAgICAgICAgICB2YXIgbGFzdCA9IC0xO1xuICAgICAgICAgICAgdmFyIGZsYWcsIGM7XG4gICAgICAgICAgICBmb3IgKHZhciBjSW5kZXggPSAwLCBsZW5ndGggPSBkYXRhLmNhcHRpb24ubGVuZ3RoOyBjSW5kZXggPCBsZW5ndGg7IGNJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgYyA9IGRhdGEuY2FwdGlvbltjSW5kZXhdO1xuICAgICAgICAgICAgICAgIGZsYWcgPSBkYXRhLm1hdGNoTWFzayAmICgxIDw8IGNJbmRleCkgPyAxIDogMDtcbiAgICAgICAgICAgICAgICBpZiAobGFzdCAhPT0gZmxhZykge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IHR5cGU6IGRhdGEuY2xhc3NOYW1lIHx8IFwiXCIgKyAoZmxhZyA/IFwiY29tcGxldGlvbi1oaWdobGlnaHRcIiA6IFwiXCIpLCB2YWx1ZTogYyB9KTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGZsYWc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXS52YWx1ZSArPSBjO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEubWV0YSkge1xuICAgICAgICAgICAgICAgIHZhciBtYXhXID0gc2VsZi5lZGl0b3IucmVuZGVyZXIuJHNpemUuc2Nyb2xsZXJXaWR0aCAvIHNlbGYuZWRpdG9yLnJlbmRlcmVyLmxheWVyQ29uZmlnLmNoYXJhY3RlcldpZHRoO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhLm1ldGEubGVuZ3RoICsgZGF0YS5jYXB0aW9uLmxlbmd0aCA8IG1heFcgLSAyKVxuICAgICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IHR5cGU6IFwicmlnaHRBbGlnbmVkVGV4dFwiLCB2YWx1ZTogZGF0YS5tZXRhIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRva2VucztcbiAgICAgICAgfTtcbiAgICAgICAgYmdUb2tlbml6ZXIuJHVwZGF0ZU9uQ2hhbmdlID0gbm9vcDtcbiAgICAgICAgYmdUb2tlbml6ZXIuc3RhcnQgPSBub29wO1xuXG4gICAgICAgIHRoaXMuZWRpdG9yLmdldFNlc3Npb24oKS4kY29tcHV0ZVdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5zY3JlZW5XaWR0aCA9IDA7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5lZGl0b3Iub24oXCJjaGFuZ2VTZWxlY3Rpb25cIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJvdyh0aGlzLnBvcHVwLnNlbGVjdGlvbi5sZWFkLnJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t0b3A7bGVmdH19IHBvc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsaW5lSGVpZ2h0XG4gICAgICogQHBhcmFtIHtib29sZWFufSB0b3Bkb3duT25seVxuICAgICAqL1xuICAgIHNob3cocG9zOiB7IHRvcDogbnVtYmVyOyBsZWZ0OiBudW1iZXIgfSwgbGluZUhlaWdodDogbnVtYmVyLCB0b3Bkb3duT25seT86IGJvb2xlYW4pIHtcbiAgICAgICAgdmFyIGVsID0gdGhpcy5lZGl0b3IuY29udGFpbmVyO1xuICAgICAgICB2YXIgc2NyZWVuSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICB2YXIgc2NyZWVuV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgdmFyIHJlbmRlcmVyID0gdGhpcy5lZGl0b3IucmVuZGVyZXI7XG4gICAgICAgIC8vIHZhciBtYXhMaW5lcyA9IE1hdGgubWluKHJlbmRlcmVyLiRtYXhMaW5lcywgdGhpcy5zZXNzaW9uLmdldExlbmd0aCgpKTtcbiAgICAgICAgdmFyIG1heEggPSByZW5kZXJlci4kbWF4TGluZXMgKiBsaW5lSGVpZ2h0ICogMS40O1xuICAgICAgICB2YXIgdG9wID0gcG9zLnRvcCArIHRoaXMuJGJvcmRlclNpemU7XG4gICAgICAgIGlmICh0b3AgKyBtYXhIID4gc2NyZWVuSGVpZ2h0IC0gbGluZUhlaWdodCAmJiAhdG9wZG93bk9ubHkpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLnRvcCA9IFwiXCI7XG4gICAgICAgICAgICBlbC5zdHlsZS5ib3R0b20gPSBzY3JlZW5IZWlnaHQgLSB0b3AgKyBcInB4XCI7XG4gICAgICAgICAgICB0aGlzLmlzVG9wZG93biA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdG9wICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICBlbC5zdHlsZS50b3AgPSB0b3AgKyBcInB4XCI7XG4gICAgICAgICAgICBlbC5zdHlsZS5ib3R0b20gPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy5pc1RvcGRvd24gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG4gICAgICAgIHJlbmRlcmVyLiR0ZXh0TGF5ZXIuY2hlY2tGb3JTaXplQ2hhbmdlcygpO1xuXG4gICAgICAgIHZhciBsZWZ0ID0gcG9zLmxlZnQ7XG4gICAgICAgIGlmIChsZWZ0ICsgZWwub2Zmc2V0V2lkdGggPiBzY3JlZW5XaWR0aCkge1xuICAgICAgICAgICAgbGVmdCA9IHNjcmVlbldpZHRoIC0gZWwub2Zmc2V0V2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBlbC5zdHlsZS5sZWZ0ID0gbGVmdCArIFwicHhcIjtcblxuICAgICAgICB0aGlzLmVkaXRvci5fc2lnbmFsKFwic2hvd1wiKTtcbiAgICAgICAgdGhpcy5sYXN0TW91c2VFdmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNPcGVuID0gdHJ1ZTtcbiAgICB9XG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5lZGl0b3IuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgdGhpcy5lZGl0b3IuX3NpZ25hbChcImhpZGVcIik7XG4gICAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gICAgfVxuICAgIHNldERhdGEobGlzdCkge1xuICAgICAgICB0aGlzLmRhdGEgPSBsaXN0IHx8IFtdO1xuICAgICAgICB0aGlzLmVkaXRvci5zZXRWYWx1ZShzdHJpbmdSZXBlYXQoXCJcXG5cIiwgbGlzdC5sZW5ndGgpLCAtMSk7XG4gICAgICAgIHRoaXMuc2V0Um93KDApO1xuICAgIH1cbiAgICBnZXREYXRhKHJvdzogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFbcm93XTtcbiAgICB9XG4gICAgb24oZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiAoZXZlbnQsIGVlOiBFdmVudEVtaXR0ZXJDbGFzcykgPT4gYW55LCBjYXB0dXJpbmc/OiBib29sZWFuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5vbihldmVudE5hbWUsIGNhbGxiYWNrLCBjYXB0dXJpbmcpO1xuICAgIH1cbiAgICBnZXRUZXh0TGVmdE9mZnNldCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy4kYm9yZGVyU2l6ZSArIHRoaXMuZWRpdG9yLnJlbmRlcmVyLiRwYWRkaW5nICsgdGhpcy4kaW1hZ2VTaXplO1xuICAgIH1cbiAgICBzZXRTZWxlY3RPbkhvdmVyKHZhbCkge1xuICAgICAgICBpZiAoIXZhbCkge1xuICAgICAgICAgICAgdGhpcy5ob3Zlck1hcmtlcklkID0gdGhpcy5lZGl0b3IuZ2V0U2Vzc2lvbigpLmFkZE1hcmtlcih0aGlzLmhvdmVyTWFya2VyLCBcImFjZV9saW5lLWhvdmVyXCIsIFwiZnVsbExpbmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5ob3Zlck1hcmtlcklkKSB7XG4gICAgICAgICAgICB0aGlzLmVkaXRvci5nZXRTZXNzaW9uKCkucmVtb3ZlTWFya2VyKHRoaXMuaG92ZXJNYXJrZXJJZCk7XG4gICAgICAgICAgICB0aGlzLmhvdmVyTWFya2VySWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldEhvdmVyTWFya2VyKHJvdzogbnVtYmVyLCBzdXBwcmVzc1JlZHJhdz86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHJvdyAhPT0gdGhpcy5ob3Zlck1hcmtlci5zdGFydC5yb3cpIHtcbiAgICAgICAgICAgIHRoaXMuaG92ZXJNYXJrZXIuc3RhcnQucm93ID0gdGhpcy5ob3Zlck1hcmtlci5lbmQucm93ID0gcm93O1xuICAgICAgICAgICAgaWYgKCFzdXBwcmVzc1JlZHJhdykge1xuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmdldFNlc3Npb24oKS5fZW1pdChcImNoYW5nZUJhY2tNYXJrZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVkaXRvci5fZW1pdChcImNoYW5nZUhvdmVyTWFya2VyXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEhvdmVyZWRSb3coKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdmVyTWFya2VyLnN0YXJ0LnJvdztcbiAgICB9XG4gICAgZ2V0Um93KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbk1hcmtlci5zdGFydC5yb3c7XG4gICAgfVxuICAgIHNldFJvdyhyb3c6IG51bWJlcikge1xuICAgICAgICByb3cgPSBNYXRoLm1heCgtMSwgTWF0aC5taW4odGhpcy5kYXRhLmxlbmd0aCwgcm93KSk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbk1hcmtlci5zdGFydC5yb3cgIT0gcm93KSB7XG4gICAgICAgICAgICB0aGlzLmVkaXRvci5zZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uTWFya2VyLnN0YXJ0LnJvdyA9IHRoaXMuc2VsZWN0aW9uTWFya2VyLmVuZC5yb3cgPSByb3cgfHwgMDtcbiAgICAgICAgICAgIHRoaXMuZWRpdG9yLmdldFNlc3Npb24oKS5fZW1pdChcImNoYW5nZUJhY2tNYXJrZXJcIik7XG4gICAgICAgICAgICB0aGlzLmVkaXRvci5tb3ZlQ3Vyc29yVG8ocm93IHx8IDAsIDApO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IuX3NpZ25hbChcInNlbGVjdFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRUaGVtZSh0aGVtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWRpdG9yLnNldFRoZW1lKHRoZW1lKTtcbiAgICB9XG4gICAgc2V0Rm9udFNpemUoZm9udFNpemU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmVkaXRvci5zZXRGb250U2l6ZShmb250U2l6ZSk7XG4gICAgfVxuXG4gICAgZ2V0IGZvY3VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lZGl0b3IuZm9jdXM7XG4gICAgfVxuXG4gICAgZ2V0TGVuZ3RoKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5nZXRTZXNzaW9uKCkuZ2V0TGVuZ3RoKCk7XG4gICAgfVxuXG4gICAgZ2V0IGNvbnRhaW5lcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLmNvbnRhaW5lcjtcbiAgICB9XG59XG5cbmltcG9ydENzc1N0cmluZyhcIlxcXG4uYWNlX2VkaXRvci5hY2VfYXV0b2NvbXBsZXRlIC5hY2VfbWFya2VyLWxheWVyIC5hY2VfYWN0aXZlLWxpbmUge1xcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0NBRDZGQTtcXFxuICAgIHotaW5kZXg6IDE7XFxcbn1cXFxuLmFjZV9lZGl0b3IuYWNlX2F1dG9jb21wbGV0ZSAuYWNlX2xpbmUtaG92ZXIge1xcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2FiYmZmZTtcXFxuICAgIG1hcmdpbi10b3A6IC0xcHg7XFxcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDIzMywyMzMsMjUzLDAuNCk7XFxcbn1cXFxuLmFjZV9lZGl0b3IuYWNlX2F1dG9jb21wbGV0ZSAuYWNlX2xpbmUtaG92ZXIge1xcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcXG4gICAgei1pbmRleDogMjtcXFxufVxcXG4uYWNlX2VkaXRvci5hY2VfYXV0b2NvbXBsZXRlIC5hY2Vfc2Nyb2xsZXIge1xcXG4gICBiYWNrZ3JvdW5kOiBub25lO1xcXG4gICBib3JkZXI6IG5vbmU7XFxcbiAgIGJveC1zaGFkb3c6IG5vbmU7XFxcbn1cXFxuLmFjZV9yaWdodEFsaWduZWRUZXh0IHtcXFxuICAgIGNvbG9yOiBncmF5O1xcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcXG4gICAgcmlnaHQ6IDRweDtcXFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcXG4gICAgei1pbmRleDogLTE7XFxcbn1cXFxuLmFjZV9lZGl0b3IuYWNlX2F1dG9jb21wbGV0ZSAuYWNlX2NvbXBsZXRpb24taGlnaGxpZ2h0e1xcXG4gICAgY29sb3I6ICMwMDA7XFxcbiAgICB0ZXh0LXNoYWRvdzogMCAwIDAuMDFlbTtcXFxufVxcXG4uYWNlX2VkaXRvci5hY2VfYXV0b2NvbXBsZXRlIHtcXFxuICAgIHdpZHRoOiAyODBweDtcXFxuICAgIHotaW5kZXg6IDIwMDAwMDtcXFxuICAgIGJhY2tncm91bmQ6ICNmYmZiZmI7XFxcbiAgICBjb2xvcjogIzQ0NDtcXFxuICAgIGJvcmRlcjogMXB4IGxpZ2h0Z3JheSBzb2xpZDtcXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXFxuICAgIGJveC1zaGFkb3c6IDJweCAzcHggNXB4IHJnYmEoMCwwLDAsLjIpO1xcXG4gICAgbGluZS1oZWlnaHQ6IDEuNDtcXFxufVwiKTtcbiJdfQ==