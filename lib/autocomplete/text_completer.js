import Range from "../Range";
function wordDistance(pos, session) {
    var splitRegex = /[^a-zA-Z_0-9\$\-\u00C0-\u1FFF\u2C00-\uD7FF\w]+/;
    function getWordIndex() {
        var textBefore = session.getTextRange(Range.fromPoints({ row: 0, column: 0 }, pos));
        return textBefore.split(splitRegex).length - 1;
    }
    var prefixPos = getWordIndex();
    var words = session.getValue().split(splitRegex);
    var wordScores = Object.create(null);
    var currentWord = words[prefixPos];
    words.forEach(function (word, idx) {
        if (!word || word === currentWord)
            return;
        var distance = Math.abs(prefixPos - idx);
        var score = words.length - distance;
        if (wordScores[word]) {
            wordScores[word] = Math.max(score, wordScores[word]);
        }
        else {
            wordScores[word] = score;
        }
    });
    return wordScores;
}
export function getCompletions(editor, session, pos, prefix, callback) {
    var wordScore = wordDistance(pos, session);
    var wordList = Object.keys(wordScore);
    callback(null, wordList.map(function (word) {
        return {
            caption: word,
            value: word,
            score: wordScore[word],
            meta: "local"
        };
    }));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dF9jb21wbGV0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXV0b2NvbXBsZXRlL3RleHRfY29tcGxldGVyLnRzIl0sIm5hbWVzIjpbIndvcmREaXN0YW5jZSIsIndvcmREaXN0YW5jZS5nZXRXb3JkSW5kZXgiLCJnZXRDb21wbGV0aW9ucyJdLCJtYXBwaW5ncyI6Ik9BNkJPLEtBQUssTUFBTSxVQUFVO0FBUTVCLHNCQUFzQixHQUFvQyxFQUFFLE9BQW9CO0lBQzVFQSxJQUFJQSxVQUFVQSxHQUFXQSxnREFBZ0RBLENBQUNBO0lBRTFFQTtRQUNJQyxJQUFJQSxVQUFVQSxHQUFHQSxPQUFPQSxDQUFDQSxZQUFZQSxDQUFDQSxLQUFLQSxDQUFDQSxVQUFVQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQSxFQUFFQSxNQUFNQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNwRkEsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFDbkRBLENBQUNBO0lBRURELElBQUlBLFNBQVNBLEdBQUdBLFlBQVlBLEVBQUVBLENBQUNBO0lBQy9CQSxJQUFJQSxLQUFLQSxHQUFHQSxPQUFPQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtJQUNqREEsSUFBSUEsVUFBVUEsR0FBR0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFFckNBLElBQUlBLFdBQVdBLEdBQUdBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO0lBRW5DQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFTQSxJQUFJQSxFQUFFQSxHQUFHQTtRQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLEtBQUssV0FBVyxDQUFDO1lBQUMsTUFBTSxDQUFDO1FBRTFDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO1FBQ3BDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDN0IsQ0FBQztJQUNMLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFDSEEsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7QUFDdEJBLENBQUNBO0FBS0QsK0JBQStCLE1BQWMsRUFBRSxPQUFvQixFQUFFLEdBQW9DLEVBQUUsTUFBYyxFQUFFLFFBQXVHO0lBRTlORSxJQUFJQSxTQUFTQSxHQUFHQSxZQUFZQSxDQUFDQSxHQUFHQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQTtJQUUzQ0EsSUFBSUEsUUFBUUEsR0FBR0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7SUFFdENBLFFBQVFBLENBQUNBLElBQUlBLEVBQUVBLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLFVBQVNBLElBQUlBO1FBQ3JDLE1BQU0sQ0FBQztZQUNILE9BQU8sRUFBRSxJQUFJO1lBQ2IsS0FBSyxFQUFFLElBQUk7WUFDWCxLQUFLLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQztZQUN0QixJQUFJLEVBQUUsT0FBTztTQUNoQixDQUFDO0lBQ04sQ0FBQyxDQUFDQSxDQUFDQSxDQUFDQTtBQUNSQSxDQUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qICoqKioqIEJFR0lOIExJQ0VOU0UgQkxPQ0sgKioqKipcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgbGljZW5zZTpcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIsIEFqYXgub3JnIEIuVi5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAqICAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAgICAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEFqYXgub3JnIEIuVi4gbm9yIHRoZVxuICogICAgICAgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcbiAqICAgICAgIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICogXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbiAqIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gKiBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG4gKiBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBBSkFYLk9SRyBCLlYuIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuICogTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAqIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICpcbiAqICoqKioqIEVORCBMSUNFTlNFIEJMT0NLICoqKioqICovXG5pbXBvcnQgUmFuZ2UgZnJvbSBcIi4uL1JhbmdlXCI7XG5pbXBvcnQgRWRpdFNlc3Npb24gZnJvbSAnLi4vRWRpdFNlc3Npb24nO1xuaW1wb3J0IEVkaXRvciBmcm9tICcuLi9FZGl0b3InO1xuXG4vKipcbiAqIERvZXMgYSBkaXN0YW5jZSBhbmFseXNpcyBvZiB0aGUgd29yZCBgcHJlZml4YCBhdCBwb3NpdGlvbiBgcG9zYCBpbiBgZG9jYC5cbiAqIEByZXR1cm4gTWFwIG9mIHN0cmluZyB0byBudW1iZXIuXG4gKi9cbmZ1bmN0aW9uIHdvcmREaXN0YW5jZShwb3M6IHsgcm93OiBudW1iZXI7IGNvbHVtbjogbnVtYmVyIH0sIHNlc3Npb246IEVkaXRTZXNzaW9uKSB7XG4gICAgdmFyIHNwbGl0UmVnZXg6IFJlZ0V4cCA9IC9bXmEtekEtWl8wLTlcXCRcXC1cXHUwMEMwLVxcdTFGRkZcXHUyQzAwLVxcdUQ3RkZcXHddKy87XG5cbiAgICBmdW5jdGlvbiBnZXRXb3JkSW5kZXgoKTogbnVtYmVyIHtcbiAgICAgICAgdmFyIHRleHRCZWZvcmUgPSBzZXNzaW9uLmdldFRleHRSYW5nZShSYW5nZS5mcm9tUG9pbnRzKHsgcm93OiAwLCBjb2x1bW46IDAgfSwgcG9zKSk7XG4gICAgICAgIHJldHVybiB0ZXh0QmVmb3JlLnNwbGl0KHNwbGl0UmVnZXgpLmxlbmd0aCAtIDE7XG4gICAgfVxuXG4gICAgdmFyIHByZWZpeFBvcyA9IGdldFdvcmRJbmRleCgpO1xuICAgIHZhciB3b3JkcyA9IHNlc3Npb24uZ2V0VmFsdWUoKS5zcGxpdChzcGxpdFJlZ2V4KTtcbiAgICB2YXIgd29yZFNjb3JlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICB2YXIgY3VycmVudFdvcmQgPSB3b3Jkc1twcmVmaXhQb3NdO1xuXG4gICAgd29yZHMuZm9yRWFjaChmdW5jdGlvbih3b3JkLCBpZHgpIHtcbiAgICAgICAgaWYgKCF3b3JkIHx8IHdvcmQgPT09IGN1cnJlbnRXb3JkKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5hYnMocHJlZml4UG9zIC0gaWR4KTtcbiAgICAgICAgdmFyIHNjb3JlID0gd29yZHMubGVuZ3RoIC0gZGlzdGFuY2U7XG4gICAgICAgIGlmICh3b3JkU2NvcmVzW3dvcmRdKSB7XG4gICAgICAgICAgICB3b3JkU2NvcmVzW3dvcmRdID0gTWF0aC5tYXgoc2NvcmUsIHdvcmRTY29yZXNbd29yZF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd29yZFNjb3Jlc1t3b3JkXSA9IHNjb3JlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHdvcmRTY29yZXM7XG59XG5cbi8qKlxuICogVGhpcyB0ZXh0dWFsIGNvbXBsZXRlciBpcyByYXRoZXIgZHVtYi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXBsZXRpb25zKGVkaXRvcjogRWRpdG9yLCBzZXNzaW9uOiBFZGl0U2Vzc2lvbiwgcG9zOiB7IHJvdzogbnVtYmVyOyBjb2x1bW46IG51bWJlciB9LCBwcmVmaXg6IHN0cmluZywgY2FsbGJhY2s6IChlcnIsIGNvbXBsZXRpb25zOiB7IGNhcHRpb246IHN0cmluZzsgdmFsdWU6IHN0cmluZzsgc2NvcmU6IG51bWJlcjsgbWV0YTogc3RyaW5nIH1bXSkgPT4gdm9pZCkge1xuXG4gICAgdmFyIHdvcmRTY29yZSA9IHdvcmREaXN0YW5jZShwb3MsIHNlc3Npb24pO1xuXG4gICAgdmFyIHdvcmRMaXN0ID0gT2JqZWN0LmtleXMod29yZFNjb3JlKTtcblxuICAgIGNhbGxiYWNrKG51bGwsIHdvcmRMaXN0Lm1hcChmdW5jdGlvbih3b3JkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjYXB0aW9uOiB3b3JkLFxuICAgICAgICAgICAgdmFsdWU6IHdvcmQsXG4gICAgICAgICAgICBzY29yZTogd29yZFNjb3JlW3dvcmRdLFxuICAgICAgICAgICAgbWV0YTogXCJsb2NhbFwiXG4gICAgICAgIH07XG4gICAgfSkpO1xufVxuXG4iXX0=