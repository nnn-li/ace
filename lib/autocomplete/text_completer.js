var rm = require("../range");
function wordDistance(pos, session) {
    var splitRegex = /[^a-zA-Z_0-9\$\-\u00C0-\u1FFF\u2C00-\uD7FF\w]+/;
    function getWordIndex() {
        var textBefore = session.getTextRange(rm.Range.fromPoints({ row: 0, column: 0 }, pos));
        return textBefore.split(splitRegex).length - 1;
    }
    var prefixPos = getWordIndex();
    var words = session.getValue().split(splitRegex);
    var wordScores = Object.create(null);
    var currentWord = words[prefixPos];
    words.forEach(function (word, idx) {
        if (!word || word === currentWord)
            return;
        var distance = Math.abs(prefixPos - idx);
        var score = words.length - distance;
        if (wordScores[word]) {
            wordScores[word] = Math.max(score, wordScores[word]);
        }
        else {
            wordScores[word] = score;
        }
    });
    return wordScores;
}
function getCompletions(editor, session, pos, prefix, callback) {
    var wordScore = wordDistance(pos, session);
    var wordList = Object.keys(wordScore);
    callback(null, wordList.map(function (word) {
        return {
            caption: word,
            value: word,
            score: wordScore[word],
            meta: "local"
        };
    }));
}
exports.getCompletions = getCompletions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dF9jb21wbGV0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXV0b2NvbXBsZXRlL3RleHRfY29tcGxldGVyLnRzIl0sIm5hbWVzIjpbIndvcmREaXN0YW5jZSIsIndvcmREaXN0YW5jZS5nZXRXb3JkSW5kZXgiLCJnZXRDb21wbGV0aW9ucyJdLCJtYXBwaW5ncyI6IkFBNkJBLElBQU8sRUFBRSxXQUFXLFVBQVUsQ0FBQyxDQUFDO0FBU2hDLHNCQUFzQixHQUFvQyxFQUFFLE9BQXVCO0lBQy9FQSxJQUFJQSxVQUFVQSxHQUFXQSxnREFBZ0RBLENBQUNBO0lBRTFFQTtRQUNJQyxJQUFJQSxVQUFVQSxHQUFHQSxPQUFPQSxDQUFDQSxZQUFZQSxDQUFDQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxVQUFVQSxDQUFDQSxFQUFFQSxHQUFHQSxFQUFFQSxDQUFDQSxFQUFFQSxNQUFNQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN2RkEsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFDbkRBLENBQUNBO0lBRURELElBQUlBLFNBQVNBLEdBQUdBLFlBQVlBLEVBQUVBLENBQUNBO0lBQy9CQSxJQUFJQSxLQUFLQSxHQUFHQSxPQUFPQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxLQUFLQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtJQUNqREEsSUFBSUEsVUFBVUEsR0FBR0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFFckNBLElBQUlBLFdBQVdBLEdBQUdBLEtBQUtBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO0lBRW5DQSxLQUFLQSxDQUFDQSxPQUFPQSxDQUFDQSxVQUFTQSxJQUFJQSxFQUFFQSxHQUFHQTtRQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLEtBQUssV0FBVyxDQUFDO1lBQUMsTUFBTSxDQUFDO1FBRTFDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO1FBQ3BDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDN0IsQ0FBQztJQUNMLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFDSEEsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0E7QUFDdEJBLENBQUNBO0FBS0Qsd0JBQStCLE1BQWMsRUFBRSxPQUF1QixFQUFFLEdBQW9DLEVBQUUsTUFBYyxFQUFFLFFBQXVHO0lBRWpPRSxJQUFJQSxTQUFTQSxHQUFHQSxZQUFZQSxDQUFDQSxHQUFHQSxFQUFFQSxPQUFPQSxDQUFDQSxDQUFDQTtJQUUzQ0EsSUFBSUEsUUFBUUEsR0FBR0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0E7SUFFdENBLFFBQVFBLENBQUNBLElBQUlBLEVBQUVBLFFBQVFBLENBQUNBLEdBQUdBLENBQUNBLFVBQVNBLElBQUlBO1FBQ3JDLE1BQU0sQ0FBQztZQUNILE9BQU8sRUFBRSxJQUFJO1lBQ2IsS0FBSyxFQUFFLElBQUk7WUFDWCxLQUFLLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQztZQUN0QixJQUFJLEVBQUUsT0FBTztTQUNoQixDQUFDO0lBQ04sQ0FBQyxDQUFDQSxDQUFDQSxDQUFDQTtBQUNSQSxDQUFDQTtBQWRlLHNCQUFjLGlCQWM3QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyogKioqKiogQkVHSU4gTElDRU5TRSBCTE9DSyAqKioqKlxuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBsaWNlbnNlOlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiwgQWpheC5vcmcgQi5WLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbiAqICAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICogICAgICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqICAgICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgQWpheC5vcmcgQi5WLiBub3IgdGhlXG4gKiAgICAgICBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0c1xuICogICAgICAgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKiBcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuICogQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbiAqIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbiAqIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEFKQVguT1JHIEIuVi4gQkUgTElBQkxFIEZPUiBBTllcbiAqIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gKiAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7XG4gKiBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkRcbiAqIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuICogU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKlxuICogKioqKiogRU5EIExJQ0VOU0UgQkxPQ0sgKioqKiogKi9cbmltcG9ydCBybSA9IHJlcXVpcmUoXCIuLi9yYW5nZVwiKTtcbmltcG9ydCBkbSA9IHJlcXVpcmUoJy4uL2RvY3VtZW50Jyk7XG5pbXBvcnQgc20gPSByZXF1aXJlKCcuLi9lZGl0X3Nlc3Npb24nKTtcbmltcG9ydCBFZGl0b3IgPSByZXF1aXJlKCcuLi9FZGl0b3InKTtcblxuLyoqXG4gKiBEb2VzIGEgZGlzdGFuY2UgYW5hbHlzaXMgb2YgdGhlIHdvcmQgYHByZWZpeGAgYXQgcG9zaXRpb24gYHBvc2AgaW4gYGRvY2AuXG4gKiBAcmV0dXJuIE1hcCBvZiBzdHJpbmcgdG8gbnVtYmVyLlxuICovXG5mdW5jdGlvbiB3b3JkRGlzdGFuY2UocG9zOiB7IHJvdzogbnVtYmVyOyBjb2x1bW46IG51bWJlciB9LCBzZXNzaW9uOiBzbS5FZGl0U2Vzc2lvbikge1xuICAgIHZhciBzcGxpdFJlZ2V4OiBSZWdFeHAgPSAvW15hLXpBLVpfMC05XFwkXFwtXFx1MDBDMC1cXHUxRkZGXFx1MkMwMC1cXHVEN0ZGXFx3XSsvO1xuXG4gICAgZnVuY3Rpb24gZ2V0V29yZEluZGV4KCk6IG51bWJlciB7XG4gICAgICAgIHZhciB0ZXh0QmVmb3JlID0gc2Vzc2lvbi5nZXRUZXh0UmFuZ2Uocm0uUmFuZ2UuZnJvbVBvaW50cyh7IHJvdzogMCwgY29sdW1uOiAwIH0sIHBvcykpO1xuICAgICAgICByZXR1cm4gdGV4dEJlZm9yZS5zcGxpdChzcGxpdFJlZ2V4KS5sZW5ndGggLSAxO1xuICAgIH1cblxuICAgIHZhciBwcmVmaXhQb3MgPSBnZXRXb3JkSW5kZXgoKTtcbiAgICB2YXIgd29yZHMgPSBzZXNzaW9uLmdldFZhbHVlKCkuc3BsaXQoc3BsaXRSZWdleCk7XG4gICAgdmFyIHdvcmRTY29yZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdmFyIGN1cnJlbnRXb3JkID0gd29yZHNbcHJlZml4UG9zXTtcblxuICAgIHdvcmRzLmZvckVhY2goZnVuY3Rpb24od29yZCwgaWR4KSB7XG4gICAgICAgIGlmICghd29yZCB8fCB3b3JkID09PSBjdXJyZW50V29yZCkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBkaXN0YW5jZSA9IE1hdGguYWJzKHByZWZpeFBvcyAtIGlkeCk7XG4gICAgICAgIHZhciBzY29yZSA9IHdvcmRzLmxlbmd0aCAtIGRpc3RhbmNlO1xuICAgICAgICBpZiAod29yZFNjb3Jlc1t3b3JkXSkge1xuICAgICAgICAgICAgd29yZFNjb3Jlc1t3b3JkXSA9IE1hdGgubWF4KHNjb3JlLCB3b3JkU2NvcmVzW3dvcmRdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdvcmRTY29yZXNbd29yZF0gPSBzY29yZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB3b3JkU2NvcmVzO1xufVxuXG4vKipcbiAqIFRoaXMgdGV4dHVhbCBjb21wbGV0ZXIgaXMgcmF0aGVyIGR1bWIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb21wbGV0aW9ucyhlZGl0b3I6IEVkaXRvciwgc2Vzc2lvbjogc20uRWRpdFNlc3Npb24sIHBvczogeyByb3c6IG51bWJlcjsgY29sdW1uOiBudW1iZXIgfSwgcHJlZml4OiBzdHJpbmcsIGNhbGxiYWNrOiAoZXJyLCBjb21wbGV0aW9uczogeyBjYXB0aW9uOiBzdHJpbmc7IHZhbHVlOiBzdHJpbmc7IHNjb3JlOiBudW1iZXI7IG1ldGE6IHN0cmluZyB9W10pID0+IHZvaWQpIHtcblxuICAgIHZhciB3b3JkU2NvcmUgPSB3b3JkRGlzdGFuY2UocG9zLCBzZXNzaW9uKTtcblxuICAgIHZhciB3b3JkTGlzdCA9IE9iamVjdC5rZXlzKHdvcmRTY29yZSk7XG5cbiAgICBjYWxsYmFjayhudWxsLCB3b3JkTGlzdC5tYXAoZnVuY3Rpb24od29yZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2FwdGlvbjogd29yZCxcbiAgICAgICAgICAgIHZhbHVlOiB3b3JkLFxuICAgICAgICAgICAgc2NvcmU6IHdvcmRTY29yZVt3b3JkXSxcbiAgICAgICAgICAgIG1ldGE6IFwibG9jYWxcIlxuICAgICAgICB9O1xuICAgIH0pKTtcbn1cblxuIl19