import EditorDocument from "../EditorDocument";
import { delayedCall } from "../lib/lang";
export default class Mirror {
    constructor(sender, timeout = 500) {
        this.sender = sender;
        this.$timeout = timeout;
        this.doc = new EditorDocument("");
        var deferredUpdate = this.deferredUpdate = delayedCall(this.onUpdate.bind(this));
        var _self = this;
        sender.on('change', function (e) {
            _self.doc.applyDeltas(e.data);
            if (_self.$timeout) {
                return deferredUpdate.schedule(_self.$timeout);
            }
            else {
                _self.onUpdate();
            }
        });
    }
    setTimeout(timeout) {
        this.$timeout = timeout;
    }
    setValue(value) {
        this.doc.setValue(value);
        this.deferredUpdate.schedule(this.$timeout);
    }
    getValue(callbackId) {
        this.sender.callback(this.doc.getValue(), callbackId);
    }
    onUpdate() {
    }
    isPending() {
        return this.deferredUpdate.isPending();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWlycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3dvcmtlci9NaXJyb3IudHMiXSwibmFtZXMiOlsiTWlycm9yIiwiTWlycm9yLmNvbnN0cnVjdG9yIiwiTWlycm9yLnNldFRpbWVvdXQiLCJNaXJyb3Iuc2V0VmFsdWUiLCJNaXJyb3IuZ2V0VmFsdWUiLCJNaXJyb3Iub25VcGRhdGUiLCJNaXJyb3IuaXNQZW5kaW5nIl0sIm1hcHBpbmdzIjoiT0FBTyxjQUFjLE1BQU0sbUJBQW1CO09BQ3ZDLEVBQUMsV0FBVyxFQUFDLE1BQU0sYUFBYTtBQUl2QztJQVdJQSxZQUFZQSxNQUFjQSxFQUFFQSxPQUFPQSxHQUFXQSxHQUFHQTtRQUM3Q0MsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0E7UUFDckJBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLE9BQU9BLENBQUNBO1FBQ3hCQSxJQUFJQSxDQUFDQSxHQUFHQSxHQUFHQSxJQUFJQSxjQUFjQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUVsQ0EsSUFBSUEsY0FBY0EsR0FBR0EsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFHakZBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBO1FBRWpCQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxRQUFRQSxFQUFFQSxVQUFTQSxDQUE4RUE7WUFFdkcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRTlCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbkQsQ0FBQztZQUNELElBQUksQ0FBQyxDQUFDO2dCQUVGLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNyQixDQUFDO1FBQ0wsQ0FBQyxDQUFDQSxDQUFDQTtJQUNQQSxDQUFDQTtJQUVERCxVQUFVQSxDQUFDQSxPQUFlQTtRQUN0QkUsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0E7SUFDNUJBLENBQUNBO0lBRURGLFFBQVFBLENBQUNBLEtBQWFBO1FBQ2xCRyxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUN6QkEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7SUFDaERBLENBQUNBO0lBRURILFFBQVFBLENBQUNBLFVBQWtCQTtRQUN2QkksSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsUUFBUUEsRUFBRUEsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0E7SUFDMURBLENBQUNBO0lBT0RKLFFBQVFBO0lBRVJLLENBQUNBO0lBRURMLFNBQVNBO1FBQ0xNLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBO0lBQzNDQSxDQUFDQTtBQUNMTixDQUFDQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEVkaXRvckRvY3VtZW50IGZyb20gXCIuLi9FZGl0b3JEb2N1bWVudFwiO1xuaW1wb3J0IHtkZWxheWVkQ2FsbH0gZnJvbSBcIi4uL2xpYi9sYW5nXCI7XG5pbXBvcnQgU2VuZGVyIGZyb20gXCIuLi9saWIvU2VuZGVyXCI7XG5pbXBvcnQgUmFuZ2UgZnJvbSBcIi4uL1JhbmdlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1pcnJvciB7XG4gICAgcHVibGljIHNlbmRlcjogU2VuZGVyO1xuICAgIHB1YmxpYyBkb2M6IEVkaXRvckRvY3VtZW50O1xuICAgIHB1YmxpYyBkZWZlcnJlZFVwZGF0ZTtcbiAgICBwdWJsaWMgJHRpbWVvdXQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgJ3NlbmRlcicgcHJvcGVydHkgdG8gdGhlIHNwZWNpZmllZCBhcmd1bWVudC5cbiAgICAgKiBJbml0aWFsaXplcyB0aGUgJ2RvYycgcHJvcGVydHkgdG8gYSBuZXcgRWRpdERvY3VtZW50LlxuICAgICAqIEluaXRpYWxpemVzIHRoZSAnZGVmZXJyZWRVcGRhdGUnIHByb3BlcnR5IHRvIGEgZGVsYXllZCBjYWxsIHRvICdvblVwZGF0ZScuXG4gICAgICogQmluZHMgdGhlICdzZW5kZXInIFwiY2hhbmdlXCIgZXZlbnQgdG8gYSBmdW5jdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNlbmRlcjogU2VuZGVyLCB0aW1lb3V0OiBudW1iZXIgPSA1MDApIHtcbiAgICAgICAgdGhpcy5zZW5kZXIgPSBzZW5kZXI7XG4gICAgICAgIHRoaXMuJHRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgICB0aGlzLmRvYyA9IG5ldyBFZGl0b3JEb2N1bWVudChcIlwiKTtcblxuICAgICAgICB2YXIgZGVmZXJyZWRVcGRhdGUgPSB0aGlzLmRlZmVycmVkVXBkYXRlID0gZGVsYXllZENhbGwodGhpcy5vblVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAvLyBCaW5kaW5nIGZvciB1c2UgaW4gdGhlIGZvbGxvd2luZyBjYWxsYmFjay5cbiAgICAgICAgdmFyIF9zZWxmID0gdGhpcztcblxuICAgICAgICBzZW5kZXIub24oJ2NoYW5nZScsIGZ1bmN0aW9uKGU6IHsgZGF0YTogeyBhY3Rpb246IHN0cmluZzsgcmFuZ2U6IFJhbmdlOyB0ZXh0OiBzdHJpbmc7IGxpbmVzOiBzdHJpbmdbXSB9W10gfSkge1xuXG4gICAgICAgICAgICBfc2VsZi5kb2MuYXBwbHlEZWx0YXMoZS5kYXRhKTtcblxuICAgICAgICAgICAgaWYgKF9zZWxmLiR0aW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkVXBkYXRlLnNjaGVkdWxlKF9zZWxmLiR0aW1lb3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEknbSBub3Qgc3VyZSB0aGF0IHdlIG5lZWQgdG8gc3BlY2lhbC1jYXNlIHRoaXMgY29kZS5cbiAgICAgICAgICAgICAgICBfc2VsZi5vblVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KHRpbWVvdXQ6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLiR0aW1lb3V0ID0gdGltZW91dDtcbiAgICB9XG5cbiAgICBzZXRWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZG9jLnNldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgdGhpcy5kZWZlcnJlZFVwZGF0ZS5zY2hlZHVsZSh0aGlzLiR0aW1lb3V0KTtcbiAgICB9XG5cbiAgICBnZXRWYWx1ZShjYWxsYmFja0lkOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zZW5kZXIuY2FsbGJhY2sodGhpcy5kb2MuZ2V0VmFsdWUoKSwgY2FsbGJhY2tJZCk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIENhbGxlZCBhZnRlciB0aGUgdGltZW91dCBwZXJpb2QuIERlcml2ZWQgY2xhc3NlcyB3aWxsIG5vcm1hbGx5IHBlcmZvcm1cbiAgICAgKiBhIGNvbXB1dGF0aW9uYWxseSBleHBlbnNpdmUgYW5hbHlzaXMgdGhlbiByZXBvcnQgYW5ub3RhdGlvbnMgdG8gdGhlXG4gICAgICogc2VuZGVyLlxuICAgICAqL1xuICAgIG9uVXBkYXRlKCkge1xuICAgICAgICAvLyBhYnN0cmFjdCBtZXRob2RcbiAgICB9XG5cbiAgICBpc1BlbmRpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmVycmVkVXBkYXRlLmlzUGVuZGluZygpO1xuICAgIH1cbn1cbiJdfQ==