import EditorDocument from "../EditorDocument";
import { delayedCall } from "../lib/lang";
export default class Mirror {
    constructor(sender, timeout) {
        this.sender = sender;
        this.$timeout = timeout;
        var doc = this.doc = new EditorDocument("");
        var deferredUpdate = this.deferredUpdate = delayedCall(this.onUpdate.bind(this));
        var _self = this;
        sender.on('change', function (e) {
            doc.applyDeltas(e.data);
            if (_self.$timeout) {
                return deferredUpdate.schedule(_self.$timeout);
            }
            else {
                _self.onUpdate();
            }
        });
    }
    setTimeout(timeout) {
        this.$timeout = timeout;
    }
    setValue(value) {
        this.doc.setValue(value);
        this.deferredUpdate.schedule(this.$timeout);
    }
    getValue(callbackId) {
        this.sender.callback(this.doc.getValue(), callbackId);
    }
    onUpdate() {
    }
    isPending() {
        return this.deferredUpdate.isPending();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWlycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3dvcmtlci9NaXJyb3IudHMiXSwibmFtZXMiOlsiTWlycm9yIiwiTWlycm9yLmNvbnN0cnVjdG9yIiwiTWlycm9yLnNldFRpbWVvdXQiLCJNaXJyb3Iuc2V0VmFsdWUiLCJNaXJyb3IuZ2V0VmFsdWUiLCJNaXJyb3Iub25VcGRhdGUiLCJNaXJyb3IuaXNQZW5kaW5nIl0sIm1hcHBpbmdzIjoiT0FBTyxjQUFjLE1BQU0sbUJBQW1CO09BQ3ZDLEVBQUMsV0FBVyxFQUFDLE1BQU0sYUFBYTtBQUV2QztJQVdJQSxZQUFZQSxNQUFNQSxFQUE2QkEsT0FBZ0JBO1FBQzNEQyxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0E7UUFFeEJBLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLEdBQUdBLElBQUlBLGNBQWNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBRTVDQSxJQUFJQSxjQUFjQSxHQUFHQSxJQUFJQSxDQUFDQSxjQUFjQSxHQUFHQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUdqRkEsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFakJBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLEVBQUVBLFVBQVNBLENBQXlKQTtZQUVsTCxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV4QixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDakIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25ELENBQUM7WUFDRCxJQUFJLENBQUMsQ0FBQztnQkFFRixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDckIsQ0FBQztRQUNMLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7SUFFREQsVUFBVUEsQ0FBQ0EsT0FBZUE7UUFDdEJFLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLE9BQU9BLENBQUNBO0lBQzVCQSxDQUFDQTtJQUVERixRQUFRQSxDQUFDQSxLQUFhQTtRQUNsQkcsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDekJBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO0lBQ2hEQSxDQUFDQTtJQUVESCxRQUFRQSxDQUFDQSxVQUFVQTtRQUNmSSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxFQUFFQSxFQUFFQSxVQUFVQSxDQUFDQSxDQUFDQTtJQUMxREEsQ0FBQ0E7SUFPREosUUFBUUE7SUFFUkssQ0FBQ0E7SUFFREwsU0FBU0E7UUFDTE0sTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0E7SUFDM0NBLENBQUNBO0FBQ0xOLENBQUNBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRWRpdG9yRG9jdW1lbnQgZnJvbSBcIi4uL0VkaXRvckRvY3VtZW50XCI7XG5pbXBvcnQge2RlbGF5ZWRDYWxsfSBmcm9tIFwiLi4vbGliL2xhbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWlycm9yIHtcbiAgICBwdWJsaWMgc2VuZGVyLypGSVhNRTogYWNlLldvcmtlclNlbmRlciovO1xuICAgIHB1YmxpYyBkb2M6IEVkaXRvckRvY3VtZW50O1xuICAgIHB1YmxpYyBkZWZlcnJlZFVwZGF0ZTtcbiAgICBwdWJsaWMgJHRpbWVvdXQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgJ3NlbmRlcicgcHJvcGVydHkgdG8gdGhlIHNwZWNpZmllZCBhcmd1bWVudC5cbiAgICAgKiBJbml0aWFsaXplcyB0aGUgJ2RvYycgcHJvcGVydHkgdG8gYSBuZXcgRWRpdERvY3VtZW50LlxuICAgICAqIEluaXRpYWxpemVzIHRoZSAnZGVmZXJyZWRVcGRhdGUnIHByb3BlcnR5IHRvIGEgZGVsYXllZCBjYWxsIHRvICdvblVwZGF0ZScuXG4gICAgICogQmluZHMgdGhlICdzZW5kZXInIFwiY2hhbmdlXCIgZXZlbnQgdG8gYSBmdW5jdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNlbmRlci8qRklYTUU6IGFjZS5Xb3JrZXJTZW5kZXIqLywgdGltZW91dD86IG51bWJlcikge1xuICAgICAgICB0aGlzLnNlbmRlciA9IHNlbmRlcjtcbiAgICAgICAgdGhpcy4kdGltZW91dCA9IHRpbWVvdXQ7XG5cbiAgICAgICAgdmFyIGRvYyA9IHRoaXMuZG9jID0gbmV3IEVkaXRvckRvY3VtZW50KFwiXCIpO1xuXG4gICAgICAgIHZhciBkZWZlcnJlZFVwZGF0ZSA9IHRoaXMuZGVmZXJyZWRVcGRhdGUgPSBkZWxheWVkQ2FsbCh0aGlzLm9uVXBkYXRlLmJpbmQodGhpcykpO1xuXG4gICAgICAgIC8vIEJpbmRpbmcgZm9yIHVzZSBpbiB0aGUgZm9sbG93aW5nIGNhbGxiYWNrLiAgICAgICAgXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgc2VuZGVyLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbihlOiB7IGRhdGE6IHsgYWN0aW9uOiBzdHJpbmc7IHJhbmdlOiB7IHN0YXJ0OiB7IHJvdzogbnVtYmVyOyBjb2x1bW46IG51bWJlciB9OyBlbmQ6IHsgcm93OiBudW1iZXI7IGNvbHVtbjogbnVtYmVyIH0gfTsgdGV4dDogc3RyaW5nOyBsaW5lczogc3RyaW5nW10gfVtdIH0pIHtcblxuICAgICAgICAgICAgZG9jLmFwcGx5RGVsdGFzKGUuZGF0YSk7XG5cbiAgICAgICAgICAgIGlmIChfc2VsZi4kdGltZW91dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZFVwZGF0ZS5zY2hlZHVsZShfc2VsZi4kdGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJJ20gbm90IHN1cmUgdGhhdCB3ZSBuZWVkIHRvIHNwZWNpYWwtY2FzZSB0aGlzIGNvZGUuXG4gICAgICAgICAgICAgICAgX3NlbGYub25VcGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0VGltZW91dCh0aW1lb3V0OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy4kdGltZW91dCA9IHRpbWVvdXQ7XG4gICAgfVxuXG4gICAgc2V0VmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmRvYy5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHRoaXMuZGVmZXJyZWRVcGRhdGUuc2NoZWR1bGUodGhpcy4kdGltZW91dCk7XG4gICAgfVxuXG4gICAgZ2V0VmFsdWUoY2FsbGJhY2tJZCkge1xuICAgICAgICB0aGlzLnNlbmRlci5jYWxsYmFjayh0aGlzLmRvYy5nZXRWYWx1ZSgpLCBjYWxsYmFja0lkKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGFmdGVyIHRoZSB0aW1lb3V0IHBlcmlvZC4gRGVyaXZlZCBjbGFzc2VzIHdpbGwgbm9ybWFsbHkgcGVyZm9ybVxuICAgICAqIGEgY29tcHV0YXRpb25hbGx5IGV4cGVuc2l2ZSBhbmFseXNpcyB0aGVuIHJlcG9ydCBhbm5vdGF0aW9ucyB0byB0aGVcbiAgICAgKiBzZW5kZXIuXG4gICAgICovXG4gICAgb25VcGRhdGUoKSB7XG4gICAgICAgIC8vIGFic3RyYWN0IG1ldGhvZFxuICAgIH1cblxuICAgIGlzUGVuZGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmZXJyZWRVcGRhdGUuaXNQZW5kaW5nKCk7XG4gICAgfVxufVxuIl19