import EditorDocument from "../EditorDocument";
import { delayedCall } from "../lib/lang";
export default class Mirror {
    constructor(sender, timeout) {
        this.sender = sender;
        this.$timeout = timeout;
        var doc = this.doc = new EditorDocument("");
        var deferredUpdate = this.deferredUpdate = delayedCall(this.onUpdate.bind(this));
        var _self = this;
        sender.on('change', function (e) {
            doc.applyDeltas(e.data);
            if (_self.$timeout) {
                return deferredUpdate.schedule(_self.$timeout);
            }
            else {
                _self.onUpdate();
            }
        });
    }
    setTimeout(timeout) {
        this.$timeout = timeout;
    }
    setValue(value) {
        this.doc.setValue(value);
        this.deferredUpdate.schedule(this.$timeout);
    }
    getValue(callbackId) {
        this.sender.callback(this.doc.getValue(), callbackId);
    }
    onUpdate() {
    }
    isPending() {
        return this.deferredUpdate.isPending();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWlycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3dvcmtlci9NaXJyb3IudHMiXSwibmFtZXMiOlsiTWlycm9yIiwiTWlycm9yLmNvbnN0cnVjdG9yIiwiTWlycm9yLnNldFRpbWVvdXQiLCJNaXJyb3Iuc2V0VmFsdWUiLCJNaXJyb3IuZ2V0VmFsdWUiLCJNaXJyb3Iub25VcGRhdGUiLCJNaXJyb3IuaXNQZW5kaW5nIl0sIm1hcHBpbmdzIjoiT0FBTyxjQUFjLE1BQU0sbUJBQW1CO09BQ3ZDLEVBQUMsV0FBVyxFQUFDLE1BQU0sYUFBYTtBQUl2QztJQVdJQSxZQUFZQSxNQUFjQSxFQUFFQSxPQUFnQkE7UUFDeENDLElBQUlBLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBO1FBQ3JCQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxPQUFPQSxDQUFDQTtRQUV4QkEsSUFBSUEsR0FBR0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsR0FBR0EsSUFBSUEsY0FBY0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7UUFFNUNBLElBQUlBLGNBQWNBLEdBQUdBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLFdBQVdBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO1FBR2pGQSxJQUFJQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUVqQkEsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsUUFBUUEsRUFBRUEsVUFBU0EsQ0FBOEVBO1lBRXZHLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXhCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixNQUFNLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbkQsQ0FBQztZQUNELElBQUksQ0FBQyxDQUFDO2dCQUVGLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNyQixDQUFDO1FBQ0wsQ0FBQyxDQUFDQSxDQUFDQTtJQUNQQSxDQUFDQTtJQUVERCxVQUFVQSxDQUFDQSxPQUFlQTtRQUN0QkUsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0E7SUFDNUJBLENBQUNBO0lBRURGLFFBQVFBLENBQUNBLEtBQWFBO1FBQ2xCRyxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUN6QkEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7SUFDaERBLENBQUNBO0lBRURILFFBQVFBLENBQUNBLFVBQWtCQTtRQUN2QkksSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsUUFBUUEsRUFBRUEsRUFBRUEsVUFBVUEsQ0FBQ0EsQ0FBQ0E7SUFDMURBLENBQUNBO0lBT0RKLFFBQVFBO0lBRVJLLENBQUNBO0lBRURMLFNBQVNBO1FBQ0xNLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBO0lBQzNDQSxDQUFDQTtBQUNMTixDQUFDQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEVkaXRvckRvY3VtZW50IGZyb20gXCIuLi9FZGl0b3JEb2N1bWVudFwiO1xuaW1wb3J0IHtkZWxheWVkQ2FsbH0gZnJvbSBcIi4uL2xpYi9sYW5nXCI7XG5pbXBvcnQgU2VuZGVyIGZyb20gXCIuLi9saWIvU2VuZGVyXCI7XG5pbXBvcnQgUmFuZ2UgZnJvbSBcIi4uL1JhbmdlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1pcnJvciB7XG4gICAgcHVibGljIHNlbmRlcjogU2VuZGVyO1xuICAgIHB1YmxpYyBkb2M6IEVkaXRvckRvY3VtZW50O1xuICAgIHB1YmxpYyBkZWZlcnJlZFVwZGF0ZTtcbiAgICBwdWJsaWMgJHRpbWVvdXQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgJ3NlbmRlcicgcHJvcGVydHkgdG8gdGhlIHNwZWNpZmllZCBhcmd1bWVudC5cbiAgICAgKiBJbml0aWFsaXplcyB0aGUgJ2RvYycgcHJvcGVydHkgdG8gYSBuZXcgRWRpdERvY3VtZW50LlxuICAgICAqIEluaXRpYWxpemVzIHRoZSAnZGVmZXJyZWRVcGRhdGUnIHByb3BlcnR5IHRvIGEgZGVsYXllZCBjYWxsIHRvICdvblVwZGF0ZScuXG4gICAgICogQmluZHMgdGhlICdzZW5kZXInIFwiY2hhbmdlXCIgZXZlbnQgdG8gYSBmdW5jdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNlbmRlcjogU2VuZGVyLCB0aW1lb3V0PzogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc2VuZGVyID0gc2VuZGVyO1xuICAgICAgICB0aGlzLiR0aW1lb3V0ID0gdGltZW91dDtcblxuICAgICAgICB2YXIgZG9jID0gdGhpcy5kb2MgPSBuZXcgRWRpdG9yRG9jdW1lbnQoXCJcIik7XG5cbiAgICAgICAgdmFyIGRlZmVycmVkVXBkYXRlID0gdGhpcy5kZWZlcnJlZFVwZGF0ZSA9IGRlbGF5ZWRDYWxsKHRoaXMub25VcGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgLy8gQmluZGluZyBmb3IgdXNlIGluIHRoZSBmb2xsb3dpbmcgY2FsbGJhY2suXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgc2VuZGVyLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbihlOiB7IGRhdGE6IHsgYWN0aW9uOiBzdHJpbmc7IHJhbmdlOiBSYW5nZTsgdGV4dDogc3RyaW5nOyBsaW5lczogc3RyaW5nW10gfVtdIH0pIHtcblxuICAgICAgICAgICAgZG9jLmFwcGx5RGVsdGFzKGUuZGF0YSk7XG5cbiAgICAgICAgICAgIGlmIChfc2VsZi4kdGltZW91dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZFVwZGF0ZS5zY2hlZHVsZShfc2VsZi4kdGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJJ20gbm90IHN1cmUgdGhhdCB3ZSBuZWVkIHRvIHNwZWNpYWwtY2FzZSB0aGlzIGNvZGUuXG4gICAgICAgICAgICAgICAgX3NlbGYub25VcGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0VGltZW91dCh0aW1lb3V0OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy4kdGltZW91dCA9IHRpbWVvdXQ7XG4gICAgfVxuXG4gICAgc2V0VmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmRvYy5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHRoaXMuZGVmZXJyZWRVcGRhdGUuc2NoZWR1bGUodGhpcy4kdGltZW91dCk7XG4gICAgfVxuXG4gICAgZ2V0VmFsdWUoY2FsbGJhY2tJZDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc2VuZGVyLmNhbGxiYWNrKHRoaXMuZG9jLmdldFZhbHVlKCksIGNhbGxiYWNrSWQpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBDYWxsZWQgYWZ0ZXIgdGhlIHRpbWVvdXQgcGVyaW9kLiBEZXJpdmVkIGNsYXNzZXMgd2lsbCBub3JtYWxseSBwZXJmb3JtXG4gICAgICogYSBjb21wdXRhdGlvbmFsbHkgZXhwZW5zaXZlIGFuYWx5c2lzIHRoZW4gcmVwb3J0IGFubm90YXRpb25zIHRvIHRoZVxuICAgICAqIHNlbmRlci5cbiAgICAgKi9cbiAgICBvblVwZGF0ZSgpIHtcbiAgICAgICAgLy8gYWJzdHJhY3QgbWV0aG9kXG4gICAgfVxuXG4gICAgaXNQZW5kaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWZlcnJlZFVwZGF0ZS5pc1BlbmRpbmcoKTtcbiAgICB9XG59XG4iXX0=