var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var net = require('../lib/net');
var eve = require('../lib/event_emitter');
var config = require("../config");
var WorkerClient = (function (_super) {
    __extends(WorkerClient, _super);
    function WorkerClient(topLevelNamespaces, mod, classname, workerUrl) {
        _super.call(this);
        this.callbacks = {};
        this.callbackId = 1;
        this.$sendDeltaQueue = this.$sendDeltaQueue.bind(this);
        this.changeListener = this.changeListener.bind(this);
        this.onMessage = this.onMessage.bind(this);
        if (require['nameToUrl'] && !require.toUrl) {
            require.toUrl = require['nameToUrl'];
        }
        if (config.get("packaged") || !require.toUrl) {
            workerUrl = workerUrl || config.moduleUrl(mod, "worker");
        }
        else {
            var normalizePath = this.$normalizePath;
            workerUrl = workerUrl || normalizePath(require.toUrl("ace/worker/worker.js"));
            var tlns = {};
            topLevelNamespaces.forEach(function (ns) {
                tlns[ns] = normalizePath(require.toUrl(ns).replace(/(\.js)?(\?.*)?$/, ""));
            });
        }
        try {
            this.$worker = new Worker(workerUrl);
        }
        catch (e) {
            if (e instanceof window['DOMException']) {
                var blob = this.$workerBlob(workerUrl);
                var URL = window['URL'] || window['webkitURL'];
                var blobURL = URL.createObjectURL(blob);
                this.$worker = new Worker(blobURL);
                URL.revokeObjectURL(blobURL);
            }
            else {
                throw e;
            }
        }
        this.$worker.postMessage({
            init: true,
            tlns: tlns,
            module: mod,
            classname: classname
        });
        this.$worker.onmessage = this.onMessage;
    }
    WorkerClient.prototype.onMessage = function (e) {
        var msg = e.data;
        switch (msg.type) {
            case "log":
                window.console && console.log && console.log.apply(console, msg.data);
                break;
            case "event":
                this._signal(msg.name, { data: msg.data });
                break;
            case "call":
                var callback = this.callbacks[msg.id];
                if (callback) {
                    callback(msg.data);
                    delete this.callbacks[msg.id];
                }
                break;
        }
    };
    WorkerClient.prototype.$normalizePath = function (path) {
        return net.qualifyURL(path);
    };
    WorkerClient.prototype.terminate = function () {
        this._signal("terminate", {});
        this.deltaQueue = null;
        this.$worker.terminate();
        this.$worker = null;
        this.detachFromDocument();
    };
    WorkerClient.prototype.send = function (cmd, args) {
        this.$worker.postMessage({ command: cmd, args: args });
    };
    WorkerClient.prototype.call = function (cmd, args, callback) {
        if (callback) {
            var id = this.callbackId++;
            this.callbacks[id] = callback;
            args.push(id);
        }
        this.send(cmd, args);
    };
    WorkerClient.prototype.emit = function (event, data) {
        try {
            this.$worker.postMessage({ event: event, data: { data: data.data } });
        }
        catch (ex) {
            console.error(ex.stack);
        }
    };
    WorkerClient.prototype.attachToDocument = function (doc) {
        if (this.$doc) {
            this.terminate();
        }
        this.$doc = doc;
        this.call("setValue", [doc.getValue()]);
        doc.addEventListener('change', this.changeListener);
    };
    WorkerClient.prototype.detachFromDocument = function () {
        this.$doc.removeEventListener('change', this.changeListener);
        this.$doc = null;
    };
    WorkerClient.prototype.changeListener = function (e) {
        if (!this.deltaQueue) {
            this.deltaQueue = [e.data];
            setTimeout(this.$sendDeltaQueue, 0);
        }
        else {
            this.deltaQueue.push(e.data);
        }
    };
    WorkerClient.prototype.$sendDeltaQueue = function () {
        var doc = this.$doc;
        var q = this.deltaQueue;
        if (!q)
            return;
        this.deltaQueue = null;
        if (q.length > 20 && q.length > doc.getLength() >> 1) {
            this.call("setValue", [doc.getValue()]);
        }
        else
            this.emit("change", { data: q });
    };
    WorkerClient.prototype.$workerBlob = function (workerUrl) {
        var script = "importScripts('" + net.qualifyURL(workerUrl) + "');";
        try {
            return new Blob([script], { "type": "application/javascript" });
        }
        catch (e) {
            var BlobBuilder = window['BlobBuilder'] || window['WebKitBlobBuilder'] || window['MozBlobBuilder'];
            var blobBuilder = new BlobBuilder();
            blobBuilder.append(script);
            return blobBuilder.getBlob("application/javascript");
        }
    };
    return WorkerClient;
})(eve.EventEmitterClass);
exports.WorkerClient = WorkerClient;
//# sourceMappingURL=data:application/json;base64,