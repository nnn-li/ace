import EditorDocument from "../EditorDocument";
import { delayedCall } from "../lib/lang";
export class Mirror {
    constructor(sender, timeout) {
        this.sender = sender;
        this.$timeout = timeout;
        var doc = this.doc = new EditorDocument("");
        var deferredUpdate = this.deferredUpdate = delayedCall(this.onUpdate.bind(this));
        var _self = this;
        sender.on('change', function (e) {
            doc.applyDeltas(e.data);
            if (_self.$timeout) {
                return deferredUpdate.schedule(_self.$timeout);
            }
            else {
                _self.onUpdate();
            }
        });
    }
    setTimeout(timeout) {
        this.$timeout = timeout;
    }
    setValue(value) {
        this.doc.setValue(value);
        this.deferredUpdate.schedule(this.$timeout);
    }
    getValue(callbackId) {
        this.sender.callback(this.doc.getValue(), callbackId);
    }
    onUpdate() {
    }
    isPending() {
        return this.deferredUpdate.isPending();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3dvcmtlci9taXJyb3IudHMiXSwibmFtZXMiOlsiTWlycm9yIiwiTWlycm9yLmNvbnN0cnVjdG9yIiwiTWlycm9yLnNldFRpbWVvdXQiLCJNaXJyb3Iuc2V0VmFsdWUiLCJNaXJyb3IuZ2V0VmFsdWUiLCJNaXJyb3Iub25VcGRhdGUiLCJNaXJyb3IuaXNQZW5kaW5nIl0sIm1hcHBpbmdzIjoiT0FBTyxjQUFjLE1BQU0sbUJBQW1CO09BQ3ZDLEVBQUMsV0FBVyxFQUFDLE1BQU0sYUFBYTtBQUV2QztJQVdJQSxZQUFZQSxNQUFNQSxFQUE2QkEsT0FBZ0JBO1FBQzNEQyxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0E7UUFFeEJBLElBQUlBLEdBQUdBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLEdBQUdBLElBQUlBLGNBQWNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBRTVDQSxJQUFJQSxjQUFjQSxHQUFHQSxJQUFJQSxDQUFDQSxjQUFjQSxHQUFHQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUdqRkEsSUFBSUEsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFakJBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLFFBQVFBLEVBQUVBLFVBQVNBLENBQXlKQTtZQUVsTCxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV4QixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDakIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25ELENBQUM7WUFDRCxJQUFJLENBQUMsQ0FBQztnQkFFRixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDckIsQ0FBQztRQUNMLENBQUMsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7SUFFREQsVUFBVUEsQ0FBQ0EsT0FBZUE7UUFDdEJFLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLE9BQU9BLENBQUNBO0lBQzVCQSxDQUFDQTtJQUVERixRQUFRQSxDQUFDQSxLQUFhQTtRQUNsQkcsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDekJBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO0lBQ2hEQSxDQUFDQTtJQUVESCxRQUFRQSxDQUFDQSxVQUFVQTtRQUNmSSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxRQUFRQSxFQUFFQSxFQUFFQSxVQUFVQSxDQUFDQSxDQUFDQTtJQUMxREEsQ0FBQ0E7SUFPREosUUFBUUE7SUFFUkssQ0FBQ0E7SUFFREwsU0FBU0E7UUFDTE0sTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0E7SUFDM0NBLENBQUNBO0FBQ0xOLENBQUNBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRWRpdG9yRG9jdW1lbnQgZnJvbSBcIi4uL0VkaXRvckRvY3VtZW50XCI7XG5pbXBvcnQge2RlbGF5ZWRDYWxsfSBmcm9tIFwiLi4vbGliL2xhbmdcIjtcblxuZXhwb3J0IGNsYXNzIE1pcnJvciB7XG4gICAgcHVibGljIHNlbmRlci8qRklYTUU6IGFjZS5Xb3JrZXJTZW5kZXIqLztcbiAgICBwdWJsaWMgZG9jOiBFZGl0b3JEb2N1bWVudDtcbiAgICBwdWJsaWMgZGVmZXJyZWRVcGRhdGU7XG4gICAgcHVibGljICR0aW1lb3V0OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlICdzZW5kZXInIHByb3BlcnR5IHRvIHRoZSBzcGVjaWZpZWQgYXJndW1lbnQuXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlICdkb2MnIHByb3BlcnR5IHRvIGEgbmV3IEVkaXREb2N1bWVudC5cbiAgICAgKiBJbml0aWFsaXplcyB0aGUgJ2RlZmVycmVkVXBkYXRlJyBwcm9wZXJ0eSB0byBhIGRlbGF5ZWQgY2FsbCB0byAnb25VcGRhdGUnLlxuICAgICAqIEJpbmRzIHRoZSAnc2VuZGVyJyBcImNoYW5nZVwiIGV2ZW50IHRvIGEgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzZW5kZXIvKkZJWE1FOiBhY2UuV29ya2VyU2VuZGVyKi8sIHRpbWVvdXQ/OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zZW5kZXIgPSBzZW5kZXI7XG4gICAgICAgIHRoaXMuJHRpbWVvdXQgPSB0aW1lb3V0O1xuXG4gICAgICAgIHZhciBkb2MgPSB0aGlzLmRvYyA9IG5ldyBFZGl0b3JEb2N1bWVudChcIlwiKTtcblxuICAgICAgICB2YXIgZGVmZXJyZWRVcGRhdGUgPSB0aGlzLmRlZmVycmVkVXBkYXRlID0gZGVsYXllZENhbGwodGhpcy5vblVwZGF0ZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAvLyBCaW5kaW5nIGZvciB1c2UgaW4gdGhlIGZvbGxvd2luZyBjYWxsYmFjay4gICAgICAgIFxuICAgICAgICB2YXIgX3NlbGYgPSB0aGlzO1xuXG4gICAgICAgIHNlbmRlci5vbignY2hhbmdlJywgZnVuY3Rpb24oZTogeyBkYXRhOiB7IGFjdGlvbjogc3RyaW5nOyByYW5nZTogeyBzdGFydDogeyByb3c6IG51bWJlcjsgY29sdW1uOiBudW1iZXIgfTsgZW5kOiB7IHJvdzogbnVtYmVyOyBjb2x1bW46IG51bWJlciB9IH07IHRleHQ6IHN0cmluZzsgbGluZXM6IHN0cmluZ1tdIH1bXSB9KSB7XG5cbiAgICAgICAgICAgIGRvYy5hcHBseURlbHRhcyhlLmRhdGEpO1xuXG4gICAgICAgICAgICBpZiAoX3NlbGYuJHRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWRVcGRhdGUuc2NoZWR1bGUoX3NlbGYuJHRpbWVvdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSSdtIG5vdCBzdXJlIHRoYXQgd2UgbmVlZCB0byBzcGVjaWFsLWNhc2UgdGhpcyBjb2RlLlxuICAgICAgICAgICAgICAgIF9zZWxmLm9uVXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldFRpbWVvdXQodGltZW91dDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuJHRpbWVvdXQgPSB0aW1lb3V0O1xuICAgIH1cblxuICAgIHNldFZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kb2Muc2V0VmFsdWUodmFsdWUpO1xuICAgICAgICB0aGlzLmRlZmVycmVkVXBkYXRlLnNjaGVkdWxlKHRoaXMuJHRpbWVvdXQpO1xuICAgIH1cblxuICAgIGdldFZhbHVlKGNhbGxiYWNrSWQpIHtcbiAgICAgICAgdGhpcy5zZW5kZXIuY2FsbGJhY2sodGhpcy5kb2MuZ2V0VmFsdWUoKSwgY2FsbGJhY2tJZCk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIENhbGxlZCBhZnRlciB0aGUgdGltZW91dCBwZXJpb2QuIERlcml2ZWQgY2xhc3NlcyB3aWxsIG5vcm1hbGx5IHBlcmZvcm1cbiAgICAgKiBhIGNvbXB1dGF0aW9uYWxseSBleHBlbnNpdmUgYW5hbHlzaXMgdGhlbiByZXBvcnQgYW5ub3RhdGlvbnMgdG8gdGhlXG4gICAgICogc2VuZGVyLlxuICAgICAqL1xuICAgIG9uVXBkYXRlKCkge1xuICAgICAgICAvLyBhYnN0cmFjdCBtZXRob2RcbiAgICB9XG5cbiAgICBpc1BlbmRpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmVycmVkVXBkYXRlLmlzUGVuZGluZygpO1xuICAgIH1cbn1cbiJdfQ==