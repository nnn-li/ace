import EditSession from "../EditSession";
import EventEmitterClass from "../lib/event_emitter";
import FontMetrics from "../layer/FontMetrics";
export default class Text extends EventEmitterClass {
    element: HTMLDivElement;
    private $padding;
    private EOF_CHAR;
    private EOL_CHAR_LF;
    private EOL_CHAR_CRLF;
    private EOL_CHAR;
    private TAB_CHAR;
    private SPACE_CHAR;
    private $fontMetrics;
    private session;
    private $pollSizeChangesTimer;
    private showInvisibles;
    private displayIndentGuides;
    private $tabStrings;
    private $textToken;
    private tabSize;
    private $indentGuideRe;
    config: any;
    private $measureNode;
    constructor(parentEl: HTMLElement);
    $updateEolChar(): boolean;
    setPadding(padding: number): void;
    getLineHeight(): number;
    getCharacterWidth(): number;
    $setFontMetrics(measure: FontMetrics): void;
    checkForSizeChanges(): void;
    private $pollSizeChanges();
    setSession(session: EditSession): void;
    private setShowInvisibles(showInvisibles);
    private setDisplayIndentGuides(displayIndentGuides);
    onChangeTabSize(): void;
    private $computeTabString();
    updateLines(config: {
        firstRow: number;
        lastRow: number;
        lineHeight: number;
    }, firstRow: number, lastRow: number): void;
    scrollLines(config: any): void;
    private $renderLinesFragment(config, firstRow, lastRow);
    update(config: any): void;
    private $renderToken(stringBuilder, screenColumn, token, value);
    private renderIndentGuide(stringBuilder, value, max?);
    private $renderWrappedLine(stringBuilder, tokens, splits, onlyContents);
    private $renderSimpleLine(stringBuilder, tokens);
    private $renderLine(stringBuilder, row, onlyContents, foldLine);
    private $getFoldLineTokens(row, foldLine);
    private $useLineGroups();
    destroy(): void;
}
